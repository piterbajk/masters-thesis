
Nios_Custom.elf:     file format elf32-littlenios2
Nios_Custom.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010244

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000303c memsz 0x0000303c flags r-x
    LOAD off    0x0000405c vaddr 0x0001305c paddr 0x00014370 align 2**12
         filesz 0x00001314 memsz 0x00001314 flags rw-
    LOAD off    0x00005684 vaddr 0x00015684 paddr 0x00015684 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002da0  00010244  00010244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000078  00012fe4  00012fe4  00003fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001314  0001305c  00014370  0000405c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  00015684  00015684  00005684  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  000157ac  000157ac  00005370  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005370  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006f0  00000000  00000000  00005398  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000931e  00000000  00000000  00005a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000034b8  00000000  00000000  0000eda6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000382b  00000000  00000000  0001225e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d7c  00000000  00000000  00015a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001f84  00000000  00000000  00016808  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001629  00000000  00000000  0001878c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00019db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000300  00000000  00000000  00019de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001be22  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0001be25  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001be2a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001be2b  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0001be2c  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0001be30  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0001be34  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  0001be38  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002d  00000000  00000000  0001be3c  2**0
                  CONTENTS, READONLY
 26 .jdi          000047d9  00000000  00000000  0001be69  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000357e9  00000000  00000000  00020642  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010244 l    d  .text	00000000 .text
00012fe4 l    d  .rodata	00000000 .rodata
0001305c l    d  .rwdata	00000000 .rwdata
00015684 l    d  .bss	00000000 .bss
000157ac l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Nios_Custom_bsp//obj/HAL/src/crt0.o
0001028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000104a4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0001305c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00010d14 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00010e7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010fb0 l     F .text	00000034 alt_dev_reg
0001313c l     O .rwdata	00001060 jtag
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00011298 l     F .text	0000020c altera_avalon_jtag_uart_irq
000114a4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00011d20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011e74 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011ea0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00012314 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00012454 l     F .text	0000003c alt_get_errno
00012490 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000156a8 g     O .bss	00000004 alt_instruction_exception_handler
00010e00 g     F .text	0000007c alt_main
000103f4 g     F .text	00000080 _puts_r
000156ac g     O .bss	00000100 alt_irq
00014370 g       *ABS*	00000000 __flash_rwdata_start
000103a8 g     F .text	0000004c printf
00015698 g     O .bss	00000004 altera_avalon_timer_ts_freq
000128b0 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00015684 g     O .bss	00000004 errno
0001568c g     O .bss	00000004 alt_argv
0001c344 g       *ABS*	00000000 _gp
000141c4 g     O .rwdata	00000180 alt_fd_list
000128d4 g     F .text	00000090 alt_find_dev
00012ca0 g     F .text	00000028 memcpy
000123d8 g     F .text	0000007c alt_io_redirect
00012fe4 g       *ABS*	00000000 __DTOR_END__
00010474 g     F .text	00000014 puts
00012ba0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0001169c g     F .text	0000021c altera_avalon_jtag_uart_read
0001036c g     F .text	0000003c _printf_r
00010c58 g     F .text	00000064 .hidden __udivsi3
00012b10 g     F .text	00000090 alt_icache_flush
0001435c g     O .rwdata	00000004 alt_max_fd
00014344 g     O .rwdata	00000004 _global_impure_ptr
000157ac g       *ABS*	00000000 __bss_end
00012224 g     F .text	000000f0 alt_iic_isr_register
000127a8 g     F .text	00000108 alt_tick
000121d8 g     F .text	0000004c alt_ic_irq_enabled
0001270c g     F .text	0000009c alt_alarm_stop
0001569c g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
0001419c g     O .rwdata	00000028 alt_dev_null
00011e2c g     F .text	00000048 alt_dcache_flush_all
00014370 g       *ABS*	00000000 __ram_rwdata_end
00014354 g     O .rwdata	00000008 alt_dev_list
00010eb8 g     F .text	000000f8 write
00011bd4 g     F .text	00000020 alt_timestamp_freq
0001305c g       *ABS*	00000000 __ram_rodata_end
00010cbc g     F .text	00000058 .hidden __umodsi3
000157ac g       *ABS*	00000000 end
000111d8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00012fe4 g       *ABS*	00000000 __CTOR_LIST__
00019ca0 g       *ABS*	00000000 __alt_stack_pointer
000118b8 g     F .text	00000224 altera_avalon_jtag_uart_write
00010510 g     F .text	00000524 ___vfprintf_internal_r
00012e20 g     F .text	00000190 __call_exitprocs
00010244 g     F .text	0000004c _start
000156a0 g     O .bss	00000004 _alt_tick_rate
000156a4 g     O .bss	00000004 _alt_nticks
0001101c g     F .text	00000058 alt_sys_init
00012cc8 g     F .text	00000158 __register_exitproc
00011544 g     F .text	00000068 altera_avalon_jtag_uart_close
0001305c g       *ABS*	00000000 __ram_rwdata_start
00012fe4 g       *ABS*	00000000 __ram_rodata_start
00011074 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00012a6c g     F .text	000000a4 alt_get_fd
00012c70 g     F .text	00000030 memcmp
00011134 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000157ac g       *ABS*	00000000 __alt_stack_base
00011184 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012964 g     F .text	00000108 alt_find_file
00011edc g     F .text	000000a4 alt_dev_llist_insert
00010a50 g     F .text	000000b8 __sfvwrite_small_dev
00015684 g       *ABS*	00000000 __bss_start
00010290 g     F .text	000000dc main
00015690 g     O .bss	00000004 alt_envp
000110d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00011adc g     F .text	00000078 alt_timestamp_start
00014360 g     O .rwdata	00000004 alt_errno
00010b60 g     F .text	00000084 .hidden __divsi3
00012fe4 g       *ABS*	00000000 __CTOR_END__
00012fe4 g       *ABS*	00000000 __flash_rodata_start
00012fe4 g       *ABS*	00000000 __DTOR_LIST__
00010fe4 g     F .text	00000038 alt_irq_init
000126a8 g     F .text	00000064 alt_release_fd
00012c3c g     F .text	00000014 atexit
00010b08 g     F .text	00000058 _write_r
00014348 g     O .rwdata	00000004 _impure_ptr
00015688 g     O .bss	00000004 alt_argc
00015694 g     O .bss	00000004 altera_avalon_timer_ts_base
00011fe0 g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
0001434c g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011b54 g     F .text	00000080 alt_timestamp
00012074 g     F .text	00000050 alt_ic_isr_register
00014370 g       *ABS*	00000000 _edata
000157ac g       *ABS*	00000000 _end
00010244 g       *ABS*	00000000 __ram_exceptions_end
000115ac g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001214c g     F .text	0000008c alt_ic_irq_disable
00010000 g       *ABS*	00000000 __alt_mem_memory
00012c50 g     F .text	00000020 exit
00010be4 g     F .text	00000074 .hidden __modsi3
00019ca0 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00012fb0 g     F .text	00000034 _exit
00011bf4 g     F .text	0000012c alt_alarm_start
00010488 g     F .text	0000001c strlen
00012554 g     F .text	00000154 open
00012040 g     F .text	00000034 alt_icache_flush_all
00014364 g     O .rwdata	00000004 alt_priority_mask
000120c4 g     F .text	00000088 alt_ic_irq_enable
00010a34 g     F .text	0000001c __vfprintf_internal
00014368 g     O .rwdata	00000008 alt_alarm_list
00011f80 g     F .text	00000060 _do_ctors
00011d5c g     F .text	000000d0 close
00010d7c g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <_gp+0xffff3cc0>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08409114 	ori	at,at,580
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_memory-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	00800074 	movhi	r2,1
   10140:	1095ab04 	addi	r2,r2,22188
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	00800074 	movhi	r2,1
   10158:	1095ab04 	addi	r2,r2,22188
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xffff3de8>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xffff3ddc>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   101e4:	000531fa 	rdctl	r2,exception
   101e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   101ec:	e0bffd17 	ldw	r2,-12(fp)
   101f0:	10801f0c 	andi	r2,r2,124
   101f4:	1004d0ba 	srli	r2,r2,2
   101f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   101fc:	0005333a 	rdctl	r2,badaddr
   10200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   10204:	d0a4d917 	ldw	r2,-27804(gp)
   10208:	10000726 	beq	r2,zero,10228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   1020c:	d0a4d917 	ldw	r2,-27804(gp)
   10210:	e0fffd17 	ldw	r3,-12(fp)
   10214:	e1bffe17 	ldw	r6,-8(fp)
   10218:	e17fff17 	ldw	r5,-4(fp)
   1021c:	1809883a 	mov	r4,r3
   10220:	103ee83a 	callr	r2
   10224:	00000206 	br	10230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1022c:	0005883a 	mov	r2,zero
}
   10230:	e037883a 	mov	sp,fp
   10234:	dfc00117 	ldw	ra,4(sp)
   10238:	df000017 	ldw	fp,0(sp)
   1023c:	dec00204 	addi	sp,sp,8
   10240:	f800283a 	ret

Disassembly of section .text:

00010244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   1024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   10250:	00bffd16 	blt	zero,r2,10248 <_gp+0xffff3f04>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10254:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10258:	dee72814 	ori	sp,sp,40096
    movhi gp, %hi(_gp)
   1025c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10260:	d6b0d114 	ori	gp,gp,49988
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10268:	1095a114 	ori	r2,r2,22148

    movhi r3, %hi(__bss_end)
   1026c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10270:	18d5eb14 	ori	r3,r3,22444

    beq r2, r3, 1f
   10274:	10c00326 	beq	r2,r3,10284 <_start+0x40>

0:
    stw zero, (r2)
   10278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10280:	10fffd36 	bltu	r2,r3,10278 <_gp+0xffff3f34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10284:	0010d7c0 	call	10d7c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10288:	0010e000 	call	10e00 <alt_main>

0001028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1028c:	003fff06 	br	1028c <_gp+0xffff3f48>

00010290 <main>:

#define CUSTOM_INSTR_OPCODE 0
#define custom_instr(a,b) __builtin_custom_inii (CUSTOM_INSTR_OPCODE, a, b)

int main()
{
   10290:	defff904 	addi	sp,sp,-28
   10294:	dfc00615 	stw	ra,24(sp)
   10298:	df000515 	stw	fp,20(sp)
   1029c:	df000504 	addi	fp,sp,20
	alt_u32 time_start, time_end;
	alt_timestamp_start();
   102a0:	0011adc0 	call	11adc <alt_timestamp_start>

	if(alt_timestamp_start() < 0)
   102a4:	0011adc0 	call	11adc <alt_timestamp_start>
   102a8:	1000030e 	bge	r2,zero,102b8 <main+0x28>
	{
		printf("Timer not available\n");
   102ac:	01000074 	movhi	r4,1
   102b0:	210bf904 	addi	r4,r4,12260
   102b4:	00104740 	call	10474 <puts>
	}
	printf("Timer Frequency %u\n", (alt_u32) alt_timestamp_freq());
   102b8:	0011bd40 	call	11bd4 <alt_timestamp_freq>
   102bc:	100b883a 	mov	r5,r2
   102c0:	01000074 	movhi	r4,1
   102c4:	210bfe04 	addi	r4,r4,12280
   102c8:	00103a80 	call	103a8 <printf>

	int a = 1;
   102cc:	00800044 	movi	r2,1
   102d0:	e0bffb15 	stw	r2,-20(fp)
	int b = 2;
   102d4:	00800084 	movi	r2,2
   102d8:	e0bffc15 	stw	r2,-16(fp)

	time_start = alt_timestamp();
   102dc:	0011b540 	call	11b54 <alt_timestamp>
   102e0:	e0bffd15 	stw	r2,-12(fp)
	time_end = alt_timestamp();
   102e4:	0011b540 	call	11b54 <alt_timestamp>
   102e8:	e0bffe15 	stw	r2,-8(fp)
	printf("Ticks base %d\n", time_end-time_start);
   102ec:	e0fffe17 	ldw	r3,-8(fp)
   102f0:	e0bffd17 	ldw	r2,-12(fp)
   102f4:	1885c83a 	sub	r2,r3,r2
   102f8:	100b883a 	mov	r5,r2
   102fc:	01000074 	movhi	r4,1
   10300:	210c0304 	addi	r4,r4,12300
   10304:	00103a80 	call	103a8 <printf>


	time_start = alt_timestamp();
   10308:	0011b540 	call	11b54 <alt_timestamp>
   1030c:	e0bffd15 	stw	r2,-12(fp)
	int result = custom_instr(a,b);
   10310:	e0bffb17 	ldw	r2,-20(fp)
   10314:	e0fffc17 	ldw	r3,-16(fp)
   10318:	10c5c032 	custom	0,r2,r2,r3
   1031c:	e0bfff15 	stw	r2,-4(fp)
	time_end = alt_timestamp();
   10320:	0011b540 	call	11b54 <alt_timestamp>
   10324:	e0bffe15 	stw	r2,-8(fp)

	printf("Result %d\n", result);
   10328:	e17fff17 	ldw	r5,-4(fp)
   1032c:	01000074 	movhi	r4,1
   10330:	210c0704 	addi	r4,r4,12316
   10334:	00103a80 	call	103a8 <printf>
	printf("Ticks %d\n", time_end-time_start);
   10338:	e0fffe17 	ldw	r3,-8(fp)
   1033c:	e0bffd17 	ldw	r2,-12(fp)
   10340:	1885c83a 	sub	r2,r3,r2
   10344:	100b883a 	mov	r5,r2
   10348:	01000074 	movhi	r4,1
   1034c:	210c0a04 	addi	r4,r4,12328
   10350:	00103a80 	call	103a8 <printf>

	return 0;
   10354:	0005883a 	mov	r2,zero
}
   10358:	e037883a 	mov	sp,fp
   1035c:	dfc00117 	ldw	ra,4(sp)
   10360:	df000017 	ldw	fp,0(sp)
   10364:	dec00204 	addi	sp,sp,8
   10368:	f800283a 	ret

0001036c <_printf_r>:
   1036c:	defffd04 	addi	sp,sp,-12
   10370:	dfc00015 	stw	ra,0(sp)
   10374:	d9800115 	stw	r6,4(sp)
   10378:	d9c00215 	stw	r7,8(sp)
   1037c:	20c00217 	ldw	r3,8(r4)
   10380:	01800074 	movhi	r6,1
   10384:	31829404 	addi	r6,r6,2640
   10388:	19800115 	stw	r6,4(r3)
   1038c:	280d883a 	mov	r6,r5
   10390:	21400217 	ldw	r5,8(r4)
   10394:	d9c00104 	addi	r7,sp,4
   10398:	00105100 	call	10510 <___vfprintf_internal_r>
   1039c:	dfc00017 	ldw	ra,0(sp)
   103a0:	dec00304 	addi	sp,sp,12
   103a4:	f800283a 	ret

000103a8 <printf>:
   103a8:	defffc04 	addi	sp,sp,-16
   103ac:	dfc00015 	stw	ra,0(sp)
   103b0:	d9400115 	stw	r5,4(sp)
   103b4:	d9800215 	stw	r6,8(sp)
   103b8:	d9c00315 	stw	r7,12(sp)
   103bc:	00800074 	movhi	r2,1
   103c0:	1090d204 	addi	r2,r2,17224
   103c4:	10800017 	ldw	r2,0(r2)
   103c8:	01400074 	movhi	r5,1
   103cc:	29429404 	addi	r5,r5,2640
   103d0:	10c00217 	ldw	r3,8(r2)
   103d4:	d9800104 	addi	r6,sp,4
   103d8:	19400115 	stw	r5,4(r3)
   103dc:	200b883a 	mov	r5,r4
   103e0:	11000217 	ldw	r4,8(r2)
   103e4:	0010a340 	call	10a34 <__vfprintf_internal>
   103e8:	dfc00017 	ldw	ra,0(sp)
   103ec:	dec00404 	addi	sp,sp,16
   103f0:	f800283a 	ret

000103f4 <_puts_r>:
   103f4:	defffd04 	addi	sp,sp,-12
   103f8:	dc000015 	stw	r16,0(sp)
   103fc:	2021883a 	mov	r16,r4
   10400:	2809883a 	mov	r4,r5
   10404:	dfc00215 	stw	ra,8(sp)
   10408:	dc400115 	stw	r17,4(sp)
   1040c:	2823883a 	mov	r17,r5
   10410:	00104880 	call	10488 <strlen>
   10414:	81400217 	ldw	r5,8(r16)
   10418:	01000074 	movhi	r4,1
   1041c:	21029404 	addi	r4,r4,2640
   10420:	29000115 	stw	r4,4(r5)
   10424:	100f883a 	mov	r7,r2
   10428:	880d883a 	mov	r6,r17
   1042c:	8009883a 	mov	r4,r16
   10430:	0010a500 	call	10a50 <__sfvwrite_small_dev>
   10434:	00ffffc4 	movi	r3,-1
   10438:	10c00926 	beq	r2,r3,10460 <_puts_r+0x6c>
   1043c:	81400217 	ldw	r5,8(r16)
   10440:	01800074 	movhi	r6,1
   10444:	01c00044 	movi	r7,1
   10448:	28800117 	ldw	r2,4(r5)
   1044c:	318c0d04 	addi	r6,r6,12340
   10450:	8009883a 	mov	r4,r16
   10454:	103ee83a 	callr	r2
   10458:	10bfffe0 	cmpeqi	r2,r2,-1
   1045c:	0085c83a 	sub	r2,zero,r2
   10460:	dfc00217 	ldw	ra,8(sp)
   10464:	dc400117 	ldw	r17,4(sp)
   10468:	dc000017 	ldw	r16,0(sp)
   1046c:	dec00304 	addi	sp,sp,12
   10470:	f800283a 	ret

00010474 <puts>:
   10474:	00800074 	movhi	r2,1
   10478:	1090d204 	addi	r2,r2,17224
   1047c:	200b883a 	mov	r5,r4
   10480:	11000017 	ldw	r4,0(r2)
   10484:	00103f41 	jmpi	103f4 <_puts_r>

00010488 <strlen>:
   10488:	2005883a 	mov	r2,r4
   1048c:	10c00007 	ldb	r3,0(r2)
   10490:	18000226 	beq	r3,zero,1049c <strlen+0x14>
   10494:	10800044 	addi	r2,r2,1
   10498:	003ffc06 	br	1048c <_gp+0xffff4148>
   1049c:	1105c83a 	sub	r2,r2,r4
   104a0:	f800283a 	ret

000104a4 <print_repeat>:
   104a4:	defffb04 	addi	sp,sp,-20
   104a8:	dc800315 	stw	r18,12(sp)
   104ac:	dc400215 	stw	r17,8(sp)
   104b0:	dc000115 	stw	r16,4(sp)
   104b4:	dfc00415 	stw	ra,16(sp)
   104b8:	2025883a 	mov	r18,r4
   104bc:	2823883a 	mov	r17,r5
   104c0:	d9800005 	stb	r6,0(sp)
   104c4:	3821883a 	mov	r16,r7
   104c8:	04000a0e 	bge	zero,r16,104f4 <print_repeat+0x50>
   104cc:	88800117 	ldw	r2,4(r17)
   104d0:	01c00044 	movi	r7,1
   104d4:	d80d883a 	mov	r6,sp
   104d8:	880b883a 	mov	r5,r17
   104dc:	9009883a 	mov	r4,r18
   104e0:	103ee83a 	callr	r2
   104e4:	843fffc4 	addi	r16,r16,-1
   104e8:	103ff726 	beq	r2,zero,104c8 <_gp+0xffff4184>
   104ec:	00bfffc4 	movi	r2,-1
   104f0:	00000106 	br	104f8 <print_repeat+0x54>
   104f4:	0005883a 	mov	r2,zero
   104f8:	dfc00417 	ldw	ra,16(sp)
   104fc:	dc800317 	ldw	r18,12(sp)
   10500:	dc400217 	ldw	r17,8(sp)
   10504:	dc000117 	ldw	r16,4(sp)
   10508:	dec00504 	addi	sp,sp,20
   1050c:	f800283a 	ret

00010510 <___vfprintf_internal_r>:
   10510:	deffe504 	addi	sp,sp,-108
   10514:	d8c00804 	addi	r3,sp,32
   10518:	df001915 	stw	fp,100(sp)
   1051c:	ddc01815 	stw	r23,96(sp)
   10520:	dd801715 	stw	r22,92(sp)
   10524:	dd401615 	stw	r21,88(sp)
   10528:	dd001515 	stw	r20,84(sp)
   1052c:	dcc01415 	stw	r19,80(sp)
   10530:	dc801315 	stw	r18,76(sp)
   10534:	dc401215 	stw	r17,72(sp)
   10538:	dc001115 	stw	r16,68(sp)
   1053c:	dfc01a15 	stw	ra,104(sp)
   10540:	2027883a 	mov	r19,r4
   10544:	2839883a 	mov	fp,r5
   10548:	382d883a 	mov	r22,r7
   1054c:	d9800f15 	stw	r6,60(sp)
   10550:	0021883a 	mov	r16,zero
   10554:	d8000e15 	stw	zero,56(sp)
   10558:	002f883a 	mov	r23,zero
   1055c:	002b883a 	mov	r21,zero
   10560:	0025883a 	mov	r18,zero
   10564:	0023883a 	mov	r17,zero
   10568:	d8000c15 	stw	zero,48(sp)
   1056c:	d8000b15 	stw	zero,44(sp)
   10570:	0029883a 	mov	r20,zero
   10574:	d8c00915 	stw	r3,36(sp)
   10578:	d8c00f17 	ldw	r3,60(sp)
   1057c:	19000003 	ldbu	r4,0(r3)
   10580:	20803fcc 	andi	r2,r4,255
   10584:	1080201c 	xori	r2,r2,128
   10588:	10bfe004 	addi	r2,r2,-128
   1058c:	10011c26 	beq	r2,zero,10a00 <___vfprintf_internal_r+0x4f0>
   10590:	00c00044 	movi	r3,1
   10594:	a0c01426 	beq	r20,r3,105e8 <___vfprintf_internal_r+0xd8>
   10598:	1d000216 	blt	r3,r20,105a4 <___vfprintf_internal_r+0x94>
   1059c:	a0000626 	beq	r20,zero,105b8 <___vfprintf_internal_r+0xa8>
   105a0:	00011306 	br	109f0 <___vfprintf_internal_r+0x4e0>
   105a4:	01400084 	movi	r5,2
   105a8:	a1401d26 	beq	r20,r5,10620 <___vfprintf_internal_r+0x110>
   105ac:	014000c4 	movi	r5,3
   105b0:	a1402926 	beq	r20,r5,10658 <___vfprintf_internal_r+0x148>
   105b4:	00010e06 	br	109f0 <___vfprintf_internal_r+0x4e0>
   105b8:	01400944 	movi	r5,37
   105bc:	1140fb26 	beq	r2,r5,109ac <___vfprintf_internal_r+0x49c>
   105c0:	e0800117 	ldw	r2,4(fp)
   105c4:	d9000005 	stb	r4,0(sp)
   105c8:	01c00044 	movi	r7,1
   105cc:	d80d883a 	mov	r6,sp
   105d0:	e00b883a 	mov	r5,fp
   105d4:	9809883a 	mov	r4,r19
   105d8:	103ee83a 	callr	r2
   105dc:	1000d61e 	bne	r2,zero,10938 <___vfprintf_internal_r+0x428>
   105e0:	84000044 	addi	r16,r16,1
   105e4:	00010206 	br	109f0 <___vfprintf_internal_r+0x4e0>
   105e8:	01400c04 	movi	r5,48
   105ec:	1140f826 	beq	r2,r5,109d0 <___vfprintf_internal_r+0x4c0>
   105f0:	01400944 	movi	r5,37
   105f4:	11400a1e 	bne	r2,r5,10620 <___vfprintf_internal_r+0x110>
   105f8:	d8800005 	stb	r2,0(sp)
   105fc:	e0800117 	ldw	r2,4(fp)
   10600:	a00f883a 	mov	r7,r20
   10604:	d80d883a 	mov	r6,sp
   10608:	e00b883a 	mov	r5,fp
   1060c:	9809883a 	mov	r4,r19
   10610:	103ee83a 	callr	r2
   10614:	1000c81e 	bne	r2,zero,10938 <___vfprintf_internal_r+0x428>
   10618:	84000044 	addi	r16,r16,1
   1061c:	0000f306 	br	109ec <___vfprintf_internal_r+0x4dc>
   10620:	217ff404 	addi	r5,r4,-48
   10624:	29403fcc 	andi	r5,r5,255
   10628:	00c00244 	movi	r3,9
   1062c:	19400736 	bltu	r3,r5,1064c <___vfprintf_internal_r+0x13c>
   10630:	00bfffc4 	movi	r2,-1
   10634:	88800226 	beq	r17,r2,10640 <___vfprintf_internal_r+0x130>
   10638:	8c4002a4 	muli	r17,r17,10
   1063c:	00000106 	br	10644 <___vfprintf_internal_r+0x134>
   10640:	0023883a 	mov	r17,zero
   10644:	2c63883a 	add	r17,r5,r17
   10648:	0000e206 	br	109d4 <___vfprintf_internal_r+0x4c4>
   1064c:	01400b84 	movi	r5,46
   10650:	1140e426 	beq	r2,r5,109e4 <___vfprintf_internal_r+0x4d4>
   10654:	05000084 	movi	r20,2
   10658:	213ff404 	addi	r4,r4,-48
   1065c:	21003fcc 	andi	r4,r4,255
   10660:	00c00244 	movi	r3,9
   10664:	19000736 	bltu	r3,r4,10684 <___vfprintf_internal_r+0x174>
   10668:	00bfffc4 	movi	r2,-1
   1066c:	90800226 	beq	r18,r2,10678 <___vfprintf_internal_r+0x168>
   10670:	948002a4 	muli	r18,r18,10
   10674:	00000106 	br	1067c <___vfprintf_internal_r+0x16c>
   10678:	0025883a 	mov	r18,zero
   1067c:	24a5883a 	add	r18,r4,r18
   10680:	0000db06 	br	109f0 <___vfprintf_internal_r+0x4e0>
   10684:	00c01b04 	movi	r3,108
   10688:	10c0d426 	beq	r2,r3,109dc <___vfprintf_internal_r+0x4cc>
   1068c:	013fffc4 	movi	r4,-1
   10690:	91000226 	beq	r18,r4,1069c <___vfprintf_internal_r+0x18c>
   10694:	d8000b15 	stw	zero,44(sp)
   10698:	00000106 	br	106a0 <___vfprintf_internal_r+0x190>
   1069c:	04800044 	movi	r18,1
   106a0:	01001a44 	movi	r4,105
   106a4:	11001626 	beq	r2,r4,10700 <___vfprintf_internal_r+0x1f0>
   106a8:	20800916 	blt	r4,r2,106d0 <___vfprintf_internal_r+0x1c0>
   106ac:	010018c4 	movi	r4,99
   106b0:	11008a26 	beq	r2,r4,108dc <___vfprintf_internal_r+0x3cc>
   106b4:	01001904 	movi	r4,100
   106b8:	11001126 	beq	r2,r4,10700 <___vfprintf_internal_r+0x1f0>
   106bc:	01001604 	movi	r4,88
   106c0:	1100ca1e 	bne	r2,r4,109ec <___vfprintf_internal_r+0x4dc>
   106c4:	00c00044 	movi	r3,1
   106c8:	d8c00e15 	stw	r3,56(sp)
   106cc:	00001406 	br	10720 <___vfprintf_internal_r+0x210>
   106d0:	01001cc4 	movi	r4,115
   106d4:	11009a26 	beq	r2,r4,10940 <___vfprintf_internal_r+0x430>
   106d8:	20800416 	blt	r4,r2,106ec <___vfprintf_internal_r+0x1dc>
   106dc:	01001bc4 	movi	r4,111
   106e0:	1100c21e 	bne	r2,r4,109ec <___vfprintf_internal_r+0x4dc>
   106e4:	05400204 	movi	r21,8
   106e8:	00000e06 	br	10724 <___vfprintf_internal_r+0x214>
   106ec:	01001d44 	movi	r4,117
   106f0:	11000c26 	beq	r2,r4,10724 <___vfprintf_internal_r+0x214>
   106f4:	01001e04 	movi	r4,120
   106f8:	11000926 	beq	r2,r4,10720 <___vfprintf_internal_r+0x210>
   106fc:	0000bb06 	br	109ec <___vfprintf_internal_r+0x4dc>
   10700:	b5000104 	addi	r20,r22,4
   10704:	b8000726 	beq	r23,zero,10724 <___vfprintf_internal_r+0x214>
   10708:	dd000d15 	stw	r20,52(sp)
   1070c:	b5800017 	ldw	r22,0(r22)
   10710:	b000080e 	bge	r22,zero,10734 <___vfprintf_internal_r+0x224>
   10714:	05adc83a 	sub	r22,zero,r22
   10718:	02800044 	movi	r10,1
   1071c:	00000606 	br	10738 <___vfprintf_internal_r+0x228>
   10720:	05400404 	movi	r21,16
   10724:	b0c00104 	addi	r3,r22,4
   10728:	d8c00d15 	stw	r3,52(sp)
   1072c:	b5800017 	ldw	r22,0(r22)
   10730:	002f883a 	mov	r23,zero
   10734:	0015883a 	mov	r10,zero
   10738:	d829883a 	mov	r20,sp
   1073c:	b0001426 	beq	r22,zero,10790 <___vfprintf_internal_r+0x280>
   10740:	b009883a 	mov	r4,r22
   10744:	a80b883a 	mov	r5,r21
   10748:	da801015 	stw	r10,64(sp)
   1074c:	0010c580 	call	10c58 <__udivsi3>
   10750:	1549383a 	mul	r4,r2,r21
   10754:	00c00244 	movi	r3,9
   10758:	da801017 	ldw	r10,64(sp)
   1075c:	b12dc83a 	sub	r22,r22,r4
   10760:	1d800216 	blt	r3,r22,1076c <___vfprintf_internal_r+0x25c>
   10764:	b5800c04 	addi	r22,r22,48
   10768:	00000506 	br	10780 <___vfprintf_internal_r+0x270>
   1076c:	d8c00e17 	ldw	r3,56(sp)
   10770:	18000226 	beq	r3,zero,1077c <___vfprintf_internal_r+0x26c>
   10774:	b5800dc4 	addi	r22,r22,55
   10778:	00000106 	br	10780 <___vfprintf_internal_r+0x270>
   1077c:	b58015c4 	addi	r22,r22,87
   10780:	a5800005 	stb	r22,0(r20)
   10784:	a5000044 	addi	r20,r20,1
   10788:	102d883a 	mov	r22,r2
   1078c:	003feb06 	br	1073c <_gp+0xffff43f8>
   10790:	a6c7c83a 	sub	r3,r20,sp
   10794:	d8c00a15 	stw	r3,40(sp)
   10798:	90c5c83a 	sub	r2,r18,r3
   1079c:	00800a0e 	bge	zero,r2,107c8 <___vfprintf_internal_r+0x2b8>
   107a0:	a085883a 	add	r2,r20,r2
   107a4:	01400c04 	movi	r5,48
   107a8:	d8c00917 	ldw	r3,36(sp)
   107ac:	a009883a 	mov	r4,r20
   107b0:	a0c0032e 	bgeu	r20,r3,107c0 <___vfprintf_internal_r+0x2b0>
   107b4:	a5000044 	addi	r20,r20,1
   107b8:	21400005 	stb	r5,0(r4)
   107bc:	a0bffa1e 	bne	r20,r2,107a8 <_gp+0xffff4464>
   107c0:	a6c7c83a 	sub	r3,r20,sp
   107c4:	d8c00a15 	stw	r3,40(sp)
   107c8:	d8c00a17 	ldw	r3,40(sp)
   107cc:	50d3883a 	add	r9,r10,r3
   107d0:	d8c00b17 	ldw	r3,44(sp)
   107d4:	8a6dc83a 	sub	r22,r17,r9
   107d8:	18001726 	beq	r3,zero,10838 <___vfprintf_internal_r+0x328>
   107dc:	50000a26 	beq	r10,zero,10808 <___vfprintf_internal_r+0x2f8>
   107e0:	00800b44 	movi	r2,45
   107e4:	d8800805 	stb	r2,32(sp)
   107e8:	e0800117 	ldw	r2,4(fp)
   107ec:	01c00044 	movi	r7,1
   107f0:	d9800804 	addi	r6,sp,32
   107f4:	e00b883a 	mov	r5,fp
   107f8:	9809883a 	mov	r4,r19
   107fc:	103ee83a 	callr	r2
   10800:	10004d1e 	bne	r2,zero,10938 <___vfprintf_internal_r+0x428>
   10804:	84000044 	addi	r16,r16,1
   10808:	0580070e 	bge	zero,r22,10828 <___vfprintf_internal_r+0x318>
   1080c:	b00f883a 	mov	r7,r22
   10810:	01800c04 	movi	r6,48
   10814:	e00b883a 	mov	r5,fp
   10818:	9809883a 	mov	r4,r19
   1081c:	00104a40 	call	104a4 <print_repeat>
   10820:	1000451e 	bne	r2,zero,10938 <___vfprintf_internal_r+0x428>
   10824:	85a1883a 	add	r16,r16,r22
   10828:	d8c00a17 	ldw	r3,40(sp)
   1082c:	a013883a 	mov	r9,r20
   10830:	1d2dc83a 	sub	r22,r3,r20
   10834:	00002206 	br	108c0 <___vfprintf_internal_r+0x3b0>
   10838:	0580090e 	bge	zero,r22,10860 <___vfprintf_internal_r+0x350>
   1083c:	b00f883a 	mov	r7,r22
   10840:	01800804 	movi	r6,32
   10844:	e00b883a 	mov	r5,fp
   10848:	9809883a 	mov	r4,r19
   1084c:	da801015 	stw	r10,64(sp)
   10850:	00104a40 	call	104a4 <print_repeat>
   10854:	da801017 	ldw	r10,64(sp)
   10858:	1000371e 	bne	r2,zero,10938 <___vfprintf_internal_r+0x428>
   1085c:	85a1883a 	add	r16,r16,r22
   10860:	503ff126 	beq	r10,zero,10828 <_gp+0xffff44e4>
   10864:	00800b44 	movi	r2,45
   10868:	d8800805 	stb	r2,32(sp)
   1086c:	e0800117 	ldw	r2,4(fp)
   10870:	01c00044 	movi	r7,1
   10874:	d9800804 	addi	r6,sp,32
   10878:	e00b883a 	mov	r5,fp
   1087c:	9809883a 	mov	r4,r19
   10880:	103ee83a 	callr	r2
   10884:	10002c1e 	bne	r2,zero,10938 <___vfprintf_internal_r+0x428>
   10888:	84000044 	addi	r16,r16,1
   1088c:	003fe606 	br	10828 <_gp+0xffff44e4>
   10890:	4a7fffc4 	addi	r9,r9,-1
   10894:	48800003 	ldbu	r2,0(r9)
   10898:	01c00044 	movi	r7,1
   1089c:	d9800804 	addi	r6,sp,32
   108a0:	d8800805 	stb	r2,32(sp)
   108a4:	e0800117 	ldw	r2,4(fp)
   108a8:	e00b883a 	mov	r5,fp
   108ac:	da401015 	stw	r9,64(sp)
   108b0:	9809883a 	mov	r4,r19
   108b4:	103ee83a 	callr	r2
   108b8:	da401017 	ldw	r9,64(sp)
   108bc:	10001e1e 	bne	r2,zero,10938 <___vfprintf_internal_r+0x428>
   108c0:	8245c83a 	sub	r2,r16,r9
   108c4:	4d89883a 	add	r4,r9,r22
   108c8:	a085883a 	add	r2,r20,r2
   108cc:	013ff016 	blt	zero,r4,10890 <_gp+0xffff454c>
   108d0:	1021883a 	mov	r16,r2
   108d4:	dd800d17 	ldw	r22,52(sp)
   108d8:	00004406 	br	109ec <___vfprintf_internal_r+0x4dc>
   108dc:	00800044 	movi	r2,1
   108e0:	1440080e 	bge	r2,r17,10904 <___vfprintf_internal_r+0x3f4>
   108e4:	8d3fffc4 	addi	r20,r17,-1
   108e8:	a00f883a 	mov	r7,r20
   108ec:	01800804 	movi	r6,32
   108f0:	e00b883a 	mov	r5,fp
   108f4:	9809883a 	mov	r4,r19
   108f8:	00104a40 	call	104a4 <print_repeat>
   108fc:	10000e1e 	bne	r2,zero,10938 <___vfprintf_internal_r+0x428>
   10900:	8521883a 	add	r16,r16,r20
   10904:	b0800017 	ldw	r2,0(r22)
   10908:	01c00044 	movi	r7,1
   1090c:	d80d883a 	mov	r6,sp
   10910:	d8800005 	stb	r2,0(sp)
   10914:	e0800117 	ldw	r2,4(fp)
   10918:	e00b883a 	mov	r5,fp
   1091c:	9809883a 	mov	r4,r19
   10920:	b5000104 	addi	r20,r22,4
   10924:	103ee83a 	callr	r2
   10928:	1000031e 	bne	r2,zero,10938 <___vfprintf_internal_r+0x428>
   1092c:	84000044 	addi	r16,r16,1
   10930:	a02d883a 	mov	r22,r20
   10934:	00002d06 	br	109ec <___vfprintf_internal_r+0x4dc>
   10938:	00bfffc4 	movi	r2,-1
   1093c:	00003106 	br	10a04 <___vfprintf_internal_r+0x4f4>
   10940:	b5000017 	ldw	r20,0(r22)
   10944:	b0c00104 	addi	r3,r22,4
   10948:	d8c00a15 	stw	r3,40(sp)
   1094c:	a009883a 	mov	r4,r20
   10950:	00104880 	call	10488 <strlen>
   10954:	8893c83a 	sub	r9,r17,r2
   10958:	102d883a 	mov	r22,r2
   1095c:	0240090e 	bge	zero,r9,10984 <___vfprintf_internal_r+0x474>
   10960:	480f883a 	mov	r7,r9
   10964:	01800804 	movi	r6,32
   10968:	e00b883a 	mov	r5,fp
   1096c:	9809883a 	mov	r4,r19
   10970:	da401015 	stw	r9,64(sp)
   10974:	00104a40 	call	104a4 <print_repeat>
   10978:	da401017 	ldw	r9,64(sp)
   1097c:	103fee1e 	bne	r2,zero,10938 <_gp+0xffff45f4>
   10980:	8261883a 	add	r16,r16,r9
   10984:	e0800117 	ldw	r2,4(fp)
   10988:	b00f883a 	mov	r7,r22
   1098c:	a00d883a 	mov	r6,r20
   10990:	e00b883a 	mov	r5,fp
   10994:	9809883a 	mov	r4,r19
   10998:	103ee83a 	callr	r2
   1099c:	103fe61e 	bne	r2,zero,10938 <_gp+0xffff45f4>
   109a0:	85a1883a 	add	r16,r16,r22
   109a4:	dd800a17 	ldw	r22,40(sp)
   109a8:	00001006 	br	109ec <___vfprintf_internal_r+0x4dc>
   109ac:	05c00044 	movi	r23,1
   109b0:	04bfffc4 	movi	r18,-1
   109b4:	d8000e15 	stw	zero,56(sp)
   109b8:	05400284 	movi	r21,10
   109bc:	9023883a 	mov	r17,r18
   109c0:	d8000c15 	stw	zero,48(sp)
   109c4:	d8000b15 	stw	zero,44(sp)
   109c8:	b829883a 	mov	r20,r23
   109cc:	00000806 	br	109f0 <___vfprintf_internal_r+0x4e0>
   109d0:	dd000b15 	stw	r20,44(sp)
   109d4:	05000084 	movi	r20,2
   109d8:	00000506 	br	109f0 <___vfprintf_internal_r+0x4e0>
   109dc:	00c00044 	movi	r3,1
   109e0:	d8c00c15 	stw	r3,48(sp)
   109e4:	050000c4 	movi	r20,3
   109e8:	00000106 	br	109f0 <___vfprintf_internal_r+0x4e0>
   109ec:	0029883a 	mov	r20,zero
   109f0:	d8c00f17 	ldw	r3,60(sp)
   109f4:	18c00044 	addi	r3,r3,1
   109f8:	d8c00f15 	stw	r3,60(sp)
   109fc:	003ede06 	br	10578 <_gp+0xffff4234>
   10a00:	8005883a 	mov	r2,r16
   10a04:	dfc01a17 	ldw	ra,104(sp)
   10a08:	df001917 	ldw	fp,100(sp)
   10a0c:	ddc01817 	ldw	r23,96(sp)
   10a10:	dd801717 	ldw	r22,92(sp)
   10a14:	dd401617 	ldw	r21,88(sp)
   10a18:	dd001517 	ldw	r20,84(sp)
   10a1c:	dcc01417 	ldw	r19,80(sp)
   10a20:	dc801317 	ldw	r18,76(sp)
   10a24:	dc401217 	ldw	r17,72(sp)
   10a28:	dc001117 	ldw	r16,68(sp)
   10a2c:	dec01b04 	addi	sp,sp,108
   10a30:	f800283a 	ret

00010a34 <__vfprintf_internal>:
   10a34:	00800074 	movhi	r2,1
   10a38:	1090d204 	addi	r2,r2,17224
   10a3c:	300f883a 	mov	r7,r6
   10a40:	280d883a 	mov	r6,r5
   10a44:	200b883a 	mov	r5,r4
   10a48:	11000017 	ldw	r4,0(r2)
   10a4c:	00105101 	jmpi	10510 <___vfprintf_internal_r>

00010a50 <__sfvwrite_small_dev>:
   10a50:	2880000b 	ldhu	r2,0(r5)
   10a54:	1080020c 	andi	r2,r2,8
   10a58:	10002126 	beq	r2,zero,10ae0 <__sfvwrite_small_dev+0x90>
   10a5c:	2880008f 	ldh	r2,2(r5)
   10a60:	defffa04 	addi	sp,sp,-24
   10a64:	dc000015 	stw	r16,0(sp)
   10a68:	dfc00515 	stw	ra,20(sp)
   10a6c:	dd000415 	stw	r20,16(sp)
   10a70:	dcc00315 	stw	r19,12(sp)
   10a74:	dc800215 	stw	r18,8(sp)
   10a78:	dc400115 	stw	r17,4(sp)
   10a7c:	2821883a 	mov	r16,r5
   10a80:	10001216 	blt	r2,zero,10acc <__sfvwrite_small_dev+0x7c>
   10a84:	2027883a 	mov	r19,r4
   10a88:	3025883a 	mov	r18,r6
   10a8c:	3823883a 	mov	r17,r7
   10a90:	05010004 	movi	r20,1024
   10a94:	04400b0e 	bge	zero,r17,10ac4 <__sfvwrite_small_dev+0x74>
   10a98:	880f883a 	mov	r7,r17
   10a9c:	a440010e 	bge	r20,r17,10aa4 <__sfvwrite_small_dev+0x54>
   10aa0:	01c10004 	movi	r7,1024
   10aa4:	8140008f 	ldh	r5,2(r16)
   10aa8:	900d883a 	mov	r6,r18
   10aac:	9809883a 	mov	r4,r19
   10ab0:	0010b080 	call	10b08 <_write_r>
   10ab4:	0080050e 	bge	zero,r2,10acc <__sfvwrite_small_dev+0x7c>
   10ab8:	88a3c83a 	sub	r17,r17,r2
   10abc:	90a5883a 	add	r18,r18,r2
   10ac0:	003ff406 	br	10a94 <_gp+0xffff4750>
   10ac4:	0005883a 	mov	r2,zero
   10ac8:	00000706 	br	10ae8 <__sfvwrite_small_dev+0x98>
   10acc:	8080000b 	ldhu	r2,0(r16)
   10ad0:	10801014 	ori	r2,r2,64
   10ad4:	8080000d 	sth	r2,0(r16)
   10ad8:	00bfffc4 	movi	r2,-1
   10adc:	00000206 	br	10ae8 <__sfvwrite_small_dev+0x98>
   10ae0:	00bfffc4 	movi	r2,-1
   10ae4:	f800283a 	ret
   10ae8:	dfc00517 	ldw	ra,20(sp)
   10aec:	dd000417 	ldw	r20,16(sp)
   10af0:	dcc00317 	ldw	r19,12(sp)
   10af4:	dc800217 	ldw	r18,8(sp)
   10af8:	dc400117 	ldw	r17,4(sp)
   10afc:	dc000017 	ldw	r16,0(sp)
   10b00:	dec00604 	addi	sp,sp,24
   10b04:	f800283a 	ret

00010b08 <_write_r>:
   10b08:	defffd04 	addi	sp,sp,-12
   10b0c:	dc000015 	stw	r16,0(sp)
   10b10:	04000074 	movhi	r16,1
   10b14:	dc400115 	stw	r17,4(sp)
   10b18:	8415a104 	addi	r16,r16,22148
   10b1c:	2023883a 	mov	r17,r4
   10b20:	2809883a 	mov	r4,r5
   10b24:	300b883a 	mov	r5,r6
   10b28:	380d883a 	mov	r6,r7
   10b2c:	dfc00215 	stw	ra,8(sp)
   10b30:	80000015 	stw	zero,0(r16)
   10b34:	0010eb80 	call	10eb8 <write>
   10b38:	00ffffc4 	movi	r3,-1
   10b3c:	10c0031e 	bne	r2,r3,10b4c <_write_r+0x44>
   10b40:	80c00017 	ldw	r3,0(r16)
   10b44:	18000126 	beq	r3,zero,10b4c <_write_r+0x44>
   10b48:	88c00015 	stw	r3,0(r17)
   10b4c:	dfc00217 	ldw	ra,8(sp)
   10b50:	dc400117 	ldw	r17,4(sp)
   10b54:	dc000017 	ldw	r16,0(sp)
   10b58:	dec00304 	addi	sp,sp,12
   10b5c:	f800283a 	ret

00010b60 <__divsi3>:
   10b60:	20001b16 	blt	r4,zero,10bd0 <__divsi3+0x70>
   10b64:	000f883a 	mov	r7,zero
   10b68:	28001616 	blt	r5,zero,10bc4 <__divsi3+0x64>
   10b6c:	200d883a 	mov	r6,r4
   10b70:	29001a2e 	bgeu	r5,r4,10bdc <__divsi3+0x7c>
   10b74:	00800804 	movi	r2,32
   10b78:	00c00044 	movi	r3,1
   10b7c:	00000106 	br	10b84 <__divsi3+0x24>
   10b80:	10000d26 	beq	r2,zero,10bb8 <__divsi3+0x58>
   10b84:	294b883a 	add	r5,r5,r5
   10b88:	10bfffc4 	addi	r2,r2,-1
   10b8c:	18c7883a 	add	r3,r3,r3
   10b90:	293ffb36 	bltu	r5,r4,10b80 <_gp+0xffff483c>
   10b94:	0005883a 	mov	r2,zero
   10b98:	18000726 	beq	r3,zero,10bb8 <__divsi3+0x58>
   10b9c:	0005883a 	mov	r2,zero
   10ba0:	31400236 	bltu	r6,r5,10bac <__divsi3+0x4c>
   10ba4:	314dc83a 	sub	r6,r6,r5
   10ba8:	10c4b03a 	or	r2,r2,r3
   10bac:	1806d07a 	srli	r3,r3,1
   10bb0:	280ad07a 	srli	r5,r5,1
   10bb4:	183ffa1e 	bne	r3,zero,10ba0 <_gp+0xffff485c>
   10bb8:	38000126 	beq	r7,zero,10bc0 <__divsi3+0x60>
   10bbc:	0085c83a 	sub	r2,zero,r2
   10bc0:	f800283a 	ret
   10bc4:	014bc83a 	sub	r5,zero,r5
   10bc8:	39c0005c 	xori	r7,r7,1
   10bcc:	003fe706 	br	10b6c <_gp+0xffff4828>
   10bd0:	0109c83a 	sub	r4,zero,r4
   10bd4:	01c00044 	movi	r7,1
   10bd8:	003fe306 	br	10b68 <_gp+0xffff4824>
   10bdc:	00c00044 	movi	r3,1
   10be0:	003fee06 	br	10b9c <_gp+0xffff4858>

00010be4 <__modsi3>:
   10be4:	20001716 	blt	r4,zero,10c44 <__modsi3+0x60>
   10be8:	000f883a 	mov	r7,zero
   10bec:	2005883a 	mov	r2,r4
   10bf0:	28001216 	blt	r5,zero,10c3c <__modsi3+0x58>
   10bf4:	2900162e 	bgeu	r5,r4,10c50 <__modsi3+0x6c>
   10bf8:	01800804 	movi	r6,32
   10bfc:	00c00044 	movi	r3,1
   10c00:	00000106 	br	10c08 <__modsi3+0x24>
   10c04:	30000a26 	beq	r6,zero,10c30 <__modsi3+0x4c>
   10c08:	294b883a 	add	r5,r5,r5
   10c0c:	31bfffc4 	addi	r6,r6,-1
   10c10:	18c7883a 	add	r3,r3,r3
   10c14:	293ffb36 	bltu	r5,r4,10c04 <_gp+0xffff48c0>
   10c18:	18000526 	beq	r3,zero,10c30 <__modsi3+0x4c>
   10c1c:	1806d07a 	srli	r3,r3,1
   10c20:	11400136 	bltu	r2,r5,10c28 <__modsi3+0x44>
   10c24:	1145c83a 	sub	r2,r2,r5
   10c28:	280ad07a 	srli	r5,r5,1
   10c2c:	183ffb1e 	bne	r3,zero,10c1c <_gp+0xffff48d8>
   10c30:	38000126 	beq	r7,zero,10c38 <__modsi3+0x54>
   10c34:	0085c83a 	sub	r2,zero,r2
   10c38:	f800283a 	ret
   10c3c:	014bc83a 	sub	r5,zero,r5
   10c40:	003fec06 	br	10bf4 <_gp+0xffff48b0>
   10c44:	0109c83a 	sub	r4,zero,r4
   10c48:	01c00044 	movi	r7,1
   10c4c:	003fe706 	br	10bec <_gp+0xffff48a8>
   10c50:	00c00044 	movi	r3,1
   10c54:	003ff106 	br	10c1c <_gp+0xffff48d8>

00010c58 <__udivsi3>:
   10c58:	200d883a 	mov	r6,r4
   10c5c:	2900152e 	bgeu	r5,r4,10cb4 <__udivsi3+0x5c>
   10c60:	28001416 	blt	r5,zero,10cb4 <__udivsi3+0x5c>
   10c64:	00800804 	movi	r2,32
   10c68:	00c00044 	movi	r3,1
   10c6c:	00000206 	br	10c78 <__udivsi3+0x20>
   10c70:	10000e26 	beq	r2,zero,10cac <__udivsi3+0x54>
   10c74:	28000516 	blt	r5,zero,10c8c <__udivsi3+0x34>
   10c78:	294b883a 	add	r5,r5,r5
   10c7c:	10bfffc4 	addi	r2,r2,-1
   10c80:	18c7883a 	add	r3,r3,r3
   10c84:	293ffa36 	bltu	r5,r4,10c70 <_gp+0xffff492c>
   10c88:	18000826 	beq	r3,zero,10cac <__udivsi3+0x54>
   10c8c:	0005883a 	mov	r2,zero
   10c90:	31400236 	bltu	r6,r5,10c9c <__udivsi3+0x44>
   10c94:	314dc83a 	sub	r6,r6,r5
   10c98:	10c4b03a 	or	r2,r2,r3
   10c9c:	1806d07a 	srli	r3,r3,1
   10ca0:	280ad07a 	srli	r5,r5,1
   10ca4:	183ffa1e 	bne	r3,zero,10c90 <_gp+0xffff494c>
   10ca8:	f800283a 	ret
   10cac:	0005883a 	mov	r2,zero
   10cb0:	f800283a 	ret
   10cb4:	00c00044 	movi	r3,1
   10cb8:	003ff406 	br	10c8c <_gp+0xffff4948>

00010cbc <__umodsi3>:
   10cbc:	2005883a 	mov	r2,r4
   10cc0:	2900122e 	bgeu	r5,r4,10d0c <__umodsi3+0x50>
   10cc4:	28001116 	blt	r5,zero,10d0c <__umodsi3+0x50>
   10cc8:	01800804 	movi	r6,32
   10ccc:	00c00044 	movi	r3,1
   10cd0:	00000206 	br	10cdc <__umodsi3+0x20>
   10cd4:	30000c26 	beq	r6,zero,10d08 <__umodsi3+0x4c>
   10cd8:	28000516 	blt	r5,zero,10cf0 <__umodsi3+0x34>
   10cdc:	294b883a 	add	r5,r5,r5
   10ce0:	31bfffc4 	addi	r6,r6,-1
   10ce4:	18c7883a 	add	r3,r3,r3
   10ce8:	293ffa36 	bltu	r5,r4,10cd4 <_gp+0xffff4990>
   10cec:	18000626 	beq	r3,zero,10d08 <__umodsi3+0x4c>
   10cf0:	1806d07a 	srli	r3,r3,1
   10cf4:	11400136 	bltu	r2,r5,10cfc <__umodsi3+0x40>
   10cf8:	1145c83a 	sub	r2,r2,r5
   10cfc:	280ad07a 	srli	r5,r5,1
   10d00:	183ffb1e 	bne	r3,zero,10cf0 <_gp+0xffff49ac>
   10d04:	f800283a 	ret
   10d08:	f800283a 	ret
   10d0c:	00c00044 	movi	r3,1
   10d10:	003ff706 	br	10cf0 <_gp+0xffff49ac>

00010d14 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10d14:	defffc04 	addi	sp,sp,-16
   10d18:	df000315 	stw	fp,12(sp)
   10d1c:	df000304 	addi	fp,sp,12
   10d20:	e13ffd15 	stw	r4,-12(fp)
   10d24:	e17ffe15 	stw	r5,-8(fp)
   10d28:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10d2c:	e0fffe17 	ldw	r3,-8(fp)
   10d30:	e0bffd17 	ldw	r2,-12(fp)
   10d34:	18800c26 	beq	r3,r2,10d68 <alt_load_section+0x54>
  {
    while( to != end )
   10d38:	00000806 	br	10d5c <alt_load_section+0x48>
    {
      *to++ = *from++;
   10d3c:	e0bffe17 	ldw	r2,-8(fp)
   10d40:	10c00104 	addi	r3,r2,4
   10d44:	e0fffe15 	stw	r3,-8(fp)
   10d48:	e0fffd17 	ldw	r3,-12(fp)
   10d4c:	19000104 	addi	r4,r3,4
   10d50:	e13ffd15 	stw	r4,-12(fp)
   10d54:	18c00017 	ldw	r3,0(r3)
   10d58:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10d5c:	e0fffe17 	ldw	r3,-8(fp)
   10d60:	e0bfff17 	ldw	r2,-4(fp)
   10d64:	18bff51e 	bne	r3,r2,10d3c <_gp+0xffff49f8>
    {
      *to++ = *from++;
    }
  }
}
   10d68:	0001883a 	nop
   10d6c:	e037883a 	mov	sp,fp
   10d70:	df000017 	ldw	fp,0(sp)
   10d74:	dec00104 	addi	sp,sp,4
   10d78:	f800283a 	ret

00010d7c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10d7c:	defffe04 	addi	sp,sp,-8
   10d80:	dfc00115 	stw	ra,4(sp)
   10d84:	df000015 	stw	fp,0(sp)
   10d88:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10d8c:	01800074 	movhi	r6,1
   10d90:	3190dc04 	addi	r6,r6,17264
   10d94:	01400074 	movhi	r5,1
   10d98:	294c1704 	addi	r5,r5,12380
   10d9c:	01000074 	movhi	r4,1
   10da0:	2110dc04 	addi	r4,r4,17264
   10da4:	0010d140 	call	10d14 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10da8:	01800074 	movhi	r6,1
   10dac:	31809104 	addi	r6,r6,580
   10db0:	01400074 	movhi	r5,1
   10db4:	29400804 	addi	r5,r5,32
   10db8:	01000074 	movhi	r4,1
   10dbc:	21000804 	addi	r4,r4,32
   10dc0:	0010d140 	call	10d14 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10dc4:	01800074 	movhi	r6,1
   10dc8:	318c1704 	addi	r6,r6,12380
   10dcc:	01400074 	movhi	r5,1
   10dd0:	294bf904 	addi	r5,r5,12260
   10dd4:	01000074 	movhi	r4,1
   10dd8:	210bf904 	addi	r4,r4,12260
   10ddc:	0010d140 	call	10d14 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10de0:	0011e2c0 	call	11e2c <alt_dcache_flush_all>
  alt_icache_flush_all();
   10de4:	00120400 	call	12040 <alt_icache_flush_all>
}
   10de8:	0001883a 	nop
   10dec:	e037883a 	mov	sp,fp
   10df0:	dfc00117 	ldw	ra,4(sp)
   10df4:	df000017 	ldw	fp,0(sp)
   10df8:	dec00204 	addi	sp,sp,8
   10dfc:	f800283a 	ret

00010e00 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10e00:	defffd04 	addi	sp,sp,-12
   10e04:	dfc00215 	stw	ra,8(sp)
   10e08:	df000115 	stw	fp,4(sp)
   10e0c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10e10:	0009883a 	mov	r4,zero
   10e14:	0010fe40 	call	10fe4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10e18:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10e1c:	001101c0 	call	1101c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10e20:	01800074 	movhi	r6,1
   10e24:	318c0e04 	addi	r6,r6,12344
   10e28:	01400074 	movhi	r5,1
   10e2c:	294c0e04 	addi	r5,r5,12344
   10e30:	01000074 	movhi	r4,1
   10e34:	210c0e04 	addi	r4,r4,12344
   10e38:	00123d80 	call	123d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10e3c:	0011f800 	call	11f80 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10e40:	01000074 	movhi	r4,1
   10e44:	2107f804 	addi	r4,r4,8160
   10e48:	0012c3c0 	call	12c3c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10e4c:	d0a4d117 	ldw	r2,-27836(gp)
   10e50:	d0e4d217 	ldw	r3,-27832(gp)
   10e54:	d124d317 	ldw	r4,-27828(gp)
   10e58:	200d883a 	mov	r6,r4
   10e5c:	180b883a 	mov	r5,r3
   10e60:	1009883a 	mov	r4,r2
   10e64:	00102900 	call	10290 <main>
   10e68:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10e6c:	01000044 	movi	r4,1
   10e70:	0011d5c0 	call	11d5c <close>
  exit (result);
   10e74:	e13fff17 	ldw	r4,-4(fp)
   10e78:	0012c500 	call	12c50 <exit>

00010e7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10e7c:	defffe04 	addi	sp,sp,-8
   10e80:	dfc00115 	stw	ra,4(sp)
   10e84:	df000015 	stw	fp,0(sp)
   10e88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10e8c:	d0a00717 	ldw	r2,-32740(gp)
   10e90:	10000326 	beq	r2,zero,10ea0 <alt_get_errno+0x24>
   10e94:	d0a00717 	ldw	r2,-32740(gp)
   10e98:	103ee83a 	callr	r2
   10e9c:	00000106 	br	10ea4 <alt_get_errno+0x28>
   10ea0:	d0a4d004 	addi	r2,gp,-27840
}
   10ea4:	e037883a 	mov	sp,fp
   10ea8:	dfc00117 	ldw	ra,4(sp)
   10eac:	df000017 	ldw	fp,0(sp)
   10eb0:	dec00204 	addi	sp,sp,8
   10eb4:	f800283a 	ret

00010eb8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10eb8:	defff904 	addi	sp,sp,-28
   10ebc:	dfc00615 	stw	ra,24(sp)
   10ec0:	df000515 	stw	fp,20(sp)
   10ec4:	df000504 	addi	fp,sp,20
   10ec8:	e13ffd15 	stw	r4,-12(fp)
   10ecc:	e17ffe15 	stw	r5,-8(fp)
   10ed0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10ed4:	e0bffd17 	ldw	r2,-12(fp)
   10ed8:	10000616 	blt	r2,zero,10ef4 <write+0x3c>
   10edc:	e0bffd17 	ldw	r2,-12(fp)
   10ee0:	10c00324 	muli	r3,r2,12
   10ee4:	00800074 	movhi	r2,1
   10ee8:	10907104 	addi	r2,r2,16836
   10eec:	1885883a 	add	r2,r3,r2
   10ef0:	00000106 	br	10ef8 <write+0x40>
   10ef4:	0005883a 	mov	r2,zero
   10ef8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10efc:	e0bffb17 	ldw	r2,-20(fp)
   10f00:	10002126 	beq	r2,zero,10f88 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10f04:	e0bffb17 	ldw	r2,-20(fp)
   10f08:	10800217 	ldw	r2,8(r2)
   10f0c:	108000cc 	andi	r2,r2,3
   10f10:	10001826 	beq	r2,zero,10f74 <write+0xbc>
   10f14:	e0bffb17 	ldw	r2,-20(fp)
   10f18:	10800017 	ldw	r2,0(r2)
   10f1c:	10800617 	ldw	r2,24(r2)
   10f20:	10001426 	beq	r2,zero,10f74 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   10f24:	e0bffb17 	ldw	r2,-20(fp)
   10f28:	10800017 	ldw	r2,0(r2)
   10f2c:	10800617 	ldw	r2,24(r2)
   10f30:	e0ffff17 	ldw	r3,-4(fp)
   10f34:	180d883a 	mov	r6,r3
   10f38:	e17ffe17 	ldw	r5,-8(fp)
   10f3c:	e13ffb17 	ldw	r4,-20(fp)
   10f40:	103ee83a 	callr	r2
   10f44:	e0bffc15 	stw	r2,-16(fp)
   10f48:	e0bffc17 	ldw	r2,-16(fp)
   10f4c:	1000070e 	bge	r2,zero,10f6c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   10f50:	0010e7c0 	call	10e7c <alt_get_errno>
   10f54:	1007883a 	mov	r3,r2
   10f58:	e0bffc17 	ldw	r2,-16(fp)
   10f5c:	0085c83a 	sub	r2,zero,r2
   10f60:	18800015 	stw	r2,0(r3)
        return -1;
   10f64:	00bfffc4 	movi	r2,-1
   10f68:	00000c06 	br	10f9c <write+0xe4>
      }
      return rval;
   10f6c:	e0bffc17 	ldw	r2,-16(fp)
   10f70:	00000a06 	br	10f9c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10f74:	0010e7c0 	call	10e7c <alt_get_errno>
   10f78:	1007883a 	mov	r3,r2
   10f7c:	00800344 	movi	r2,13
   10f80:	18800015 	stw	r2,0(r3)
   10f84:	00000406 	br	10f98 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10f88:	0010e7c0 	call	10e7c <alt_get_errno>
   10f8c:	1007883a 	mov	r3,r2
   10f90:	00801444 	movi	r2,81
   10f94:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10f98:	00bfffc4 	movi	r2,-1
}
   10f9c:	e037883a 	mov	sp,fp
   10fa0:	dfc00117 	ldw	ra,4(sp)
   10fa4:	df000017 	ldw	fp,0(sp)
   10fa8:	dec00204 	addi	sp,sp,8
   10fac:	f800283a 	ret

00010fb0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10fb0:	defffd04 	addi	sp,sp,-12
   10fb4:	dfc00215 	stw	ra,8(sp)
   10fb8:	df000115 	stw	fp,4(sp)
   10fbc:	df000104 	addi	fp,sp,4
   10fc0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10fc4:	d1600404 	addi	r5,gp,-32752
   10fc8:	e13fff17 	ldw	r4,-4(fp)
   10fcc:	0011edc0 	call	11edc <alt_dev_llist_insert>
}
   10fd0:	e037883a 	mov	sp,fp
   10fd4:	dfc00117 	ldw	ra,4(sp)
   10fd8:	df000017 	ldw	fp,0(sp)
   10fdc:	dec00204 	addi	sp,sp,8
   10fe0:	f800283a 	ret

00010fe4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10fe4:	defffd04 	addi	sp,sp,-12
   10fe8:	dfc00215 	stw	ra,8(sp)
   10fec:	df000115 	stw	fp,4(sp)
   10ff0:	df000104 	addi	fp,sp,4
   10ff4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   10ff8:	00128b00 	call	128b0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10ffc:	00800044 	movi	r2,1
   11000:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11004:	0001883a 	nop
   11008:	e037883a 	mov	sp,fp
   1100c:	dfc00117 	ldw	ra,4(sp)
   11010:	df000017 	ldw	fp,0(sp)
   11014:	dec00204 	addi	sp,sp,8
   11018:	f800283a 	ret

0001101c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1101c:	defffe04 	addi	sp,sp,-8
   11020:	dfc00115 	stw	ra,4(sp)
   11024:	df000015 	stw	fp,0(sp)
   11028:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1102c:	d024d415 	stw	zero,-27824(gp)
   11030:	0080bef4 	movhi	r2,763
   11034:	10bc2004 	addi	r2,r2,-3968
   11038:	d0a4d515 	stw	r2,-27820(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
   1103c:	000d883a 	mov	r6,zero
   11040:	000b883a 	mov	r5,zero
   11044:	01000074 	movhi	r4,1
   11048:	210c5904 	addi	r4,r4,12644
   1104c:	00111d80 	call	111d8 <altera_avalon_jtag_uart_init>
   11050:	01000074 	movhi	r4,1
   11054:	210c4f04 	addi	r4,r4,12604
   11058:	0010fb00 	call	10fb0 <alt_dev_reg>
}
   1105c:	0001883a 	nop
   11060:	e037883a 	mov	sp,fp
   11064:	dfc00117 	ldw	ra,4(sp)
   11068:	df000017 	ldw	fp,0(sp)
   1106c:	dec00204 	addi	sp,sp,8
   11070:	f800283a 	ret

00011074 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   11074:	defffa04 	addi	sp,sp,-24
   11078:	dfc00515 	stw	ra,20(sp)
   1107c:	df000415 	stw	fp,16(sp)
   11080:	df000404 	addi	fp,sp,16
   11084:	e13ffd15 	stw	r4,-12(fp)
   11088:	e17ffe15 	stw	r5,-8(fp)
   1108c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11090:	e0bffd17 	ldw	r2,-12(fp)
   11094:	10800017 	ldw	r2,0(r2)
   11098:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1109c:	e0bffc17 	ldw	r2,-16(fp)
   110a0:	10c00a04 	addi	r3,r2,40
   110a4:	e0bffd17 	ldw	r2,-12(fp)
   110a8:	10800217 	ldw	r2,8(r2)
   110ac:	100f883a 	mov	r7,r2
   110b0:	e1bfff17 	ldw	r6,-4(fp)
   110b4:	e17ffe17 	ldw	r5,-8(fp)
   110b8:	1809883a 	mov	r4,r3
   110bc:	001169c0 	call	1169c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   110c0:	e037883a 	mov	sp,fp
   110c4:	dfc00117 	ldw	ra,4(sp)
   110c8:	df000017 	ldw	fp,0(sp)
   110cc:	dec00204 	addi	sp,sp,8
   110d0:	f800283a 	ret

000110d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   110d4:	defffa04 	addi	sp,sp,-24
   110d8:	dfc00515 	stw	ra,20(sp)
   110dc:	df000415 	stw	fp,16(sp)
   110e0:	df000404 	addi	fp,sp,16
   110e4:	e13ffd15 	stw	r4,-12(fp)
   110e8:	e17ffe15 	stw	r5,-8(fp)
   110ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   110f0:	e0bffd17 	ldw	r2,-12(fp)
   110f4:	10800017 	ldw	r2,0(r2)
   110f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   110fc:	e0bffc17 	ldw	r2,-16(fp)
   11100:	10c00a04 	addi	r3,r2,40
   11104:	e0bffd17 	ldw	r2,-12(fp)
   11108:	10800217 	ldw	r2,8(r2)
   1110c:	100f883a 	mov	r7,r2
   11110:	e1bfff17 	ldw	r6,-4(fp)
   11114:	e17ffe17 	ldw	r5,-8(fp)
   11118:	1809883a 	mov	r4,r3
   1111c:	00118b80 	call	118b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   11120:	e037883a 	mov	sp,fp
   11124:	dfc00117 	ldw	ra,4(sp)
   11128:	df000017 	ldw	fp,0(sp)
   1112c:	dec00204 	addi	sp,sp,8
   11130:	f800283a 	ret

00011134 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   11134:	defffc04 	addi	sp,sp,-16
   11138:	dfc00315 	stw	ra,12(sp)
   1113c:	df000215 	stw	fp,8(sp)
   11140:	df000204 	addi	fp,sp,8
   11144:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11148:	e0bfff17 	ldw	r2,-4(fp)
   1114c:	10800017 	ldw	r2,0(r2)
   11150:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   11154:	e0bffe17 	ldw	r2,-8(fp)
   11158:	10c00a04 	addi	r3,r2,40
   1115c:	e0bfff17 	ldw	r2,-4(fp)
   11160:	10800217 	ldw	r2,8(r2)
   11164:	100b883a 	mov	r5,r2
   11168:	1809883a 	mov	r4,r3
   1116c:	00115440 	call	11544 <altera_avalon_jtag_uart_close>
}
   11170:	e037883a 	mov	sp,fp
   11174:	dfc00117 	ldw	ra,4(sp)
   11178:	df000017 	ldw	fp,0(sp)
   1117c:	dec00204 	addi	sp,sp,8
   11180:	f800283a 	ret

00011184 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   11184:	defffa04 	addi	sp,sp,-24
   11188:	dfc00515 	stw	ra,20(sp)
   1118c:	df000415 	stw	fp,16(sp)
   11190:	df000404 	addi	fp,sp,16
   11194:	e13ffd15 	stw	r4,-12(fp)
   11198:	e17ffe15 	stw	r5,-8(fp)
   1119c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   111a0:	e0bffd17 	ldw	r2,-12(fp)
   111a4:	10800017 	ldw	r2,0(r2)
   111a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   111ac:	e0bffc17 	ldw	r2,-16(fp)
   111b0:	10800a04 	addi	r2,r2,40
   111b4:	e1bfff17 	ldw	r6,-4(fp)
   111b8:	e17ffe17 	ldw	r5,-8(fp)
   111bc:	1009883a 	mov	r4,r2
   111c0:	00115ac0 	call	115ac <altera_avalon_jtag_uart_ioctl>
}
   111c4:	e037883a 	mov	sp,fp
   111c8:	dfc00117 	ldw	ra,4(sp)
   111cc:	df000017 	ldw	fp,0(sp)
   111d0:	dec00204 	addi	sp,sp,8
   111d4:	f800283a 	ret

000111d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   111d8:	defffa04 	addi	sp,sp,-24
   111dc:	dfc00515 	stw	ra,20(sp)
   111e0:	df000415 	stw	fp,16(sp)
   111e4:	df000404 	addi	fp,sp,16
   111e8:	e13ffd15 	stw	r4,-12(fp)
   111ec:	e17ffe15 	stw	r5,-8(fp)
   111f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   111f4:	e0bffd17 	ldw	r2,-12(fp)
   111f8:	00c00044 	movi	r3,1
   111fc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   11200:	e0bffd17 	ldw	r2,-12(fp)
   11204:	10800017 	ldw	r2,0(r2)
   11208:	10800104 	addi	r2,r2,4
   1120c:	1007883a 	mov	r3,r2
   11210:	e0bffd17 	ldw	r2,-12(fp)
   11214:	10800817 	ldw	r2,32(r2)
   11218:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1121c:	e0bffe17 	ldw	r2,-8(fp)
   11220:	e0ffff17 	ldw	r3,-4(fp)
   11224:	d8000015 	stw	zero,0(sp)
   11228:	e1fffd17 	ldw	r7,-12(fp)
   1122c:	01800074 	movhi	r6,1
   11230:	3184a604 	addi	r6,r6,4760
   11234:	180b883a 	mov	r5,r3
   11238:	1009883a 	mov	r4,r2
   1123c:	00120740 	call	12074 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   11240:	e0bffd17 	ldw	r2,-12(fp)
   11244:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   11248:	e0bffd17 	ldw	r2,-12(fp)
   1124c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11250:	d0e4d717 	ldw	r3,-27812(gp)
   11254:	e1fffd17 	ldw	r7,-12(fp)
   11258:	01800074 	movhi	r6,1
   1125c:	31852904 	addi	r6,r6,5284
   11260:	180b883a 	mov	r5,r3
   11264:	1009883a 	mov	r4,r2
   11268:	0011bf40 	call	11bf4 <alt_alarm_start>
   1126c:	1000040e 	bge	r2,zero,11280 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   11270:	e0fffd17 	ldw	r3,-12(fp)
   11274:	00a00034 	movhi	r2,32768
   11278:	10bfffc4 	addi	r2,r2,-1
   1127c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   11280:	0001883a 	nop
   11284:	e037883a 	mov	sp,fp
   11288:	dfc00117 	ldw	ra,4(sp)
   1128c:	df000017 	ldw	fp,0(sp)
   11290:	dec00204 	addi	sp,sp,8
   11294:	f800283a 	ret

00011298 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   11298:	defff804 	addi	sp,sp,-32
   1129c:	df000715 	stw	fp,28(sp)
   112a0:	df000704 	addi	fp,sp,28
   112a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   112a8:	e0bfff17 	ldw	r2,-4(fp)
   112ac:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   112b0:	e0bffb17 	ldw	r2,-20(fp)
   112b4:	10800017 	ldw	r2,0(r2)
   112b8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   112bc:	e0bffc17 	ldw	r2,-16(fp)
   112c0:	10800104 	addi	r2,r2,4
   112c4:	10800037 	ldwio	r2,0(r2)
   112c8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   112cc:	e0bffd17 	ldw	r2,-12(fp)
   112d0:	1080c00c 	andi	r2,r2,768
   112d4:	10006d26 	beq	r2,zero,1148c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   112d8:	e0bffd17 	ldw	r2,-12(fp)
   112dc:	1080400c 	andi	r2,r2,256
   112e0:	10003526 	beq	r2,zero,113b8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   112e4:	00800074 	movhi	r2,1
   112e8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   112ec:	e0bffb17 	ldw	r2,-20(fp)
   112f0:	10800a17 	ldw	r2,40(r2)
   112f4:	10800044 	addi	r2,r2,1
   112f8:	1081ffcc 	andi	r2,r2,2047
   112fc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   11300:	e0bffb17 	ldw	r2,-20(fp)
   11304:	10c00b17 	ldw	r3,44(r2)
   11308:	e0bffe17 	ldw	r2,-8(fp)
   1130c:	18801526 	beq	r3,r2,11364 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11310:	e0bffc17 	ldw	r2,-16(fp)
   11314:	10800037 	ldwio	r2,0(r2)
   11318:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1131c:	e0bff917 	ldw	r2,-28(fp)
   11320:	10a0000c 	andi	r2,r2,32768
   11324:	10001126 	beq	r2,zero,1136c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   11328:	e0bffb17 	ldw	r2,-20(fp)
   1132c:	10800a17 	ldw	r2,40(r2)
   11330:	e0fff917 	ldw	r3,-28(fp)
   11334:	1809883a 	mov	r4,r3
   11338:	e0fffb17 	ldw	r3,-20(fp)
   1133c:	1885883a 	add	r2,r3,r2
   11340:	10800e04 	addi	r2,r2,56
   11344:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11348:	e0bffb17 	ldw	r2,-20(fp)
   1134c:	10800a17 	ldw	r2,40(r2)
   11350:	10800044 	addi	r2,r2,1
   11354:	10c1ffcc 	andi	r3,r2,2047
   11358:	e0bffb17 	ldw	r2,-20(fp)
   1135c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   11360:	003fe206 	br	112ec <_gp+0xffff4fa8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   11364:	0001883a 	nop
   11368:	00000106 	br	11370 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1136c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   11370:	e0bff917 	ldw	r2,-28(fp)
   11374:	10bfffec 	andhi	r2,r2,65535
   11378:	10000f26 	beq	r2,zero,113b8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1137c:	e0bffb17 	ldw	r2,-20(fp)
   11380:	10c00817 	ldw	r3,32(r2)
   11384:	00bfff84 	movi	r2,-2
   11388:	1886703a 	and	r3,r3,r2
   1138c:	e0bffb17 	ldw	r2,-20(fp)
   11390:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   11394:	e0bffc17 	ldw	r2,-16(fp)
   11398:	10800104 	addi	r2,r2,4
   1139c:	1007883a 	mov	r3,r2
   113a0:	e0bffb17 	ldw	r2,-20(fp)
   113a4:	10800817 	ldw	r2,32(r2)
   113a8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   113ac:	e0bffc17 	ldw	r2,-16(fp)
   113b0:	10800104 	addi	r2,r2,4
   113b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   113b8:	e0bffd17 	ldw	r2,-12(fp)
   113bc:	1080800c 	andi	r2,r2,512
   113c0:	103fbe26 	beq	r2,zero,112bc <_gp+0xffff4f78>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   113c4:	e0bffd17 	ldw	r2,-12(fp)
   113c8:	1004d43a 	srli	r2,r2,16
   113cc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   113d0:	00001406 	br	11424 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   113d4:	e0bffc17 	ldw	r2,-16(fp)
   113d8:	e0fffb17 	ldw	r3,-20(fp)
   113dc:	18c00d17 	ldw	r3,52(r3)
   113e0:	e13ffb17 	ldw	r4,-20(fp)
   113e4:	20c7883a 	add	r3,r4,r3
   113e8:	18c20e04 	addi	r3,r3,2104
   113ec:	18c00003 	ldbu	r3,0(r3)
   113f0:	18c03fcc 	andi	r3,r3,255
   113f4:	18c0201c 	xori	r3,r3,128
   113f8:	18ffe004 	addi	r3,r3,-128
   113fc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11400:	e0bffb17 	ldw	r2,-20(fp)
   11404:	10800d17 	ldw	r2,52(r2)
   11408:	10800044 	addi	r2,r2,1
   1140c:	10c1ffcc 	andi	r3,r2,2047
   11410:	e0bffb17 	ldw	r2,-20(fp)
   11414:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   11418:	e0bffa17 	ldw	r2,-24(fp)
   1141c:	10bfffc4 	addi	r2,r2,-1
   11420:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   11424:	e0bffa17 	ldw	r2,-24(fp)
   11428:	10000526 	beq	r2,zero,11440 <altera_avalon_jtag_uart_irq+0x1a8>
   1142c:	e0bffb17 	ldw	r2,-20(fp)
   11430:	10c00d17 	ldw	r3,52(r2)
   11434:	e0bffb17 	ldw	r2,-20(fp)
   11438:	10800c17 	ldw	r2,48(r2)
   1143c:	18bfe51e 	bne	r3,r2,113d4 <_gp+0xffff5090>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   11440:	e0bffa17 	ldw	r2,-24(fp)
   11444:	103f9d26 	beq	r2,zero,112bc <_gp+0xffff4f78>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11448:	e0bffb17 	ldw	r2,-20(fp)
   1144c:	10c00817 	ldw	r3,32(r2)
   11450:	00bfff44 	movi	r2,-3
   11454:	1886703a 	and	r3,r3,r2
   11458:	e0bffb17 	ldw	r2,-20(fp)
   1145c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11460:	e0bffb17 	ldw	r2,-20(fp)
   11464:	10800017 	ldw	r2,0(r2)
   11468:	10800104 	addi	r2,r2,4
   1146c:	1007883a 	mov	r3,r2
   11470:	e0bffb17 	ldw	r2,-20(fp)
   11474:	10800817 	ldw	r2,32(r2)
   11478:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1147c:	e0bffc17 	ldw	r2,-16(fp)
   11480:	10800104 	addi	r2,r2,4
   11484:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   11488:	003f8c06 	br	112bc <_gp+0xffff4f78>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1148c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   11490:	0001883a 	nop
   11494:	e037883a 	mov	sp,fp
   11498:	df000017 	ldw	fp,0(sp)
   1149c:	dec00104 	addi	sp,sp,4
   114a0:	f800283a 	ret

000114a4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   114a4:	defff804 	addi	sp,sp,-32
   114a8:	df000715 	stw	fp,28(sp)
   114ac:	df000704 	addi	fp,sp,28
   114b0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   114b4:	e0bffb17 	ldw	r2,-20(fp)
   114b8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   114bc:	e0bff917 	ldw	r2,-28(fp)
   114c0:	10800017 	ldw	r2,0(r2)
   114c4:	10800104 	addi	r2,r2,4
   114c8:	10800037 	ldwio	r2,0(r2)
   114cc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   114d0:	e0bffa17 	ldw	r2,-24(fp)
   114d4:	1081000c 	andi	r2,r2,1024
   114d8:	10000b26 	beq	r2,zero,11508 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   114dc:	e0bff917 	ldw	r2,-28(fp)
   114e0:	10800017 	ldw	r2,0(r2)
   114e4:	10800104 	addi	r2,r2,4
   114e8:	1007883a 	mov	r3,r2
   114ec:	e0bff917 	ldw	r2,-28(fp)
   114f0:	10800817 	ldw	r2,32(r2)
   114f4:	10810014 	ori	r2,r2,1024
   114f8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   114fc:	e0bff917 	ldw	r2,-28(fp)
   11500:	10000915 	stw	zero,36(r2)
   11504:	00000a06 	br	11530 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   11508:	e0bff917 	ldw	r2,-28(fp)
   1150c:	10c00917 	ldw	r3,36(r2)
   11510:	00a00034 	movhi	r2,32768
   11514:	10bfff04 	addi	r2,r2,-4
   11518:	10c00536 	bltu	r2,r3,11530 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1151c:	e0bff917 	ldw	r2,-28(fp)
   11520:	10800917 	ldw	r2,36(r2)
   11524:	10c00044 	addi	r3,r2,1
   11528:	e0bff917 	ldw	r2,-28(fp)
   1152c:	10c00915 	stw	r3,36(r2)
   11530:	d0a4d717 	ldw	r2,-27812(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   11534:	e037883a 	mov	sp,fp
   11538:	df000017 	ldw	fp,0(sp)
   1153c:	dec00104 	addi	sp,sp,4
   11540:	f800283a 	ret

00011544 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   11544:	defffd04 	addi	sp,sp,-12
   11548:	df000215 	stw	fp,8(sp)
   1154c:	df000204 	addi	fp,sp,8
   11550:	e13ffe15 	stw	r4,-8(fp)
   11554:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11558:	00000506 	br	11570 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1155c:	e0bfff17 	ldw	r2,-4(fp)
   11560:	1090000c 	andi	r2,r2,16384
   11564:	10000226 	beq	r2,zero,11570 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   11568:	00bffd44 	movi	r2,-11
   1156c:	00000b06 	br	1159c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11570:	e0bffe17 	ldw	r2,-8(fp)
   11574:	10c00d17 	ldw	r3,52(r2)
   11578:	e0bffe17 	ldw	r2,-8(fp)
   1157c:	10800c17 	ldw	r2,48(r2)
   11580:	18800526 	beq	r3,r2,11598 <altera_avalon_jtag_uart_close+0x54>
   11584:	e0bffe17 	ldw	r2,-8(fp)
   11588:	10c00917 	ldw	r3,36(r2)
   1158c:	e0bffe17 	ldw	r2,-8(fp)
   11590:	10800117 	ldw	r2,4(r2)
   11594:	18bff136 	bltu	r3,r2,1155c <_gp+0xffff5218>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   11598:	0005883a 	mov	r2,zero
}
   1159c:	e037883a 	mov	sp,fp
   115a0:	df000017 	ldw	fp,0(sp)
   115a4:	dec00104 	addi	sp,sp,4
   115a8:	f800283a 	ret

000115ac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   115ac:	defffa04 	addi	sp,sp,-24
   115b0:	df000515 	stw	fp,20(sp)
   115b4:	df000504 	addi	fp,sp,20
   115b8:	e13ffd15 	stw	r4,-12(fp)
   115bc:	e17ffe15 	stw	r5,-8(fp)
   115c0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   115c4:	00bff9c4 	movi	r2,-25
   115c8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   115cc:	e0bffe17 	ldw	r2,-8(fp)
   115d0:	10da8060 	cmpeqi	r3,r2,27137
   115d4:	1800031e 	bne	r3,zero,115e4 <altera_avalon_jtag_uart_ioctl+0x38>
   115d8:	109a80a0 	cmpeqi	r2,r2,27138
   115dc:	1000181e 	bne	r2,zero,11640 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   115e0:	00002906 	br	11688 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   115e4:	e0bffd17 	ldw	r2,-12(fp)
   115e8:	10c00117 	ldw	r3,4(r2)
   115ec:	00a00034 	movhi	r2,32768
   115f0:	10bfffc4 	addi	r2,r2,-1
   115f4:	18802126 	beq	r3,r2,1167c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   115f8:	e0bfff17 	ldw	r2,-4(fp)
   115fc:	10800017 	ldw	r2,0(r2)
   11600:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   11604:	e0bffc17 	ldw	r2,-16(fp)
   11608:	10800090 	cmplti	r2,r2,2
   1160c:	1000061e 	bne	r2,zero,11628 <altera_avalon_jtag_uart_ioctl+0x7c>
   11610:	e0fffc17 	ldw	r3,-16(fp)
   11614:	00a00034 	movhi	r2,32768
   11618:	10bfffc4 	addi	r2,r2,-1
   1161c:	18800226 	beq	r3,r2,11628 <altera_avalon_jtag_uart_ioctl+0x7c>
   11620:	e0bffc17 	ldw	r2,-16(fp)
   11624:	00000206 	br	11630 <altera_avalon_jtag_uart_ioctl+0x84>
   11628:	00a00034 	movhi	r2,32768
   1162c:	10bfff84 	addi	r2,r2,-2
   11630:	e0fffd17 	ldw	r3,-12(fp)
   11634:	18800115 	stw	r2,4(r3)
      rc = 0;
   11638:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1163c:	00000f06 	br	1167c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   11640:	e0bffd17 	ldw	r2,-12(fp)
   11644:	10c00117 	ldw	r3,4(r2)
   11648:	00a00034 	movhi	r2,32768
   1164c:	10bfffc4 	addi	r2,r2,-1
   11650:	18800c26 	beq	r3,r2,11684 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   11654:	e0bffd17 	ldw	r2,-12(fp)
   11658:	10c00917 	ldw	r3,36(r2)
   1165c:	e0bffd17 	ldw	r2,-12(fp)
   11660:	10800117 	ldw	r2,4(r2)
   11664:	1885803a 	cmpltu	r2,r3,r2
   11668:	10c03fcc 	andi	r3,r2,255
   1166c:	e0bfff17 	ldw	r2,-4(fp)
   11670:	10c00015 	stw	r3,0(r2)
      rc = 0;
   11674:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   11678:	00000206 	br	11684 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1167c:	0001883a 	nop
   11680:	00000106 	br	11688 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   11684:	0001883a 	nop

  default:
    break;
  }

  return rc;
   11688:	e0bffb17 	ldw	r2,-20(fp)
}
   1168c:	e037883a 	mov	sp,fp
   11690:	df000017 	ldw	fp,0(sp)
   11694:	dec00104 	addi	sp,sp,4
   11698:	f800283a 	ret

0001169c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1169c:	defff304 	addi	sp,sp,-52
   116a0:	dfc00c15 	stw	ra,48(sp)
   116a4:	df000b15 	stw	fp,44(sp)
   116a8:	df000b04 	addi	fp,sp,44
   116ac:	e13ffc15 	stw	r4,-16(fp)
   116b0:	e17ffd15 	stw	r5,-12(fp)
   116b4:	e1bffe15 	stw	r6,-8(fp)
   116b8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   116bc:	e0bffd17 	ldw	r2,-12(fp)
   116c0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   116c4:	00004706 	br	117e4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   116c8:	e0bffc17 	ldw	r2,-16(fp)
   116cc:	10800a17 	ldw	r2,40(r2)
   116d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   116d4:	e0bffc17 	ldw	r2,-16(fp)
   116d8:	10800b17 	ldw	r2,44(r2)
   116dc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   116e0:	e0fff717 	ldw	r3,-36(fp)
   116e4:	e0bff817 	ldw	r2,-32(fp)
   116e8:	18800536 	bltu	r3,r2,11700 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   116ec:	e0fff717 	ldw	r3,-36(fp)
   116f0:	e0bff817 	ldw	r2,-32(fp)
   116f4:	1885c83a 	sub	r2,r3,r2
   116f8:	e0bff615 	stw	r2,-40(fp)
   116fc:	00000406 	br	11710 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   11700:	00c20004 	movi	r3,2048
   11704:	e0bff817 	ldw	r2,-32(fp)
   11708:	1885c83a 	sub	r2,r3,r2
   1170c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11710:	e0bff617 	ldw	r2,-40(fp)
   11714:	10001e26 	beq	r2,zero,11790 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   11718:	e0fffe17 	ldw	r3,-8(fp)
   1171c:	e0bff617 	ldw	r2,-40(fp)
   11720:	1880022e 	bgeu	r3,r2,1172c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   11724:	e0bffe17 	ldw	r2,-8(fp)
   11728:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1172c:	e0bffc17 	ldw	r2,-16(fp)
   11730:	10c00e04 	addi	r3,r2,56
   11734:	e0bff817 	ldw	r2,-32(fp)
   11738:	1885883a 	add	r2,r3,r2
   1173c:	e1bff617 	ldw	r6,-40(fp)
   11740:	100b883a 	mov	r5,r2
   11744:	e13ff517 	ldw	r4,-44(fp)
   11748:	0012ca00 	call	12ca0 <memcpy>
      ptr   += n;
   1174c:	e0fff517 	ldw	r3,-44(fp)
   11750:	e0bff617 	ldw	r2,-40(fp)
   11754:	1885883a 	add	r2,r3,r2
   11758:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1175c:	e0fffe17 	ldw	r3,-8(fp)
   11760:	e0bff617 	ldw	r2,-40(fp)
   11764:	1885c83a 	sub	r2,r3,r2
   11768:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1176c:	e0fff817 	ldw	r3,-32(fp)
   11770:	e0bff617 	ldw	r2,-40(fp)
   11774:	1885883a 	add	r2,r3,r2
   11778:	10c1ffcc 	andi	r3,r2,2047
   1177c:	e0bffc17 	ldw	r2,-16(fp)
   11780:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   11784:	e0bffe17 	ldw	r2,-8(fp)
   11788:	00bfcf16 	blt	zero,r2,116c8 <_gp+0xffff5384>
   1178c:	00000106 	br	11794 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   11790:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   11794:	e0fff517 	ldw	r3,-44(fp)
   11798:	e0bffd17 	ldw	r2,-12(fp)
   1179c:	1880141e 	bne	r3,r2,117f0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   117a0:	e0bfff17 	ldw	r2,-4(fp)
   117a4:	1090000c 	andi	r2,r2,16384
   117a8:	1000131e 	bne	r2,zero,117f8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   117ac:	0001883a 	nop
   117b0:	e0bffc17 	ldw	r2,-16(fp)
   117b4:	10c00a17 	ldw	r3,40(r2)
   117b8:	e0bff717 	ldw	r2,-36(fp)
   117bc:	1880051e 	bne	r3,r2,117d4 <altera_avalon_jtag_uart_read+0x138>
   117c0:	e0bffc17 	ldw	r2,-16(fp)
   117c4:	10c00917 	ldw	r3,36(r2)
   117c8:	e0bffc17 	ldw	r2,-16(fp)
   117cc:	10800117 	ldw	r2,4(r2)
   117d0:	18bff736 	bltu	r3,r2,117b0 <_gp+0xffff546c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   117d4:	e0bffc17 	ldw	r2,-16(fp)
   117d8:	10c00a17 	ldw	r3,40(r2)
   117dc:	e0bff717 	ldw	r2,-36(fp)
   117e0:	18800726 	beq	r3,r2,11800 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   117e4:	e0bffe17 	ldw	r2,-8(fp)
   117e8:	00bfb716 	blt	zero,r2,116c8 <_gp+0xffff5384>
   117ec:	00000506 	br	11804 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   117f0:	0001883a 	nop
   117f4:	00000306 	br	11804 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   117f8:	0001883a 	nop
   117fc:	00000106 	br	11804 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   11800:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   11804:	e0fff517 	ldw	r3,-44(fp)
   11808:	e0bffd17 	ldw	r2,-12(fp)
   1180c:	18801826 	beq	r3,r2,11870 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11810:	0005303a 	rdctl	r2,status
   11814:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11818:	e0fffb17 	ldw	r3,-20(fp)
   1181c:	00bfff84 	movi	r2,-2
   11820:	1884703a 	and	r2,r3,r2
   11824:	1001703a 	wrctl	status,r2
  
  return context;
   11828:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1182c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11830:	e0bffc17 	ldw	r2,-16(fp)
   11834:	10800817 	ldw	r2,32(r2)
   11838:	10c00054 	ori	r3,r2,1
   1183c:	e0bffc17 	ldw	r2,-16(fp)
   11840:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11844:	e0bffc17 	ldw	r2,-16(fp)
   11848:	10800017 	ldw	r2,0(r2)
   1184c:	10800104 	addi	r2,r2,4
   11850:	1007883a 	mov	r3,r2
   11854:	e0bffc17 	ldw	r2,-16(fp)
   11858:	10800817 	ldw	r2,32(r2)
   1185c:	18800035 	stwio	r2,0(r3)
   11860:	e0bffa17 	ldw	r2,-24(fp)
   11864:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11868:	e0bff917 	ldw	r2,-28(fp)
   1186c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   11870:	e0fff517 	ldw	r3,-44(fp)
   11874:	e0bffd17 	ldw	r2,-12(fp)
   11878:	18800426 	beq	r3,r2,1188c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   1187c:	e0fff517 	ldw	r3,-44(fp)
   11880:	e0bffd17 	ldw	r2,-12(fp)
   11884:	1885c83a 	sub	r2,r3,r2
   11888:	00000606 	br	118a4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   1188c:	e0bfff17 	ldw	r2,-4(fp)
   11890:	1090000c 	andi	r2,r2,16384
   11894:	10000226 	beq	r2,zero,118a0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   11898:	00bffd44 	movi	r2,-11
   1189c:	00000106 	br	118a4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   118a0:	00bffec4 	movi	r2,-5
}
   118a4:	e037883a 	mov	sp,fp
   118a8:	dfc00117 	ldw	ra,4(sp)
   118ac:	df000017 	ldw	fp,0(sp)
   118b0:	dec00204 	addi	sp,sp,8
   118b4:	f800283a 	ret

000118b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   118b8:	defff304 	addi	sp,sp,-52
   118bc:	dfc00c15 	stw	ra,48(sp)
   118c0:	df000b15 	stw	fp,44(sp)
   118c4:	df000b04 	addi	fp,sp,44
   118c8:	e13ffc15 	stw	r4,-16(fp)
   118cc:	e17ffd15 	stw	r5,-12(fp)
   118d0:	e1bffe15 	stw	r6,-8(fp)
   118d4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   118d8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   118dc:	e0bffd17 	ldw	r2,-12(fp)
   118e0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   118e4:	00003706 	br	119c4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   118e8:	e0bffc17 	ldw	r2,-16(fp)
   118ec:	10800c17 	ldw	r2,48(r2)
   118f0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   118f4:	e0bffc17 	ldw	r2,-16(fp)
   118f8:	10800d17 	ldw	r2,52(r2)
   118fc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   11900:	e0fff917 	ldw	r3,-28(fp)
   11904:	e0bff517 	ldw	r2,-44(fp)
   11908:	1880062e 	bgeu	r3,r2,11924 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1190c:	e0fff517 	ldw	r3,-44(fp)
   11910:	e0bff917 	ldw	r2,-28(fp)
   11914:	1885c83a 	sub	r2,r3,r2
   11918:	10bfffc4 	addi	r2,r2,-1
   1191c:	e0bff615 	stw	r2,-40(fp)
   11920:	00000b06 	br	11950 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   11924:	e0bff517 	ldw	r2,-44(fp)
   11928:	10000526 	beq	r2,zero,11940 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1192c:	00c20004 	movi	r3,2048
   11930:	e0bff917 	ldw	r2,-28(fp)
   11934:	1885c83a 	sub	r2,r3,r2
   11938:	e0bff615 	stw	r2,-40(fp)
   1193c:	00000406 	br	11950 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   11940:	00c1ffc4 	movi	r3,2047
   11944:	e0bff917 	ldw	r2,-28(fp)
   11948:	1885c83a 	sub	r2,r3,r2
   1194c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11950:	e0bff617 	ldw	r2,-40(fp)
   11954:	10001e26 	beq	r2,zero,119d0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   11958:	e0fffe17 	ldw	r3,-8(fp)
   1195c:	e0bff617 	ldw	r2,-40(fp)
   11960:	1880022e 	bgeu	r3,r2,1196c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   11964:	e0bffe17 	ldw	r2,-8(fp)
   11968:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1196c:	e0bffc17 	ldw	r2,-16(fp)
   11970:	10c20e04 	addi	r3,r2,2104
   11974:	e0bff917 	ldw	r2,-28(fp)
   11978:	1885883a 	add	r2,r3,r2
   1197c:	e1bff617 	ldw	r6,-40(fp)
   11980:	e17ffd17 	ldw	r5,-12(fp)
   11984:	1009883a 	mov	r4,r2
   11988:	0012ca00 	call	12ca0 <memcpy>
      ptr   += n;
   1198c:	e0fffd17 	ldw	r3,-12(fp)
   11990:	e0bff617 	ldw	r2,-40(fp)
   11994:	1885883a 	add	r2,r3,r2
   11998:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1199c:	e0fffe17 	ldw	r3,-8(fp)
   119a0:	e0bff617 	ldw	r2,-40(fp)
   119a4:	1885c83a 	sub	r2,r3,r2
   119a8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   119ac:	e0fff917 	ldw	r3,-28(fp)
   119b0:	e0bff617 	ldw	r2,-40(fp)
   119b4:	1885883a 	add	r2,r3,r2
   119b8:	10c1ffcc 	andi	r3,r2,2047
   119bc:	e0bffc17 	ldw	r2,-16(fp)
   119c0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   119c4:	e0bffe17 	ldw	r2,-8(fp)
   119c8:	00bfc716 	blt	zero,r2,118e8 <_gp+0xffff55a4>
   119cc:	00000106 	br	119d4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   119d0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   119d4:	0005303a 	rdctl	r2,status
   119d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119dc:	e0fffb17 	ldw	r3,-20(fp)
   119e0:	00bfff84 	movi	r2,-2
   119e4:	1884703a 	and	r2,r3,r2
   119e8:	1001703a 	wrctl	status,r2
  
  return context;
   119ec:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   119f0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   119f4:	e0bffc17 	ldw	r2,-16(fp)
   119f8:	10800817 	ldw	r2,32(r2)
   119fc:	10c00094 	ori	r3,r2,2
   11a00:	e0bffc17 	ldw	r2,-16(fp)
   11a04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11a08:	e0bffc17 	ldw	r2,-16(fp)
   11a0c:	10800017 	ldw	r2,0(r2)
   11a10:	10800104 	addi	r2,r2,4
   11a14:	1007883a 	mov	r3,r2
   11a18:	e0bffc17 	ldw	r2,-16(fp)
   11a1c:	10800817 	ldw	r2,32(r2)
   11a20:	18800035 	stwio	r2,0(r3)
   11a24:	e0bffa17 	ldw	r2,-24(fp)
   11a28:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a2c:	e0bff817 	ldw	r2,-32(fp)
   11a30:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   11a34:	e0bffe17 	ldw	r2,-8(fp)
   11a38:	0080100e 	bge	zero,r2,11a7c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   11a3c:	e0bfff17 	ldw	r2,-4(fp)
   11a40:	1090000c 	andi	r2,r2,16384
   11a44:	1000101e 	bne	r2,zero,11a88 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   11a48:	0001883a 	nop
   11a4c:	e0bffc17 	ldw	r2,-16(fp)
   11a50:	10c00d17 	ldw	r3,52(r2)
   11a54:	e0bff517 	ldw	r2,-44(fp)
   11a58:	1880051e 	bne	r3,r2,11a70 <altera_avalon_jtag_uart_write+0x1b8>
   11a5c:	e0bffc17 	ldw	r2,-16(fp)
   11a60:	10c00917 	ldw	r3,36(r2)
   11a64:	e0bffc17 	ldw	r2,-16(fp)
   11a68:	10800117 	ldw	r2,4(r2)
   11a6c:	18bff736 	bltu	r3,r2,11a4c <_gp+0xffff5708>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   11a70:	e0bffc17 	ldw	r2,-16(fp)
   11a74:	10800917 	ldw	r2,36(r2)
   11a78:	1000051e 	bne	r2,zero,11a90 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   11a7c:	e0bffe17 	ldw	r2,-8(fp)
   11a80:	00bfd016 	blt	zero,r2,119c4 <_gp+0xffff5680>
   11a84:	00000306 	br	11a94 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   11a88:	0001883a 	nop
   11a8c:	00000106 	br	11a94 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   11a90:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   11a94:	e0fffd17 	ldw	r3,-12(fp)
   11a98:	e0bff717 	ldw	r2,-36(fp)
   11a9c:	18800426 	beq	r3,r2,11ab0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   11aa0:	e0fffd17 	ldw	r3,-12(fp)
   11aa4:	e0bff717 	ldw	r2,-36(fp)
   11aa8:	1885c83a 	sub	r2,r3,r2
   11aac:	00000606 	br	11ac8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   11ab0:	e0bfff17 	ldw	r2,-4(fp)
   11ab4:	1090000c 	andi	r2,r2,16384
   11ab8:	10000226 	beq	r2,zero,11ac4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   11abc:	00bffd44 	movi	r2,-11
   11ac0:	00000106 	br	11ac8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   11ac4:	00bffec4 	movi	r2,-5
}
   11ac8:	e037883a 	mov	sp,fp
   11acc:	dfc00117 	ldw	ra,4(sp)
   11ad0:	df000017 	ldw	fp,0(sp)
   11ad4:	dec00204 	addi	sp,sp,8
   11ad8:	f800283a 	ret

00011adc <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   11adc:	defffe04 	addi	sp,sp,-8
   11ae0:	df000115 	stw	fp,4(sp)
   11ae4:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   11ae8:	d0a4d417 	ldw	r2,-27824(gp)
   11aec:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   11af0:	d0a4d517 	ldw	r2,-27820(gp)
   11af4:	1000021e 	bne	r2,zero,11b00 <alt_timestamp_start+0x24>
  {
    return -1;
   11af8:	00bfffc4 	movi	r2,-1
   11afc:	00001106 	br	11b44 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   11b00:	e0bfff17 	ldw	r2,-4(fp)
   11b04:	10800104 	addi	r2,r2,4
   11b08:	00c00204 	movi	r3,8
   11b0c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   11b10:	e0bfff17 	ldw	r2,-4(fp)
   11b14:	10800204 	addi	r2,r2,8
   11b18:	00ffffd4 	movui	r3,65535
   11b1c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   11b20:	e0bfff17 	ldw	r2,-4(fp)
   11b24:	10800304 	addi	r2,r2,12
   11b28:	00ffffd4 	movui	r3,65535
   11b2c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   11b30:	e0bfff17 	ldw	r2,-4(fp)
   11b34:	10800104 	addi	r2,r2,4
   11b38:	00c00104 	movi	r3,4
   11b3c:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   11b40:	0005883a 	mov	r2,zero
}
   11b44:	e037883a 	mov	sp,fp
   11b48:	df000017 	ldw	fp,0(sp)
   11b4c:	dec00104 	addi	sp,sp,4
   11b50:	f800283a 	ret

00011b54 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   11b54:	defffc04 	addi	sp,sp,-16
   11b58:	df000315 	stw	fp,12(sp)
   11b5c:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   11b60:	d0a4d417 	ldw	r2,-27824(gp)
   11b64:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   11b68:	d0a4d517 	ldw	r2,-27820(gp)
   11b6c:	1000021e 	bne	r2,zero,11b78 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   11b70:	00bfffc4 	movi	r2,-1
   11b74:	00001306 	br	11bc4 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   11b78:	e0bffd17 	ldw	r2,-12(fp)
   11b7c:	10800404 	addi	r2,r2,16
   11b80:	0007883a 	mov	r3,zero
   11b84:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   11b88:	e0bffd17 	ldw	r2,-12(fp)
   11b8c:	10800404 	addi	r2,r2,16
   11b90:	10800037 	ldwio	r2,0(r2)
   11b94:	10bfffcc 	andi	r2,r2,65535
   11b98:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   11b9c:	e0bffd17 	ldw	r2,-12(fp)
   11ba0:	10800504 	addi	r2,r2,20
   11ba4:	10800037 	ldwio	r2,0(r2)
   11ba8:	10bfffcc 	andi	r2,r2,65535
   11bac:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   11bb0:	e0bfff17 	ldw	r2,-4(fp)
   11bb4:	1006943a 	slli	r3,r2,16
   11bb8:	e0bffe17 	ldw	r2,-8(fp)
   11bbc:	1884b03a 	or	r2,r3,r2
   11bc0:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   11bc4:	e037883a 	mov	sp,fp
   11bc8:	df000017 	ldw	fp,0(sp)
   11bcc:	dec00104 	addi	sp,sp,4
   11bd0:	f800283a 	ret

00011bd4 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   11bd4:	deffff04 	addi	sp,sp,-4
   11bd8:	df000015 	stw	fp,0(sp)
   11bdc:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   11be0:	d0a4d517 	ldw	r2,-27820(gp)
}
   11be4:	e037883a 	mov	sp,fp
   11be8:	df000017 	ldw	fp,0(sp)
   11bec:	dec00104 	addi	sp,sp,4
   11bf0:	f800283a 	ret

00011bf4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11bf4:	defff504 	addi	sp,sp,-44
   11bf8:	df000a15 	stw	fp,40(sp)
   11bfc:	df000a04 	addi	fp,sp,40
   11c00:	e13ffc15 	stw	r4,-16(fp)
   11c04:	e17ffd15 	stw	r5,-12(fp)
   11c08:	e1bffe15 	stw	r6,-8(fp)
   11c0c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11c10:	e03ff615 	stw	zero,-40(fp)
   11c14:	d0a4d717 	ldw	r2,-27812(gp)
  
  if (alt_ticks_per_second ())
   11c18:	10003c26 	beq	r2,zero,11d0c <alt_alarm_start+0x118>
  {
    if (alarm)
   11c1c:	e0bffc17 	ldw	r2,-16(fp)
   11c20:	10003826 	beq	r2,zero,11d04 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   11c24:	e0bffc17 	ldw	r2,-16(fp)
   11c28:	e0fffe17 	ldw	r3,-8(fp)
   11c2c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   11c30:	e0bffc17 	ldw	r2,-16(fp)
   11c34:	e0ffff17 	ldw	r3,-4(fp)
   11c38:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c3c:	0005303a 	rdctl	r2,status
   11c40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c44:	e0fff917 	ldw	r3,-28(fp)
   11c48:	00bfff84 	movi	r2,-2
   11c4c:	1884703a 	and	r2,r3,r2
   11c50:	1001703a 	wrctl	status,r2
  
  return context;
   11c54:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   11c58:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11c5c:	d0a4d817 	ldw	r2,-27808(gp)
      
      current_nticks = alt_nticks();
   11c60:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11c64:	e0fffd17 	ldw	r3,-12(fp)
   11c68:	e0bff617 	ldw	r2,-40(fp)
   11c6c:	1885883a 	add	r2,r3,r2
   11c70:	10c00044 	addi	r3,r2,1
   11c74:	e0bffc17 	ldw	r2,-16(fp)
   11c78:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   11c7c:	e0bffc17 	ldw	r2,-16(fp)
   11c80:	10c00217 	ldw	r3,8(r2)
   11c84:	e0bff617 	ldw	r2,-40(fp)
   11c88:	1880042e 	bgeu	r3,r2,11c9c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   11c8c:	e0bffc17 	ldw	r2,-16(fp)
   11c90:	00c00044 	movi	r3,1
   11c94:	10c00405 	stb	r3,16(r2)
   11c98:	00000206 	br	11ca4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   11c9c:	e0bffc17 	ldw	r2,-16(fp)
   11ca0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11ca4:	e0bffc17 	ldw	r2,-16(fp)
   11ca8:	d0e00904 	addi	r3,gp,-32732
   11cac:	e0fffa15 	stw	r3,-24(fp)
   11cb0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11cb4:	e0bffb17 	ldw	r2,-20(fp)
   11cb8:	e0fffa17 	ldw	r3,-24(fp)
   11cbc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11cc0:	e0bffa17 	ldw	r2,-24(fp)
   11cc4:	10c00017 	ldw	r3,0(r2)
   11cc8:	e0bffb17 	ldw	r2,-20(fp)
   11ccc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11cd0:	e0bffa17 	ldw	r2,-24(fp)
   11cd4:	10800017 	ldw	r2,0(r2)
   11cd8:	e0fffb17 	ldw	r3,-20(fp)
   11cdc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11ce0:	e0bffa17 	ldw	r2,-24(fp)
   11ce4:	e0fffb17 	ldw	r3,-20(fp)
   11ce8:	10c00015 	stw	r3,0(r2)
   11cec:	e0bff817 	ldw	r2,-32(fp)
   11cf0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11cf4:	e0bff717 	ldw	r2,-36(fp)
   11cf8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11cfc:	0005883a 	mov	r2,zero
   11d00:	00000306 	br	11d10 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   11d04:	00bffa84 	movi	r2,-22
   11d08:	00000106 	br	11d10 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   11d0c:	00bfde84 	movi	r2,-134
  }
}
   11d10:	e037883a 	mov	sp,fp
   11d14:	df000017 	ldw	fp,0(sp)
   11d18:	dec00104 	addi	sp,sp,4
   11d1c:	f800283a 	ret

00011d20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11d20:	defffe04 	addi	sp,sp,-8
   11d24:	dfc00115 	stw	ra,4(sp)
   11d28:	df000015 	stw	fp,0(sp)
   11d2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11d30:	d0a00717 	ldw	r2,-32740(gp)
   11d34:	10000326 	beq	r2,zero,11d44 <alt_get_errno+0x24>
   11d38:	d0a00717 	ldw	r2,-32740(gp)
   11d3c:	103ee83a 	callr	r2
   11d40:	00000106 	br	11d48 <alt_get_errno+0x28>
   11d44:	d0a4d004 	addi	r2,gp,-27840
}
   11d48:	e037883a 	mov	sp,fp
   11d4c:	dfc00117 	ldw	ra,4(sp)
   11d50:	df000017 	ldw	fp,0(sp)
   11d54:	dec00204 	addi	sp,sp,8
   11d58:	f800283a 	ret

00011d5c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11d5c:	defffb04 	addi	sp,sp,-20
   11d60:	dfc00415 	stw	ra,16(sp)
   11d64:	df000315 	stw	fp,12(sp)
   11d68:	df000304 	addi	fp,sp,12
   11d6c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11d70:	e0bfff17 	ldw	r2,-4(fp)
   11d74:	10000616 	blt	r2,zero,11d90 <close+0x34>
   11d78:	e0bfff17 	ldw	r2,-4(fp)
   11d7c:	10c00324 	muli	r3,r2,12
   11d80:	00800074 	movhi	r2,1
   11d84:	10907104 	addi	r2,r2,16836
   11d88:	1885883a 	add	r2,r3,r2
   11d8c:	00000106 	br	11d94 <close+0x38>
   11d90:	0005883a 	mov	r2,zero
   11d94:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   11d98:	e0bffd17 	ldw	r2,-12(fp)
   11d9c:	10001926 	beq	r2,zero,11e04 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11da0:	e0bffd17 	ldw	r2,-12(fp)
   11da4:	10800017 	ldw	r2,0(r2)
   11da8:	10800417 	ldw	r2,16(r2)
   11dac:	10000626 	beq	r2,zero,11dc8 <close+0x6c>
   11db0:	e0bffd17 	ldw	r2,-12(fp)
   11db4:	10800017 	ldw	r2,0(r2)
   11db8:	10800417 	ldw	r2,16(r2)
   11dbc:	e13ffd17 	ldw	r4,-12(fp)
   11dc0:	103ee83a 	callr	r2
   11dc4:	00000106 	br	11dcc <close+0x70>
   11dc8:	0005883a 	mov	r2,zero
   11dcc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11dd0:	e13fff17 	ldw	r4,-4(fp)
   11dd4:	00126a80 	call	126a8 <alt_release_fd>
    if (rval < 0)
   11dd8:	e0bffe17 	ldw	r2,-8(fp)
   11ddc:	1000070e 	bge	r2,zero,11dfc <close+0xa0>
    {
      ALT_ERRNO = -rval;
   11de0:	0011d200 	call	11d20 <alt_get_errno>
   11de4:	1007883a 	mov	r3,r2
   11de8:	e0bffe17 	ldw	r2,-8(fp)
   11dec:	0085c83a 	sub	r2,zero,r2
   11df0:	18800015 	stw	r2,0(r3)
      return -1;
   11df4:	00bfffc4 	movi	r2,-1
   11df8:	00000706 	br	11e18 <close+0xbc>
    }
    return 0;
   11dfc:	0005883a 	mov	r2,zero
   11e00:	00000506 	br	11e18 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11e04:	0011d200 	call	11d20 <alt_get_errno>
   11e08:	1007883a 	mov	r3,r2
   11e0c:	00801444 	movi	r2,81
   11e10:	18800015 	stw	r2,0(r3)
    return -1;
   11e14:	00bfffc4 	movi	r2,-1
  }
}
   11e18:	e037883a 	mov	sp,fp
   11e1c:	dfc00117 	ldw	ra,4(sp)
   11e20:	df000017 	ldw	fp,0(sp)
   11e24:	dec00204 	addi	sp,sp,8
   11e28:	f800283a 	ret

00011e2c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11e2c:	defffe04 	addi	sp,sp,-8
   11e30:	df000115 	stw	fp,4(sp)
   11e34:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   11e38:	e03fff15 	stw	zero,-4(fp)
   11e3c:	00000506 	br	11e54 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   11e40:	e0bfff17 	ldw	r2,-4(fp)
   11e44:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   11e48:	e0bfff17 	ldw	r2,-4(fp)
   11e4c:	10800804 	addi	r2,r2,32
   11e50:	e0bfff15 	stw	r2,-4(fp)
   11e54:	e0bfff17 	ldw	r2,-4(fp)
   11e58:	10820030 	cmpltui	r2,r2,2048
   11e5c:	103ff81e 	bne	r2,zero,11e40 <_gp+0xffff5afc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11e60:	0001883a 	nop
   11e64:	e037883a 	mov	sp,fp
   11e68:	df000017 	ldw	fp,0(sp)
   11e6c:	dec00104 	addi	sp,sp,4
   11e70:	f800283a 	ret

00011e74 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11e74:	defffc04 	addi	sp,sp,-16
   11e78:	df000315 	stw	fp,12(sp)
   11e7c:	df000304 	addi	fp,sp,12
   11e80:	e13ffd15 	stw	r4,-12(fp)
   11e84:	e17ffe15 	stw	r5,-8(fp)
   11e88:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11e8c:	e0bfff17 	ldw	r2,-4(fp)
}
   11e90:	e037883a 	mov	sp,fp
   11e94:	df000017 	ldw	fp,0(sp)
   11e98:	dec00104 	addi	sp,sp,4
   11e9c:	f800283a 	ret

00011ea0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11ea0:	defffe04 	addi	sp,sp,-8
   11ea4:	dfc00115 	stw	ra,4(sp)
   11ea8:	df000015 	stw	fp,0(sp)
   11eac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11eb0:	d0a00717 	ldw	r2,-32740(gp)
   11eb4:	10000326 	beq	r2,zero,11ec4 <alt_get_errno+0x24>
   11eb8:	d0a00717 	ldw	r2,-32740(gp)
   11ebc:	103ee83a 	callr	r2
   11ec0:	00000106 	br	11ec8 <alt_get_errno+0x28>
   11ec4:	d0a4d004 	addi	r2,gp,-27840
}
   11ec8:	e037883a 	mov	sp,fp
   11ecc:	dfc00117 	ldw	ra,4(sp)
   11ed0:	df000017 	ldw	fp,0(sp)
   11ed4:	dec00204 	addi	sp,sp,8
   11ed8:	f800283a 	ret

00011edc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11edc:	defffa04 	addi	sp,sp,-24
   11ee0:	dfc00515 	stw	ra,20(sp)
   11ee4:	df000415 	stw	fp,16(sp)
   11ee8:	df000404 	addi	fp,sp,16
   11eec:	e13ffe15 	stw	r4,-8(fp)
   11ef0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11ef4:	e0bffe17 	ldw	r2,-8(fp)
   11ef8:	10000326 	beq	r2,zero,11f08 <alt_dev_llist_insert+0x2c>
   11efc:	e0bffe17 	ldw	r2,-8(fp)
   11f00:	10800217 	ldw	r2,8(r2)
   11f04:	1000061e 	bne	r2,zero,11f20 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11f08:	0011ea00 	call	11ea0 <alt_get_errno>
   11f0c:	1007883a 	mov	r3,r2
   11f10:	00800584 	movi	r2,22
   11f14:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11f18:	00bffa84 	movi	r2,-22
   11f1c:	00001306 	br	11f6c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11f20:	e0bffe17 	ldw	r2,-8(fp)
   11f24:	e0ffff17 	ldw	r3,-4(fp)
   11f28:	e0fffc15 	stw	r3,-16(fp)
   11f2c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11f30:	e0bffd17 	ldw	r2,-12(fp)
   11f34:	e0fffc17 	ldw	r3,-16(fp)
   11f38:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11f3c:	e0bffc17 	ldw	r2,-16(fp)
   11f40:	10c00017 	ldw	r3,0(r2)
   11f44:	e0bffd17 	ldw	r2,-12(fp)
   11f48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11f4c:	e0bffc17 	ldw	r2,-16(fp)
   11f50:	10800017 	ldw	r2,0(r2)
   11f54:	e0fffd17 	ldw	r3,-12(fp)
   11f58:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11f5c:	e0bffc17 	ldw	r2,-16(fp)
   11f60:	e0fffd17 	ldw	r3,-12(fp)
   11f64:	10c00015 	stw	r3,0(r2)

  return 0;  
   11f68:	0005883a 	mov	r2,zero
}
   11f6c:	e037883a 	mov	sp,fp
   11f70:	dfc00117 	ldw	ra,4(sp)
   11f74:	df000017 	ldw	fp,0(sp)
   11f78:	dec00204 	addi	sp,sp,8
   11f7c:	f800283a 	ret

00011f80 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11f80:	defffd04 	addi	sp,sp,-12
   11f84:	dfc00215 	stw	ra,8(sp)
   11f88:	df000115 	stw	fp,4(sp)
   11f8c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11f90:	00800074 	movhi	r2,1
   11f94:	108bf804 	addi	r2,r2,12256
   11f98:	e0bfff15 	stw	r2,-4(fp)
   11f9c:	00000606 	br	11fb8 <_do_ctors+0x38>
        (*ctor) (); 
   11fa0:	e0bfff17 	ldw	r2,-4(fp)
   11fa4:	10800017 	ldw	r2,0(r2)
   11fa8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11fac:	e0bfff17 	ldw	r2,-4(fp)
   11fb0:	10bfff04 	addi	r2,r2,-4
   11fb4:	e0bfff15 	stw	r2,-4(fp)
   11fb8:	e0ffff17 	ldw	r3,-4(fp)
   11fbc:	00800074 	movhi	r2,1
   11fc0:	108bf904 	addi	r2,r2,12260
   11fc4:	18bff62e 	bgeu	r3,r2,11fa0 <_gp+0xffff5c5c>
        (*ctor) (); 
}
   11fc8:	0001883a 	nop
   11fcc:	e037883a 	mov	sp,fp
   11fd0:	dfc00117 	ldw	ra,4(sp)
   11fd4:	df000017 	ldw	fp,0(sp)
   11fd8:	dec00204 	addi	sp,sp,8
   11fdc:	f800283a 	ret

00011fe0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11fe0:	defffd04 	addi	sp,sp,-12
   11fe4:	dfc00215 	stw	ra,8(sp)
   11fe8:	df000115 	stw	fp,4(sp)
   11fec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11ff0:	00800074 	movhi	r2,1
   11ff4:	108bf804 	addi	r2,r2,12256
   11ff8:	e0bfff15 	stw	r2,-4(fp)
   11ffc:	00000606 	br	12018 <_do_dtors+0x38>
        (*dtor) (); 
   12000:	e0bfff17 	ldw	r2,-4(fp)
   12004:	10800017 	ldw	r2,0(r2)
   12008:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1200c:	e0bfff17 	ldw	r2,-4(fp)
   12010:	10bfff04 	addi	r2,r2,-4
   12014:	e0bfff15 	stw	r2,-4(fp)
   12018:	e0ffff17 	ldw	r3,-4(fp)
   1201c:	00800074 	movhi	r2,1
   12020:	108bf904 	addi	r2,r2,12260
   12024:	18bff62e 	bgeu	r3,r2,12000 <_gp+0xffff5cbc>
        (*dtor) (); 
}
   12028:	0001883a 	nop
   1202c:	e037883a 	mov	sp,fp
   12030:	dfc00117 	ldw	ra,4(sp)
   12034:	df000017 	ldw	fp,0(sp)
   12038:	dec00204 	addi	sp,sp,8
   1203c:	f800283a 	ret

00012040 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12040:	defffe04 	addi	sp,sp,-8
   12044:	dfc00115 	stw	ra,4(sp)
   12048:	df000015 	stw	fp,0(sp)
   1204c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   12050:	01440004 	movi	r5,4096
   12054:	0009883a 	mov	r4,zero
   12058:	0012b100 	call	12b10 <alt_icache_flush>
#endif
}
   1205c:	0001883a 	nop
   12060:	e037883a 	mov	sp,fp
   12064:	dfc00117 	ldw	ra,4(sp)
   12068:	df000017 	ldw	fp,0(sp)
   1206c:	dec00204 	addi	sp,sp,8
   12070:	f800283a 	ret

00012074 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12074:	defff904 	addi	sp,sp,-28
   12078:	dfc00615 	stw	ra,24(sp)
   1207c:	df000515 	stw	fp,20(sp)
   12080:	df000504 	addi	fp,sp,20
   12084:	e13ffc15 	stw	r4,-16(fp)
   12088:	e17ffd15 	stw	r5,-12(fp)
   1208c:	e1bffe15 	stw	r6,-8(fp)
   12090:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   12094:	e0800217 	ldw	r2,8(fp)
   12098:	d8800015 	stw	r2,0(sp)
   1209c:	e1ffff17 	ldw	r7,-4(fp)
   120a0:	e1bffe17 	ldw	r6,-8(fp)
   120a4:	e17ffd17 	ldw	r5,-12(fp)
   120a8:	e13ffc17 	ldw	r4,-16(fp)
   120ac:	00122240 	call	12224 <alt_iic_isr_register>
}  
   120b0:	e037883a 	mov	sp,fp
   120b4:	dfc00117 	ldw	ra,4(sp)
   120b8:	df000017 	ldw	fp,0(sp)
   120bc:	dec00204 	addi	sp,sp,8
   120c0:	f800283a 	ret

000120c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   120c4:	defff904 	addi	sp,sp,-28
   120c8:	df000615 	stw	fp,24(sp)
   120cc:	df000604 	addi	fp,sp,24
   120d0:	e13ffe15 	stw	r4,-8(fp)
   120d4:	e17fff15 	stw	r5,-4(fp)
   120d8:	e0bfff17 	ldw	r2,-4(fp)
   120dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   120e0:	0005303a 	rdctl	r2,status
   120e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   120e8:	e0fffb17 	ldw	r3,-20(fp)
   120ec:	00bfff84 	movi	r2,-2
   120f0:	1884703a 	and	r2,r3,r2
   120f4:	1001703a 	wrctl	status,r2
  
  return context;
   120f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   120fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   12100:	00c00044 	movi	r3,1
   12104:	e0bffa17 	ldw	r2,-24(fp)
   12108:	1884983a 	sll	r2,r3,r2
   1210c:	1007883a 	mov	r3,r2
   12110:	d0a4d617 	ldw	r2,-27816(gp)
   12114:	1884b03a 	or	r2,r3,r2
   12118:	d0a4d615 	stw	r2,-27816(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1211c:	d0a4d617 	ldw	r2,-27816(gp)
   12120:	100170fa 	wrctl	ienable,r2
   12124:	e0bffc17 	ldw	r2,-16(fp)
   12128:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1212c:	e0bffd17 	ldw	r2,-12(fp)
   12130:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12134:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   12138:	0001883a 	nop
}
   1213c:	e037883a 	mov	sp,fp
   12140:	df000017 	ldw	fp,0(sp)
   12144:	dec00104 	addi	sp,sp,4
   12148:	f800283a 	ret

0001214c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1214c:	defff904 	addi	sp,sp,-28
   12150:	df000615 	stw	fp,24(sp)
   12154:	df000604 	addi	fp,sp,24
   12158:	e13ffe15 	stw	r4,-8(fp)
   1215c:	e17fff15 	stw	r5,-4(fp)
   12160:	e0bfff17 	ldw	r2,-4(fp)
   12164:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12168:	0005303a 	rdctl	r2,status
   1216c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12170:	e0fffb17 	ldw	r3,-20(fp)
   12174:	00bfff84 	movi	r2,-2
   12178:	1884703a 	and	r2,r3,r2
   1217c:	1001703a 	wrctl	status,r2
  
  return context;
   12180:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12184:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   12188:	00c00044 	movi	r3,1
   1218c:	e0bffa17 	ldw	r2,-24(fp)
   12190:	1884983a 	sll	r2,r3,r2
   12194:	0084303a 	nor	r2,zero,r2
   12198:	1007883a 	mov	r3,r2
   1219c:	d0a4d617 	ldw	r2,-27816(gp)
   121a0:	1884703a 	and	r2,r3,r2
   121a4:	d0a4d615 	stw	r2,-27816(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   121a8:	d0a4d617 	ldw	r2,-27816(gp)
   121ac:	100170fa 	wrctl	ienable,r2
   121b0:	e0bffc17 	ldw	r2,-16(fp)
   121b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   121b8:	e0bffd17 	ldw	r2,-12(fp)
   121bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   121c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   121c4:	0001883a 	nop
}
   121c8:	e037883a 	mov	sp,fp
   121cc:	df000017 	ldw	fp,0(sp)
   121d0:	dec00104 	addi	sp,sp,4
   121d4:	f800283a 	ret

000121d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   121d8:	defffc04 	addi	sp,sp,-16
   121dc:	df000315 	stw	fp,12(sp)
   121e0:	df000304 	addi	fp,sp,12
   121e4:	e13ffe15 	stw	r4,-8(fp)
   121e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   121ec:	000530fa 	rdctl	r2,ienable
   121f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   121f4:	00c00044 	movi	r3,1
   121f8:	e0bfff17 	ldw	r2,-4(fp)
   121fc:	1884983a 	sll	r2,r3,r2
   12200:	1007883a 	mov	r3,r2
   12204:	e0bffd17 	ldw	r2,-12(fp)
   12208:	1884703a 	and	r2,r3,r2
   1220c:	1004c03a 	cmpne	r2,r2,zero
   12210:	10803fcc 	andi	r2,r2,255
}
   12214:	e037883a 	mov	sp,fp
   12218:	df000017 	ldw	fp,0(sp)
   1221c:	dec00104 	addi	sp,sp,4
   12220:	f800283a 	ret

00012224 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12224:	defff504 	addi	sp,sp,-44
   12228:	dfc00a15 	stw	ra,40(sp)
   1222c:	df000915 	stw	fp,36(sp)
   12230:	df000904 	addi	fp,sp,36
   12234:	e13ffc15 	stw	r4,-16(fp)
   12238:	e17ffd15 	stw	r5,-12(fp)
   1223c:	e1bffe15 	stw	r6,-8(fp)
   12240:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   12244:	00bffa84 	movi	r2,-22
   12248:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1224c:	e0bffd17 	ldw	r2,-12(fp)
   12250:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   12254:	e0bff817 	ldw	r2,-32(fp)
   12258:	10800808 	cmpgei	r2,r2,32
   1225c:	1000271e 	bne	r2,zero,122fc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12260:	0005303a 	rdctl	r2,status
   12264:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12268:	e0fffb17 	ldw	r3,-20(fp)
   1226c:	00bfff84 	movi	r2,-2
   12270:	1884703a 	and	r2,r3,r2
   12274:	1001703a 	wrctl	status,r2
  
  return context;
   12278:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1227c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   12280:	00800074 	movhi	r2,1
   12284:	1095ab04 	addi	r2,r2,22188
   12288:	e0fff817 	ldw	r3,-32(fp)
   1228c:	180690fa 	slli	r3,r3,3
   12290:	10c5883a 	add	r2,r2,r3
   12294:	e0fffe17 	ldw	r3,-8(fp)
   12298:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1229c:	00800074 	movhi	r2,1
   122a0:	1095ab04 	addi	r2,r2,22188
   122a4:	e0fff817 	ldw	r3,-32(fp)
   122a8:	180690fa 	slli	r3,r3,3
   122ac:	10c5883a 	add	r2,r2,r3
   122b0:	10800104 	addi	r2,r2,4
   122b4:	e0ffff17 	ldw	r3,-4(fp)
   122b8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   122bc:	e0bffe17 	ldw	r2,-8(fp)
   122c0:	10000526 	beq	r2,zero,122d8 <alt_iic_isr_register+0xb4>
   122c4:	e0bff817 	ldw	r2,-32(fp)
   122c8:	100b883a 	mov	r5,r2
   122cc:	e13ffc17 	ldw	r4,-16(fp)
   122d0:	00120c40 	call	120c4 <alt_ic_irq_enable>
   122d4:	00000406 	br	122e8 <alt_iic_isr_register+0xc4>
   122d8:	e0bff817 	ldw	r2,-32(fp)
   122dc:	100b883a 	mov	r5,r2
   122e0:	e13ffc17 	ldw	r4,-16(fp)
   122e4:	001214c0 	call	1214c <alt_ic_irq_disable>
   122e8:	e0bff715 	stw	r2,-36(fp)
   122ec:	e0bffa17 	ldw	r2,-24(fp)
   122f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   122f4:	e0bff917 	ldw	r2,-28(fp)
   122f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   122fc:	e0bff717 	ldw	r2,-36(fp)
}
   12300:	e037883a 	mov	sp,fp
   12304:	dfc00117 	ldw	ra,4(sp)
   12308:	df000017 	ldw	fp,0(sp)
   1230c:	dec00204 	addi	sp,sp,8
   12310:	f800283a 	ret

00012314 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   12314:	defff904 	addi	sp,sp,-28
   12318:	dfc00615 	stw	ra,24(sp)
   1231c:	df000515 	stw	fp,20(sp)
   12320:	df000504 	addi	fp,sp,20
   12324:	e13ffc15 	stw	r4,-16(fp)
   12328:	e17ffd15 	stw	r5,-12(fp)
   1232c:	e1bffe15 	stw	r6,-8(fp)
   12330:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   12334:	e1bfff17 	ldw	r6,-4(fp)
   12338:	e17ffe17 	ldw	r5,-8(fp)
   1233c:	e13ffd17 	ldw	r4,-12(fp)
   12340:	00125540 	call	12554 <open>
   12344:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   12348:	e0bffb17 	ldw	r2,-20(fp)
   1234c:	10001c16 	blt	r2,zero,123c0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   12350:	00800074 	movhi	r2,1
   12354:	10907104 	addi	r2,r2,16836
   12358:	e0fffb17 	ldw	r3,-20(fp)
   1235c:	18c00324 	muli	r3,r3,12
   12360:	10c5883a 	add	r2,r2,r3
   12364:	10c00017 	ldw	r3,0(r2)
   12368:	e0bffc17 	ldw	r2,-16(fp)
   1236c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   12370:	00800074 	movhi	r2,1
   12374:	10907104 	addi	r2,r2,16836
   12378:	e0fffb17 	ldw	r3,-20(fp)
   1237c:	18c00324 	muli	r3,r3,12
   12380:	10c5883a 	add	r2,r2,r3
   12384:	10800104 	addi	r2,r2,4
   12388:	10c00017 	ldw	r3,0(r2)
   1238c:	e0bffc17 	ldw	r2,-16(fp)
   12390:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   12394:	00800074 	movhi	r2,1
   12398:	10907104 	addi	r2,r2,16836
   1239c:	e0fffb17 	ldw	r3,-20(fp)
   123a0:	18c00324 	muli	r3,r3,12
   123a4:	10c5883a 	add	r2,r2,r3
   123a8:	10800204 	addi	r2,r2,8
   123ac:	10c00017 	ldw	r3,0(r2)
   123b0:	e0bffc17 	ldw	r2,-16(fp)
   123b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   123b8:	e13ffb17 	ldw	r4,-20(fp)
   123bc:	00126a80 	call	126a8 <alt_release_fd>
  }
} 
   123c0:	0001883a 	nop
   123c4:	e037883a 	mov	sp,fp
   123c8:	dfc00117 	ldw	ra,4(sp)
   123cc:	df000017 	ldw	fp,0(sp)
   123d0:	dec00204 	addi	sp,sp,8
   123d4:	f800283a 	ret

000123d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   123d8:	defffb04 	addi	sp,sp,-20
   123dc:	dfc00415 	stw	ra,16(sp)
   123e0:	df000315 	stw	fp,12(sp)
   123e4:	df000304 	addi	fp,sp,12
   123e8:	e13ffd15 	stw	r4,-12(fp)
   123ec:	e17ffe15 	stw	r5,-8(fp)
   123f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   123f4:	01c07fc4 	movi	r7,511
   123f8:	01800044 	movi	r6,1
   123fc:	e17ffd17 	ldw	r5,-12(fp)
   12400:	01000074 	movhi	r4,1
   12404:	21107404 	addi	r4,r4,16848
   12408:	00123140 	call	12314 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1240c:	01c07fc4 	movi	r7,511
   12410:	000d883a 	mov	r6,zero
   12414:	e17ffe17 	ldw	r5,-8(fp)
   12418:	01000074 	movhi	r4,1
   1241c:	21107104 	addi	r4,r4,16836
   12420:	00123140 	call	12314 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   12424:	01c07fc4 	movi	r7,511
   12428:	01800044 	movi	r6,1
   1242c:	e17fff17 	ldw	r5,-4(fp)
   12430:	01000074 	movhi	r4,1
   12434:	21107704 	addi	r4,r4,16860
   12438:	00123140 	call	12314 <alt_open_fd>
}  
   1243c:	0001883a 	nop
   12440:	e037883a 	mov	sp,fp
   12444:	dfc00117 	ldw	ra,4(sp)
   12448:	df000017 	ldw	fp,0(sp)
   1244c:	dec00204 	addi	sp,sp,8
   12450:	f800283a 	ret

00012454 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12454:	defffe04 	addi	sp,sp,-8
   12458:	dfc00115 	stw	ra,4(sp)
   1245c:	df000015 	stw	fp,0(sp)
   12460:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12464:	d0a00717 	ldw	r2,-32740(gp)
   12468:	10000326 	beq	r2,zero,12478 <alt_get_errno+0x24>
   1246c:	d0a00717 	ldw	r2,-32740(gp)
   12470:	103ee83a 	callr	r2
   12474:	00000106 	br	1247c <alt_get_errno+0x28>
   12478:	d0a4d004 	addi	r2,gp,-27840
}
   1247c:	e037883a 	mov	sp,fp
   12480:	dfc00117 	ldw	ra,4(sp)
   12484:	df000017 	ldw	fp,0(sp)
   12488:	dec00204 	addi	sp,sp,8
   1248c:	f800283a 	ret

00012490 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   12490:	defffd04 	addi	sp,sp,-12
   12494:	df000215 	stw	fp,8(sp)
   12498:	df000204 	addi	fp,sp,8
   1249c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   124a0:	e0bfff17 	ldw	r2,-4(fp)
   124a4:	10800217 	ldw	r2,8(r2)
   124a8:	10d00034 	orhi	r3,r2,16384
   124ac:	e0bfff17 	ldw	r2,-4(fp)
   124b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   124b4:	e03ffe15 	stw	zero,-8(fp)
   124b8:	00001d06 	br	12530 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   124bc:	00800074 	movhi	r2,1
   124c0:	10907104 	addi	r2,r2,16836
   124c4:	e0fffe17 	ldw	r3,-8(fp)
   124c8:	18c00324 	muli	r3,r3,12
   124cc:	10c5883a 	add	r2,r2,r3
   124d0:	10c00017 	ldw	r3,0(r2)
   124d4:	e0bfff17 	ldw	r2,-4(fp)
   124d8:	10800017 	ldw	r2,0(r2)
   124dc:	1880111e 	bne	r3,r2,12524 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   124e0:	00800074 	movhi	r2,1
   124e4:	10907104 	addi	r2,r2,16836
   124e8:	e0fffe17 	ldw	r3,-8(fp)
   124ec:	18c00324 	muli	r3,r3,12
   124f0:	10c5883a 	add	r2,r2,r3
   124f4:	10800204 	addi	r2,r2,8
   124f8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   124fc:	1000090e 	bge	r2,zero,12524 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   12500:	e0bffe17 	ldw	r2,-8(fp)
   12504:	10c00324 	muli	r3,r2,12
   12508:	00800074 	movhi	r2,1
   1250c:	10907104 	addi	r2,r2,16836
   12510:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12514:	e0bfff17 	ldw	r2,-4(fp)
   12518:	18800226 	beq	r3,r2,12524 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1251c:	00bffcc4 	movi	r2,-13
   12520:	00000806 	br	12544 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12524:	e0bffe17 	ldw	r2,-8(fp)
   12528:	10800044 	addi	r2,r2,1
   1252c:	e0bffe15 	stw	r2,-8(fp)
   12530:	d0a00617 	ldw	r2,-32744(gp)
   12534:	1007883a 	mov	r3,r2
   12538:	e0bffe17 	ldw	r2,-8(fp)
   1253c:	18bfdf2e 	bgeu	r3,r2,124bc <_gp+0xffff6178>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12540:	0005883a 	mov	r2,zero
}
   12544:	e037883a 	mov	sp,fp
   12548:	df000017 	ldw	fp,0(sp)
   1254c:	dec00104 	addi	sp,sp,4
   12550:	f800283a 	ret

00012554 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   12554:	defff604 	addi	sp,sp,-40
   12558:	dfc00915 	stw	ra,36(sp)
   1255c:	df000815 	stw	fp,32(sp)
   12560:	df000804 	addi	fp,sp,32
   12564:	e13ffd15 	stw	r4,-12(fp)
   12568:	e17ffe15 	stw	r5,-8(fp)
   1256c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   12570:	00bfffc4 	movi	r2,-1
   12574:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   12578:	00bffb44 	movi	r2,-19
   1257c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   12580:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12584:	d1600404 	addi	r5,gp,-32752
   12588:	e13ffd17 	ldw	r4,-12(fp)
   1258c:	00128d40 	call	128d4 <alt_find_dev>
   12590:	e0bff815 	stw	r2,-32(fp)
   12594:	e0bff817 	ldw	r2,-32(fp)
   12598:	1000051e 	bne	r2,zero,125b0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1259c:	e13ffd17 	ldw	r4,-12(fp)
   125a0:	00129640 	call	12964 <alt_find_file>
   125a4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   125a8:	00800044 	movi	r2,1
   125ac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   125b0:	e0bff817 	ldw	r2,-32(fp)
   125b4:	10002926 	beq	r2,zero,1265c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   125b8:	e13ff817 	ldw	r4,-32(fp)
   125bc:	0012a6c0 	call	12a6c <alt_get_fd>
   125c0:	e0bff915 	stw	r2,-28(fp)
   125c4:	e0bff917 	ldw	r2,-28(fp)
   125c8:	1000030e 	bge	r2,zero,125d8 <open+0x84>
    {
      status = index;
   125cc:	e0bff917 	ldw	r2,-28(fp)
   125d0:	e0bffa15 	stw	r2,-24(fp)
   125d4:	00002306 	br	12664 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   125d8:	e0bff917 	ldw	r2,-28(fp)
   125dc:	10c00324 	muli	r3,r2,12
   125e0:	00800074 	movhi	r2,1
   125e4:	10907104 	addi	r2,r2,16836
   125e8:	1885883a 	add	r2,r3,r2
   125ec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   125f0:	e0fffe17 	ldw	r3,-8(fp)
   125f4:	00900034 	movhi	r2,16384
   125f8:	10bfffc4 	addi	r2,r2,-1
   125fc:	1886703a 	and	r3,r3,r2
   12600:	e0bffc17 	ldw	r2,-16(fp)
   12604:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   12608:	e0bffb17 	ldw	r2,-20(fp)
   1260c:	1000051e 	bne	r2,zero,12624 <open+0xd0>
   12610:	e13ffc17 	ldw	r4,-16(fp)
   12614:	00124900 	call	12490 <alt_file_locked>
   12618:	e0bffa15 	stw	r2,-24(fp)
   1261c:	e0bffa17 	ldw	r2,-24(fp)
   12620:	10001016 	blt	r2,zero,12664 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   12624:	e0bff817 	ldw	r2,-32(fp)
   12628:	10800317 	ldw	r2,12(r2)
   1262c:	10000826 	beq	r2,zero,12650 <open+0xfc>
   12630:	e0bff817 	ldw	r2,-32(fp)
   12634:	10800317 	ldw	r2,12(r2)
   12638:	e1ffff17 	ldw	r7,-4(fp)
   1263c:	e1bffe17 	ldw	r6,-8(fp)
   12640:	e17ffd17 	ldw	r5,-12(fp)
   12644:	e13ffc17 	ldw	r4,-16(fp)
   12648:	103ee83a 	callr	r2
   1264c:	00000106 	br	12654 <open+0x100>
   12650:	0005883a 	mov	r2,zero
   12654:	e0bffa15 	stw	r2,-24(fp)
   12658:	00000206 	br	12664 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1265c:	00bffb44 	movi	r2,-19
   12660:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   12664:	e0bffa17 	ldw	r2,-24(fp)
   12668:	1000090e 	bge	r2,zero,12690 <open+0x13c>
  {
    alt_release_fd (index);  
   1266c:	e13ff917 	ldw	r4,-28(fp)
   12670:	00126a80 	call	126a8 <alt_release_fd>
    ALT_ERRNO = -status;
   12674:	00124540 	call	12454 <alt_get_errno>
   12678:	1007883a 	mov	r3,r2
   1267c:	e0bffa17 	ldw	r2,-24(fp)
   12680:	0085c83a 	sub	r2,zero,r2
   12684:	18800015 	stw	r2,0(r3)
    return -1;
   12688:	00bfffc4 	movi	r2,-1
   1268c:	00000106 	br	12694 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   12690:	e0bff917 	ldw	r2,-28(fp)
}
   12694:	e037883a 	mov	sp,fp
   12698:	dfc00117 	ldw	ra,4(sp)
   1269c:	df000017 	ldw	fp,0(sp)
   126a0:	dec00204 	addi	sp,sp,8
   126a4:	f800283a 	ret

000126a8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   126a8:	defffe04 	addi	sp,sp,-8
   126ac:	df000115 	stw	fp,4(sp)
   126b0:	df000104 	addi	fp,sp,4
   126b4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   126b8:	e0bfff17 	ldw	r2,-4(fp)
   126bc:	108000d0 	cmplti	r2,r2,3
   126c0:	10000d1e 	bne	r2,zero,126f8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   126c4:	00800074 	movhi	r2,1
   126c8:	10907104 	addi	r2,r2,16836
   126cc:	e0ffff17 	ldw	r3,-4(fp)
   126d0:	18c00324 	muli	r3,r3,12
   126d4:	10c5883a 	add	r2,r2,r3
   126d8:	10800204 	addi	r2,r2,8
   126dc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   126e0:	00800074 	movhi	r2,1
   126e4:	10907104 	addi	r2,r2,16836
   126e8:	e0ffff17 	ldw	r3,-4(fp)
   126ec:	18c00324 	muli	r3,r3,12
   126f0:	10c5883a 	add	r2,r2,r3
   126f4:	10000015 	stw	zero,0(r2)
  }
}
   126f8:	0001883a 	nop
   126fc:	e037883a 	mov	sp,fp
   12700:	df000017 	ldw	fp,0(sp)
   12704:	dec00104 	addi	sp,sp,4
   12708:	f800283a 	ret

0001270c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1270c:	defffa04 	addi	sp,sp,-24
   12710:	df000515 	stw	fp,20(sp)
   12714:	df000504 	addi	fp,sp,20
   12718:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1271c:	0005303a 	rdctl	r2,status
   12720:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12724:	e0fffc17 	ldw	r3,-16(fp)
   12728:	00bfff84 	movi	r2,-2
   1272c:	1884703a 	and	r2,r3,r2
   12730:	1001703a 	wrctl	status,r2
  
  return context;
   12734:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   12738:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1273c:	e0bfff17 	ldw	r2,-4(fp)
   12740:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   12744:	e0bffd17 	ldw	r2,-12(fp)
   12748:	10800017 	ldw	r2,0(r2)
   1274c:	e0fffd17 	ldw	r3,-12(fp)
   12750:	18c00117 	ldw	r3,4(r3)
   12754:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   12758:	e0bffd17 	ldw	r2,-12(fp)
   1275c:	10800117 	ldw	r2,4(r2)
   12760:	e0fffd17 	ldw	r3,-12(fp)
   12764:	18c00017 	ldw	r3,0(r3)
   12768:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1276c:	e0bffd17 	ldw	r2,-12(fp)
   12770:	e0fffd17 	ldw	r3,-12(fp)
   12774:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   12778:	e0bffd17 	ldw	r2,-12(fp)
   1277c:	e0fffd17 	ldw	r3,-12(fp)
   12780:	10c00015 	stw	r3,0(r2)
   12784:	e0bffb17 	ldw	r2,-20(fp)
   12788:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1278c:	e0bffe17 	ldw	r2,-8(fp)
   12790:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12794:	0001883a 	nop
   12798:	e037883a 	mov	sp,fp
   1279c:	df000017 	ldw	fp,0(sp)
   127a0:	dec00104 	addi	sp,sp,4
   127a4:	f800283a 	ret

000127a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   127a8:	defffb04 	addi	sp,sp,-20
   127ac:	dfc00415 	stw	ra,16(sp)
   127b0:	df000315 	stw	fp,12(sp)
   127b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   127b8:	d0a00917 	ldw	r2,-32732(gp)
   127bc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   127c0:	d0a4d817 	ldw	r2,-27808(gp)
   127c4:	10800044 	addi	r2,r2,1
   127c8:	d0a4d815 	stw	r2,-27808(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   127cc:	00002e06 	br	12888 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   127d0:	e0bffd17 	ldw	r2,-12(fp)
   127d4:	10800017 	ldw	r2,0(r2)
   127d8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   127dc:	e0bffd17 	ldw	r2,-12(fp)
   127e0:	10800403 	ldbu	r2,16(r2)
   127e4:	10803fcc 	andi	r2,r2,255
   127e8:	10000426 	beq	r2,zero,127fc <alt_tick+0x54>
   127ec:	d0a4d817 	ldw	r2,-27808(gp)
   127f0:	1000021e 	bne	r2,zero,127fc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   127f4:	e0bffd17 	ldw	r2,-12(fp)
   127f8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   127fc:	e0bffd17 	ldw	r2,-12(fp)
   12800:	10800217 	ldw	r2,8(r2)
   12804:	d0e4d817 	ldw	r3,-27808(gp)
   12808:	18801d36 	bltu	r3,r2,12880 <alt_tick+0xd8>
   1280c:	e0bffd17 	ldw	r2,-12(fp)
   12810:	10800403 	ldbu	r2,16(r2)
   12814:	10803fcc 	andi	r2,r2,255
   12818:	1000191e 	bne	r2,zero,12880 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1281c:	e0bffd17 	ldw	r2,-12(fp)
   12820:	10800317 	ldw	r2,12(r2)
   12824:	e0fffd17 	ldw	r3,-12(fp)
   12828:	18c00517 	ldw	r3,20(r3)
   1282c:	1809883a 	mov	r4,r3
   12830:	103ee83a 	callr	r2
   12834:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12838:	e0bfff17 	ldw	r2,-4(fp)
   1283c:	1000031e 	bne	r2,zero,1284c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   12840:	e13ffd17 	ldw	r4,-12(fp)
   12844:	001270c0 	call	1270c <alt_alarm_stop>
   12848:	00000d06 	br	12880 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1284c:	e0bffd17 	ldw	r2,-12(fp)
   12850:	10c00217 	ldw	r3,8(r2)
   12854:	e0bfff17 	ldw	r2,-4(fp)
   12858:	1887883a 	add	r3,r3,r2
   1285c:	e0bffd17 	ldw	r2,-12(fp)
   12860:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12864:	e0bffd17 	ldw	r2,-12(fp)
   12868:	10c00217 	ldw	r3,8(r2)
   1286c:	d0a4d817 	ldw	r2,-27808(gp)
   12870:	1880032e 	bgeu	r3,r2,12880 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   12874:	e0bffd17 	ldw	r2,-12(fp)
   12878:	00c00044 	movi	r3,1
   1287c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   12880:	e0bffe17 	ldw	r2,-8(fp)
   12884:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12888:	e0fffd17 	ldw	r3,-12(fp)
   1288c:	d0a00904 	addi	r2,gp,-32732
   12890:	18bfcf1e 	bne	r3,r2,127d0 <_gp+0xffff648c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   12894:	0001883a 	nop
}
   12898:	0001883a 	nop
   1289c:	e037883a 	mov	sp,fp
   128a0:	dfc00117 	ldw	ra,4(sp)
   128a4:	df000017 	ldw	fp,0(sp)
   128a8:	dec00204 	addi	sp,sp,8
   128ac:	f800283a 	ret

000128b0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   128b0:	deffff04 	addi	sp,sp,-4
   128b4:	df000015 	stw	fp,0(sp)
   128b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   128bc:	000170fa 	wrctl	ienable,zero
}
   128c0:	0001883a 	nop
   128c4:	e037883a 	mov	sp,fp
   128c8:	df000017 	ldw	fp,0(sp)
   128cc:	dec00104 	addi	sp,sp,4
   128d0:	f800283a 	ret

000128d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   128d4:	defffa04 	addi	sp,sp,-24
   128d8:	dfc00515 	stw	ra,20(sp)
   128dc:	df000415 	stw	fp,16(sp)
   128e0:	df000404 	addi	fp,sp,16
   128e4:	e13ffe15 	stw	r4,-8(fp)
   128e8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   128ec:	e0bfff17 	ldw	r2,-4(fp)
   128f0:	10800017 	ldw	r2,0(r2)
   128f4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   128f8:	e13ffe17 	ldw	r4,-8(fp)
   128fc:	00104880 	call	10488 <strlen>
   12900:	10800044 	addi	r2,r2,1
   12904:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12908:	00000d06 	br	12940 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1290c:	e0bffc17 	ldw	r2,-16(fp)
   12910:	10800217 	ldw	r2,8(r2)
   12914:	e0fffd17 	ldw	r3,-12(fp)
   12918:	180d883a 	mov	r6,r3
   1291c:	e17ffe17 	ldw	r5,-8(fp)
   12920:	1009883a 	mov	r4,r2
   12924:	0012c700 	call	12c70 <memcmp>
   12928:	1000021e 	bne	r2,zero,12934 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1292c:	e0bffc17 	ldw	r2,-16(fp)
   12930:	00000706 	br	12950 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   12934:	e0bffc17 	ldw	r2,-16(fp)
   12938:	10800017 	ldw	r2,0(r2)
   1293c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12940:	e0fffc17 	ldw	r3,-16(fp)
   12944:	e0bfff17 	ldw	r2,-4(fp)
   12948:	18bff01e 	bne	r3,r2,1290c <_gp+0xffff65c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1294c:	0005883a 	mov	r2,zero
}
   12950:	e037883a 	mov	sp,fp
   12954:	dfc00117 	ldw	ra,4(sp)
   12958:	df000017 	ldw	fp,0(sp)
   1295c:	dec00204 	addi	sp,sp,8
   12960:	f800283a 	ret

00012964 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12964:	defffb04 	addi	sp,sp,-20
   12968:	dfc00415 	stw	ra,16(sp)
   1296c:	df000315 	stw	fp,12(sp)
   12970:	df000304 	addi	fp,sp,12
   12974:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12978:	d0a00217 	ldw	r2,-32760(gp)
   1297c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12980:	00003106 	br	12a48 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   12984:	e0bffd17 	ldw	r2,-12(fp)
   12988:	10800217 	ldw	r2,8(r2)
   1298c:	1009883a 	mov	r4,r2
   12990:	00104880 	call	10488 <strlen>
   12994:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   12998:	e0bffd17 	ldw	r2,-12(fp)
   1299c:	10c00217 	ldw	r3,8(r2)
   129a0:	e0bffe17 	ldw	r2,-8(fp)
   129a4:	10bfffc4 	addi	r2,r2,-1
   129a8:	1885883a 	add	r2,r3,r2
   129ac:	10800003 	ldbu	r2,0(r2)
   129b0:	10803fcc 	andi	r2,r2,255
   129b4:	1080201c 	xori	r2,r2,128
   129b8:	10bfe004 	addi	r2,r2,-128
   129bc:	10800bd8 	cmpnei	r2,r2,47
   129c0:	1000031e 	bne	r2,zero,129d0 <alt_find_file+0x6c>
    {
      len -= 1;
   129c4:	e0bffe17 	ldw	r2,-8(fp)
   129c8:	10bfffc4 	addi	r2,r2,-1
   129cc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   129d0:	e0bffe17 	ldw	r2,-8(fp)
   129d4:	e0ffff17 	ldw	r3,-4(fp)
   129d8:	1885883a 	add	r2,r3,r2
   129dc:	10800003 	ldbu	r2,0(r2)
   129e0:	10803fcc 	andi	r2,r2,255
   129e4:	1080201c 	xori	r2,r2,128
   129e8:	10bfe004 	addi	r2,r2,-128
   129ec:	10800be0 	cmpeqi	r2,r2,47
   129f0:	1000081e 	bne	r2,zero,12a14 <alt_find_file+0xb0>
   129f4:	e0bffe17 	ldw	r2,-8(fp)
   129f8:	e0ffff17 	ldw	r3,-4(fp)
   129fc:	1885883a 	add	r2,r3,r2
   12a00:	10800003 	ldbu	r2,0(r2)
   12a04:	10803fcc 	andi	r2,r2,255
   12a08:	1080201c 	xori	r2,r2,128
   12a0c:	10bfe004 	addi	r2,r2,-128
   12a10:	10000a1e 	bne	r2,zero,12a3c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   12a14:	e0bffd17 	ldw	r2,-12(fp)
   12a18:	10800217 	ldw	r2,8(r2)
   12a1c:	e0fffe17 	ldw	r3,-8(fp)
   12a20:	180d883a 	mov	r6,r3
   12a24:	e17fff17 	ldw	r5,-4(fp)
   12a28:	1009883a 	mov	r4,r2
   12a2c:	0012c700 	call	12c70 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12a30:	1000021e 	bne	r2,zero,12a3c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12a34:	e0bffd17 	ldw	r2,-12(fp)
   12a38:	00000706 	br	12a58 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   12a3c:	e0bffd17 	ldw	r2,-12(fp)
   12a40:	10800017 	ldw	r2,0(r2)
   12a44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12a48:	e0fffd17 	ldw	r3,-12(fp)
   12a4c:	d0a00204 	addi	r2,gp,-32760
   12a50:	18bfcc1e 	bne	r3,r2,12984 <_gp+0xffff6640>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12a54:	0005883a 	mov	r2,zero
}
   12a58:	e037883a 	mov	sp,fp
   12a5c:	dfc00117 	ldw	ra,4(sp)
   12a60:	df000017 	ldw	fp,0(sp)
   12a64:	dec00204 	addi	sp,sp,8
   12a68:	f800283a 	ret

00012a6c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12a6c:	defffc04 	addi	sp,sp,-16
   12a70:	df000315 	stw	fp,12(sp)
   12a74:	df000304 	addi	fp,sp,12
   12a78:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   12a7c:	00bffa04 	movi	r2,-24
   12a80:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12a84:	e03ffd15 	stw	zero,-12(fp)
   12a88:	00001906 	br	12af0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   12a8c:	00800074 	movhi	r2,1
   12a90:	10907104 	addi	r2,r2,16836
   12a94:	e0fffd17 	ldw	r3,-12(fp)
   12a98:	18c00324 	muli	r3,r3,12
   12a9c:	10c5883a 	add	r2,r2,r3
   12aa0:	10800017 	ldw	r2,0(r2)
   12aa4:	10000f1e 	bne	r2,zero,12ae4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   12aa8:	00800074 	movhi	r2,1
   12aac:	10907104 	addi	r2,r2,16836
   12ab0:	e0fffd17 	ldw	r3,-12(fp)
   12ab4:	18c00324 	muli	r3,r3,12
   12ab8:	10c5883a 	add	r2,r2,r3
   12abc:	e0ffff17 	ldw	r3,-4(fp)
   12ac0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12ac4:	d0e00617 	ldw	r3,-32744(gp)
   12ac8:	e0bffd17 	ldw	r2,-12(fp)
   12acc:	1880020e 	bge	r3,r2,12ad8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   12ad0:	e0bffd17 	ldw	r2,-12(fp)
   12ad4:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   12ad8:	e0bffd17 	ldw	r2,-12(fp)
   12adc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   12ae0:	00000606 	br	12afc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12ae4:	e0bffd17 	ldw	r2,-12(fp)
   12ae8:	10800044 	addi	r2,r2,1
   12aec:	e0bffd15 	stw	r2,-12(fp)
   12af0:	e0bffd17 	ldw	r2,-12(fp)
   12af4:	10800810 	cmplti	r2,r2,32
   12af8:	103fe41e 	bne	r2,zero,12a8c <_gp+0xffff6748>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12afc:	e0bffe17 	ldw	r2,-8(fp)
}
   12b00:	e037883a 	mov	sp,fp
   12b04:	df000017 	ldw	fp,0(sp)
   12b08:	dec00104 	addi	sp,sp,4
   12b0c:	f800283a 	ret

00012b10 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   12b10:	defffb04 	addi	sp,sp,-20
   12b14:	df000415 	stw	fp,16(sp)
   12b18:	df000404 	addi	fp,sp,16
   12b1c:	e13ffe15 	stw	r4,-8(fp)
   12b20:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   12b24:	e0bfff17 	ldw	r2,-4(fp)
   12b28:	10840070 	cmpltui	r2,r2,4097
   12b2c:	1000021e 	bne	r2,zero,12b38 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   12b30:	00840004 	movi	r2,4096
   12b34:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   12b38:	e0fffe17 	ldw	r3,-8(fp)
   12b3c:	e0bfff17 	ldw	r2,-4(fp)
   12b40:	1885883a 	add	r2,r3,r2
   12b44:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12b48:	e0bffe17 	ldw	r2,-8(fp)
   12b4c:	e0bffc15 	stw	r2,-16(fp)
   12b50:	00000506 	br	12b68 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   12b54:	e0bffc17 	ldw	r2,-16(fp)
   12b58:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12b5c:	e0bffc17 	ldw	r2,-16(fp)
   12b60:	10800804 	addi	r2,r2,32
   12b64:	e0bffc15 	stw	r2,-16(fp)
   12b68:	e0fffc17 	ldw	r3,-16(fp)
   12b6c:	e0bffd17 	ldw	r2,-12(fp)
   12b70:	18bff836 	bltu	r3,r2,12b54 <_gp+0xffff6810>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   12b74:	e0bffe17 	ldw	r2,-8(fp)
   12b78:	108007cc 	andi	r2,r2,31
   12b7c:	10000226 	beq	r2,zero,12b88 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   12b80:	e0bffc17 	ldw	r2,-16(fp)
   12b84:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   12b88:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   12b8c:	0001883a 	nop
   12b90:	e037883a 	mov	sp,fp
   12b94:	df000017 	ldw	fp,0(sp)
   12b98:	dec00104 	addi	sp,sp,4
   12b9c:	f800283a 	ret

00012ba0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   12ba0:	defffe04 	addi	sp,sp,-8
   12ba4:	df000115 	stw	fp,4(sp)
   12ba8:	df000104 	addi	fp,sp,4
   12bac:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   12bb0:	e0bfff17 	ldw	r2,-4(fp)
   12bb4:	10bffe84 	addi	r2,r2,-6
   12bb8:	10c00428 	cmpgeui	r3,r2,16
   12bbc:	18001a1e 	bne	r3,zero,12c28 <alt_exception_cause_generated_bad_addr+0x88>
   12bc0:	100690ba 	slli	r3,r2,2
   12bc4:	00800074 	movhi	r2,1
   12bc8:	108af604 	addi	r2,r2,11224
   12bcc:	1885883a 	add	r2,r3,r2
   12bd0:	10800017 	ldw	r2,0(r2)
   12bd4:	1000683a 	jmp	r2
   12bd8:	00012c18 	cmpnei	zero,zero,1200
   12bdc:	00012c18 	cmpnei	zero,zero,1200
   12be0:	00012c28 	cmpgeui	zero,zero,1200
   12be4:	00012c28 	cmpgeui	zero,zero,1200
   12be8:	00012c28 	cmpgeui	zero,zero,1200
   12bec:	00012c18 	cmpnei	zero,zero,1200
   12bf0:	00012c20 	cmpeqi	zero,zero,1200
   12bf4:	00012c28 	cmpgeui	zero,zero,1200
   12bf8:	00012c18 	cmpnei	zero,zero,1200
   12bfc:	00012c18 	cmpnei	zero,zero,1200
   12c00:	00012c28 	cmpgeui	zero,zero,1200
   12c04:	00012c18 	cmpnei	zero,zero,1200
   12c08:	00012c20 	cmpeqi	zero,zero,1200
   12c0c:	00012c28 	cmpgeui	zero,zero,1200
   12c10:	00012c28 	cmpgeui	zero,zero,1200
   12c14:	00012c18 	cmpnei	zero,zero,1200
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12c18:	00800044 	movi	r2,1
   12c1c:	00000306 	br	12c2c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12c20:	0005883a 	mov	r2,zero
   12c24:	00000106 	br	12c2c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   12c28:	0005883a 	mov	r2,zero
  }
}
   12c2c:	e037883a 	mov	sp,fp
   12c30:	df000017 	ldw	fp,0(sp)
   12c34:	dec00104 	addi	sp,sp,4
   12c38:	f800283a 	ret

00012c3c <atexit>:
   12c3c:	200b883a 	mov	r5,r4
   12c40:	000f883a 	mov	r7,zero
   12c44:	000d883a 	mov	r6,zero
   12c48:	0009883a 	mov	r4,zero
   12c4c:	0012cc81 	jmpi	12cc8 <__register_exitproc>

00012c50 <exit>:
   12c50:	defffe04 	addi	sp,sp,-8
   12c54:	000b883a 	mov	r5,zero
   12c58:	dc000015 	stw	r16,0(sp)
   12c5c:	dfc00115 	stw	ra,4(sp)
   12c60:	2021883a 	mov	r16,r4
   12c64:	0012e200 	call	12e20 <__call_exitprocs>
   12c68:	8009883a 	mov	r4,r16
   12c6c:	0012fb00 	call	12fb0 <_exit>

00012c70 <memcmp>:
   12c70:	218d883a 	add	r6,r4,r6
   12c74:	21800826 	beq	r4,r6,12c98 <memcmp+0x28>
   12c78:	20800003 	ldbu	r2,0(r4)
   12c7c:	28c00003 	ldbu	r3,0(r5)
   12c80:	10c00226 	beq	r2,r3,12c8c <memcmp+0x1c>
   12c84:	10c5c83a 	sub	r2,r2,r3
   12c88:	f800283a 	ret
   12c8c:	21000044 	addi	r4,r4,1
   12c90:	29400044 	addi	r5,r5,1
   12c94:	003ff706 	br	12c74 <_gp+0xffff6930>
   12c98:	0005883a 	mov	r2,zero
   12c9c:	f800283a 	ret

00012ca0 <memcpy>:
   12ca0:	2005883a 	mov	r2,r4
   12ca4:	2007883a 	mov	r3,r4
   12ca8:	218d883a 	add	r6,r4,r6
   12cac:	19800526 	beq	r3,r6,12cc4 <memcpy+0x24>
   12cb0:	29000003 	ldbu	r4,0(r5)
   12cb4:	18c00044 	addi	r3,r3,1
   12cb8:	29400044 	addi	r5,r5,1
   12cbc:	193fffc5 	stb	r4,-1(r3)
   12cc0:	003ffa06 	br	12cac <_gp+0xffff6968>
   12cc4:	f800283a 	ret

00012cc8 <__register_exitproc>:
   12cc8:	00800074 	movhi	r2,1
   12ccc:	1090d104 	addi	r2,r2,17220
   12cd0:	10c00017 	ldw	r3,0(r2)
   12cd4:	defff904 	addi	sp,sp,-28
   12cd8:	dc000015 	stw	r16,0(sp)
   12cdc:	1c000c17 	ldw	r16,48(r3)
   12ce0:	dd400515 	stw	r21,20(sp)
   12ce4:	dd000415 	stw	r20,16(sp)
   12ce8:	dcc00315 	stw	r19,12(sp)
   12cec:	dc800215 	stw	r18,8(sp)
   12cf0:	dc400115 	stw	r17,4(sp)
   12cf4:	dfc00615 	stw	ra,24(sp)
   12cf8:	202b883a 	mov	r21,r4
   12cfc:	2823883a 	mov	r17,r5
   12d00:	3027883a 	mov	r19,r6
   12d04:	3825883a 	mov	r18,r7
   12d08:	1029883a 	mov	r20,r2
   12d0c:	8000021e 	bne	r16,zero,12d18 <__register_exitproc+0x50>
   12d10:	1c000d04 	addi	r16,r3,52
   12d14:	1c000c15 	stw	r16,48(r3)
   12d18:	80800117 	ldw	r2,4(r16)
   12d1c:	00c007c4 	movi	r3,31
   12d20:	1880110e 	bge	r3,r2,12d68 <__register_exitproc+0xa0>
   12d24:	00800034 	movhi	r2,0
   12d28:	10800004 	addi	r2,r2,0
   12d2c:	1000021e 	bne	r2,zero,12d38 <__register_exitproc+0x70>
   12d30:	00bfffc4 	movi	r2,-1
   12d34:	00003106 	br	12dfc <__register_exitproc+0x134>
   12d38:	01002304 	movi	r4,140
   12d3c:	00000000 	call	0 <__alt_mem_memory-0x10000>
   12d40:	1021883a 	mov	r16,r2
   12d44:	103ffa26 	beq	r2,zero,12d30 <_gp+0xffff69ec>
   12d48:	10000115 	stw	zero,4(r2)
   12d4c:	a0800017 	ldw	r2,0(r20)
   12d50:	10c00c17 	ldw	r3,48(r2)
   12d54:	80c00015 	stw	r3,0(r16)
   12d58:	14000c15 	stw	r16,48(r2)
   12d5c:	80002215 	stw	zero,136(r16)
   12d60:	a8001d26 	beq	r21,zero,12dd8 <__register_exitproc+0x110>
   12d64:	00000606 	br	12d80 <__register_exitproc+0xb8>
   12d68:	a8001b26 	beq	r21,zero,12dd8 <__register_exitproc+0x110>
   12d6c:	80802217 	ldw	r2,136(r16)
   12d70:	1000091e 	bne	r2,zero,12d98 <__register_exitproc+0xd0>
   12d74:	00800034 	movhi	r2,0
   12d78:	10800004 	addi	r2,r2,0
   12d7c:	103fec26 	beq	r2,zero,12d30 <_gp+0xffff69ec>
   12d80:	01004204 	movi	r4,264
   12d84:	00000000 	call	0 <__alt_mem_memory-0x10000>
   12d88:	103fe926 	beq	r2,zero,12d30 <_gp+0xffff69ec>
   12d8c:	10004015 	stw	zero,256(r2)
   12d90:	10004115 	stw	zero,260(r2)
   12d94:	80802215 	stw	r2,136(r16)
   12d98:	81400117 	ldw	r5,4(r16)
   12d9c:	01000044 	movi	r4,1
   12da0:	2947883a 	add	r3,r5,r5
   12da4:	18c7883a 	add	r3,r3,r3
   12da8:	10c7883a 	add	r3,r2,r3
   12dac:	1cc00015 	stw	r19,0(r3)
   12db0:	2148983a 	sll	r4,r4,r5
   12db4:	11404017 	ldw	r5,256(r2)
   12db8:	290ab03a 	or	r5,r5,r4
   12dbc:	11404015 	stw	r5,256(r2)
   12dc0:	1c802015 	stw	r18,128(r3)
   12dc4:	00c00084 	movi	r3,2
   12dc8:	a8c0031e 	bne	r21,r3,12dd8 <__register_exitproc+0x110>
   12dcc:	10c04117 	ldw	r3,260(r2)
   12dd0:	1908b03a 	or	r4,r3,r4
   12dd4:	11004115 	stw	r4,260(r2)
   12dd8:	80800117 	ldw	r2,4(r16)
   12ddc:	10c00044 	addi	r3,r2,1
   12de0:	10800084 	addi	r2,r2,2
   12de4:	1085883a 	add	r2,r2,r2
   12de8:	1085883a 	add	r2,r2,r2
   12dec:	80c00115 	stw	r3,4(r16)
   12df0:	80a1883a 	add	r16,r16,r2
   12df4:	84400015 	stw	r17,0(r16)
   12df8:	0005883a 	mov	r2,zero
   12dfc:	dfc00617 	ldw	ra,24(sp)
   12e00:	dd400517 	ldw	r21,20(sp)
   12e04:	dd000417 	ldw	r20,16(sp)
   12e08:	dcc00317 	ldw	r19,12(sp)
   12e0c:	dc800217 	ldw	r18,8(sp)
   12e10:	dc400117 	ldw	r17,4(sp)
   12e14:	dc000017 	ldw	r16,0(sp)
   12e18:	dec00704 	addi	sp,sp,28
   12e1c:	f800283a 	ret

00012e20 <__call_exitprocs>:
   12e20:	defff504 	addi	sp,sp,-44
   12e24:	dd000515 	stw	r20,20(sp)
   12e28:	05000074 	movhi	r20,1
   12e2c:	dc800315 	stw	r18,12(sp)
   12e30:	dfc00a15 	stw	ra,40(sp)
   12e34:	df000915 	stw	fp,36(sp)
   12e38:	ddc00815 	stw	r23,32(sp)
   12e3c:	dd800715 	stw	r22,28(sp)
   12e40:	dd400615 	stw	r21,24(sp)
   12e44:	dcc00415 	stw	r19,16(sp)
   12e48:	dc400215 	stw	r17,8(sp)
   12e4c:	dc000115 	stw	r16,4(sp)
   12e50:	d9000015 	stw	r4,0(sp)
   12e54:	2825883a 	mov	r18,r5
   12e58:	a510d104 	addi	r20,r20,17220
   12e5c:	a4400017 	ldw	r17,0(r20)
   12e60:	8cc00c17 	ldw	r19,48(r17)
   12e64:	8c400c04 	addi	r17,r17,48
   12e68:	98004526 	beq	r19,zero,12f80 <__call_exitprocs+0x160>
   12e6c:	9c000117 	ldw	r16,4(r19)
   12e70:	00900034 	movhi	r2,16384
   12e74:	10bfffc4 	addi	r2,r2,-1
   12e78:	9d402217 	ldw	r21,136(r19)
   12e7c:	85bfffc4 	addi	r22,r16,-1
   12e80:	80a1883a 	add	r16,r16,r2
   12e84:	8421883a 	add	r16,r16,r16
   12e88:	8421883a 	add	r16,r16,r16
   12e8c:	ac2f883a 	add	r23,r21,r16
   12e90:	84000204 	addi	r16,r16,8
   12e94:	9c21883a 	add	r16,r19,r16
   12e98:	b0002716 	blt	r22,zero,12f38 <__call_exitprocs+0x118>
   12e9c:	90000726 	beq	r18,zero,12ebc <__call_exitprocs+0x9c>
   12ea0:	a800041e 	bne	r21,zero,12eb4 <__call_exitprocs+0x94>
   12ea4:	b5bfffc4 	addi	r22,r22,-1
   12ea8:	bdffff04 	addi	r23,r23,-4
   12eac:	843fff04 	addi	r16,r16,-4
   12eb0:	003ff906 	br	12e98 <_gp+0xffff6b54>
   12eb4:	b9002017 	ldw	r4,128(r23)
   12eb8:	913ffa1e 	bne	r18,r4,12ea4 <_gp+0xffff6b60>
   12ebc:	99000117 	ldw	r4,4(r19)
   12ec0:	82000017 	ldw	r8,0(r16)
   12ec4:	213fffc4 	addi	r4,r4,-1
   12ec8:	b100021e 	bne	r22,r4,12ed4 <__call_exitprocs+0xb4>
   12ecc:	9d800115 	stw	r22,4(r19)
   12ed0:	00000106 	br	12ed8 <__call_exitprocs+0xb8>
   12ed4:	80000015 	stw	zero,0(r16)
   12ed8:	403ff226 	beq	r8,zero,12ea4 <_gp+0xffff6b60>
   12edc:	9f000117 	ldw	fp,4(r19)
   12ee0:	a8000526 	beq	r21,zero,12ef8 <__call_exitprocs+0xd8>
   12ee4:	00800044 	movi	r2,1
   12ee8:	1592983a 	sll	r9,r2,r22
   12eec:	a9404017 	ldw	r5,256(r21)
   12ef0:	494a703a 	and	r5,r9,r5
   12ef4:	2800021e 	bne	r5,zero,12f00 <__call_exitprocs+0xe0>
   12ef8:	403ee83a 	callr	r8
   12efc:	00000906 	br	12f24 <__call_exitprocs+0x104>
   12f00:	a9004117 	ldw	r4,260(r21)
   12f04:	4908703a 	and	r4,r9,r4
   12f08:	2000041e 	bne	r4,zero,12f1c <__call_exitprocs+0xfc>
   12f0c:	b9400017 	ldw	r5,0(r23)
   12f10:	d9000017 	ldw	r4,0(sp)
   12f14:	403ee83a 	callr	r8
   12f18:	00000206 	br	12f24 <__call_exitprocs+0x104>
   12f1c:	b9000017 	ldw	r4,0(r23)
   12f20:	403ee83a 	callr	r8
   12f24:	99000117 	ldw	r4,4(r19)
   12f28:	e13fcc1e 	bne	fp,r4,12e5c <_gp+0xffff6b18>
   12f2c:	89000017 	ldw	r4,0(r17)
   12f30:	993fdc26 	beq	r19,r4,12ea4 <_gp+0xffff6b60>
   12f34:	003fc906 	br	12e5c <_gp+0xffff6b18>
   12f38:	00800034 	movhi	r2,0
   12f3c:	10800004 	addi	r2,r2,0
   12f40:	10000f26 	beq	r2,zero,12f80 <__call_exitprocs+0x160>
   12f44:	99400117 	ldw	r5,4(r19)
   12f48:	99000017 	ldw	r4,0(r19)
   12f4c:	2800091e 	bne	r5,zero,12f74 <__call_exitprocs+0x154>
   12f50:	20000826 	beq	r4,zero,12f74 <__call_exitprocs+0x154>
   12f54:	89000015 	stw	r4,0(r17)
   12f58:	a8000226 	beq	r21,zero,12f64 <__call_exitprocs+0x144>
   12f5c:	a809883a 	mov	r4,r21
   12f60:	00000000 	call	0 <__alt_mem_memory-0x10000>
   12f64:	9809883a 	mov	r4,r19
   12f68:	00000000 	call	0 <__alt_mem_memory-0x10000>
   12f6c:	8cc00017 	ldw	r19,0(r17)
   12f70:	003fbd06 	br	12e68 <_gp+0xffff6b24>
   12f74:	9823883a 	mov	r17,r19
   12f78:	2027883a 	mov	r19,r4
   12f7c:	003fba06 	br	12e68 <_gp+0xffff6b24>
   12f80:	dfc00a17 	ldw	ra,40(sp)
   12f84:	df000917 	ldw	fp,36(sp)
   12f88:	ddc00817 	ldw	r23,32(sp)
   12f8c:	dd800717 	ldw	r22,28(sp)
   12f90:	dd400617 	ldw	r21,24(sp)
   12f94:	dd000517 	ldw	r20,20(sp)
   12f98:	dcc00417 	ldw	r19,16(sp)
   12f9c:	dc800317 	ldw	r18,12(sp)
   12fa0:	dc400217 	ldw	r17,8(sp)
   12fa4:	dc000117 	ldw	r16,4(sp)
   12fa8:	dec00b04 	addi	sp,sp,44
   12fac:	f800283a 	ret

00012fb0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12fb0:	defffd04 	addi	sp,sp,-12
   12fb4:	df000215 	stw	fp,8(sp)
   12fb8:	df000204 	addi	fp,sp,8
   12fbc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   12fc0:	0001883a 	nop
   12fc4:	e0bfff17 	ldw	r2,-4(fp)
   12fc8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   12fcc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12fd0:	10000226 	beq	r2,zero,12fdc <_exit+0x2c>
    ALT_SIM_FAIL();
   12fd4:	002af070 	cmpltui	zero,zero,43969
   12fd8:	00000106 	br	12fe0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   12fdc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12fe0:	003fff06 	br	12fe0 <_gp+0xffff6c9c>
