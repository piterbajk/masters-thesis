
Nios_Custom.elf:     file format elf32-littlenios2
Nios_Custom.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010244

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00003530 memsz 0x00003530 flags r-x
    LOAD off    0x00004550 vaddr 0x00013550 paddr 0x00014864 align 2**12
         filesz 0x00001314 memsz 0x00001314 flags rw-
    LOAD off    0x00005b78 vaddr 0x00015b78 paddr 0x00015b78 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003294  00010244  00010244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000078  000134d8  000134d8  000044d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001314  00013550  00014864  00004550  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  00015b78  00015b78  00005b78  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  00015ca0  00015ca0  00005864  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005864  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000740  00000000  00000000  00005888  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a146  00000000  00000000  00005fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000385b  00000000  00000000  0001010e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003d0e  00000000  00000000  00013969  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000e00  00000000  00000000  00017678  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002025  00000000  00000000  00018478  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001770  00000000  00000000  0001a49d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0001bc10  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000330  00000000  00000000  0001bc40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001dd3e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0001dd41  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001dd46  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001dd47  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0001dd48  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0001dd4c  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0001dd50  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  0001dd54  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002d  00000000  00000000  0001dd58  2**0
                  CONTENTS, READONLY
 26 .jdi          000047d9  00000000  00000000  0001dd85  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000357ab  00000000  00000000  0002255e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010244 l    d  .text	00000000 .text
000134d8 l    d  .rodata	00000000 .rodata
00013550 l    d  .rwdata	00000000 .rwdata
00015b78 l    d  .bss	00000000 .bss
00015ca0 l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Nios_Custom_bsp//obj/HAL/src/crt0.o
0001028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000108ec l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00013550 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00011208 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00011370 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000114a4 l     F .text	00000034 alt_dev_reg
00013630 l     O .rwdata	00001060 jtag
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001178c l     F .text	0000020c altera_avalon_jtag_uart_irq
00011998 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00012214 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00012368 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00012394 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00012808 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00012948 l     F .text	0000003c alt_get_errno
00012984 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015b9c g     O .bss	00000004 alt_instruction_exception_handler
00010820 g     F .text	0000001c putchar
000112f4 g     F .text	0000007c alt_main
0001083c g     F .text	00000080 _puts_r
00015ba0 g     O .bss	00000100 alt_irq
00014864 g       *ABS*	00000000 __flash_rwdata_start
000107cc g     F .text	0000004c printf
00015b8c g     O .bss	00000004 altera_avalon_timer_ts_freq
00012da4 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00015b78 g     O .bss	00000004 errno
00015b80 g     O .bss	00000004 alt_argv
0001c838 g       *ABS*	00000000 _gp
000146b8 g     O .rwdata	00000180 alt_fd_list
00010818 g     F .text	00000008 _putchar_r
00012dc8 g     F .text	00000090 alt_find_dev
00013194 g     F .text	00000028 memcpy
000128cc g     F .text	0000007c alt_io_redirect
000134d8 g       *ABS*	00000000 __DTOR_END__
000108bc g     F .text	00000014 puts
00013094 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00011b90 g     F .text	0000021c altera_avalon_jtag_uart_read
00010790 g     F .text	0000003c _printf_r
0001114c g     F .text	00000064 .hidden __udivsi3
00013004 g     F .text	00000090 alt_icache_flush
00014850 g     O .rwdata	00000004 alt_max_fd
00014838 g     O .rwdata	00000004 _global_impure_ptr
00015ca0 g       *ABS*	00000000 __bss_end
00012718 g     F .text	000000f0 alt_iic_isr_register
00012c9c g     F .text	00000108 alt_tick
000126cc g     F .text	0000004c alt_ic_irq_enabled
00012c00 g     F .text	0000009c alt_alarm_stop
00015b90 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
00014690 g     O .rwdata	00000028 alt_dev_null
00012320 g     F .text	00000048 alt_dcache_flush_all
00014864 g       *ABS*	00000000 __ram_rwdata_end
00014848 g     O .rwdata	00000008 alt_dev_list
000113ac g     F .text	000000f8 write
00010fa4 g     F .text	00000058 _putc_r
000120c8 g     F .text	00000020 alt_timestamp_freq
00013550 g       *ABS*	00000000 __ram_rodata_end
000111b0 g     F .text	00000058 .hidden __umodsi3
00015ca0 g       *ABS*	00000000 end
000116cc g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000134d8 g       *ABS*	00000000 __CTOR_LIST__
00019ca0 g       *ABS*	00000000 __alt_stack_pointer
00011dac g     F .text	00000224 altera_avalon_jtag_uart_write
00010958 g     F .text	00000524 ___vfprintf_internal_r
00013314 g     F .text	00000190 __call_exitprocs
00010244 g     F .text	0000004c _start
00015b94 g     O .bss	00000004 _alt_tick_rate
00015b98 g     O .bss	00000004 _alt_nticks
00011510 g     F .text	00000058 alt_sys_init
000131bc g     F .text	00000158 __register_exitproc
00011a38 g     F .text	00000068 altera_avalon_jtag_uart_close
00013550 g       *ABS*	00000000 __ram_rwdata_start
000134d8 g       *ABS*	00000000 __ram_rodata_start
00011568 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00012f60 g     F .text	000000a4 alt_get_fd
00013164 g     F .text	00000030 memcmp
00011628 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015ca0 g       *ABS*	00000000 __alt_stack_base
00011678 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012e58 g     F .text	00000108 alt_find_file
000123d0 g     F .text	000000a4 alt_dev_llist_insert
00010e98 g     F .text	000000b8 __sfvwrite_small_dev
00015b78 g       *ABS*	00000000 __bss_start
00010290 g     F .text	00000500 main
00015b84 g     O .bss	00000004 alt_envp
000115c8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00011fd0 g     F .text	00000078 alt_timestamp_start
00014854 g     O .rwdata	00000004 alt_errno
00010f50 g     F .text	00000054 putc
00011054 g     F .text	00000084 .hidden __divsi3
000134d8 g       *ABS*	00000000 __CTOR_END__
000134d8 g       *ABS*	00000000 __flash_rodata_start
000134d8 g       *ABS*	00000000 __DTOR_LIST__
000114d8 g     F .text	00000038 alt_irq_init
00012b9c g     F .text	00000064 alt_release_fd
00013130 g     F .text	00000014 atexit
00010ffc g     F .text	00000058 _write_r
0001483c g     O .rwdata	00000004 _impure_ptr
00015b7c g     O .bss	00000004 alt_argc
00015b88 g     O .bss	00000004 altera_avalon_timer_ts_base
000124d4 g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00014840 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00012048 g     F .text	00000080 alt_timestamp
00012568 g     F .text	00000050 alt_ic_isr_register
00014864 g       *ABS*	00000000 _edata
00015ca0 g       *ABS*	00000000 _end
00010244 g       *ABS*	00000000 __ram_exceptions_end
00011aa0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00012640 g     F .text	0000008c alt_ic_irq_disable
00010000 g       *ABS*	00000000 __alt_mem_memory
00013144 g     F .text	00000020 exit
000110d8 g     F .text	00000074 .hidden __modsi3
00019ca0 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000134a4 g     F .text	00000034 _exit
000120e8 g     F .text	0000012c alt_alarm_start
000108d0 g     F .text	0000001c strlen
00012a48 g     F .text	00000154 open
00012534 g     F .text	00000034 alt_icache_flush_all
00014858 g     O .rwdata	00000004 alt_priority_mask
000125b8 g     F .text	00000088 alt_ic_irq_enable
00010e7c g     F .text	0000001c __vfprintf_internal
0001485c g     O .rwdata	00000008 alt_alarm_list
00012474 g     F .text	00000060 _do_ctors
00012250 g     F .text	000000d0 close
00011270 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <_gp+0xffff37cc>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08409114 	ori	at,at,580
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_memory-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	00800074 	movhi	r2,1
   10140:	1096e804 	addi	r2,r2,23456
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	00800074 	movhi	r2,1
   10158:	1096e804 	addi	r2,r2,23456
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xffff38f4>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xffff38e8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   101e4:	000531fa 	rdctl	r2,exception
   101e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   101ec:	e0bffd17 	ldw	r2,-12(fp)
   101f0:	10801f0c 	andi	r2,r2,124
   101f4:	1004d0ba 	srli	r2,r2,2
   101f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   101fc:	0005333a 	rdctl	r2,badaddr
   10200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   10204:	d0a4d917 	ldw	r2,-27804(gp)
   10208:	10000726 	beq	r2,zero,10228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   1020c:	d0a4d917 	ldw	r2,-27804(gp)
   10210:	e0fffd17 	ldw	r3,-12(fp)
   10214:	e1bffe17 	ldw	r6,-8(fp)
   10218:	e17fff17 	ldw	r5,-4(fp)
   1021c:	1809883a 	mov	r4,r3
   10220:	103ee83a 	callr	r2
   10224:	00000206 	br	10230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1022c:	0005883a 	mov	r2,zero
}
   10230:	e037883a 	mov	sp,fp
   10234:	dfc00117 	ldw	ra,4(sp)
   10238:	df000017 	ldw	fp,0(sp)
   1023c:	dec00204 	addi	sp,sp,8
   10240:	f800283a 	ret

Disassembly of section .text:

00010244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   1024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   10250:	00bffd16 	blt	zero,r2,10248 <_gp+0xffff3a10>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10254:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10258:	dee72814 	ori	sp,sp,40096
    movhi gp, %hi(_gp)
   1025c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10260:	d6b20e14 	ori	gp,gp,51256
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10268:	1096de14 	ori	r2,r2,23416

    movhi r3, %hi(__bss_end)
   1026c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10270:	18d72814 	ori	r3,r3,23712

    beq r2, r3, 1f
   10274:	10c00326 	beq	r2,r3,10284 <_start+0x40>

0:
    stw zero, (r2)
   10278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10280:	10fffd36 	bltu	r2,r3,10278 <_gp+0xffff3a40>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10284:	00112700 	call	11270 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10288:	00112f40 	call	112f4 <alt_main>

0001028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1028c:	003fff06 	br	1028c <_gp+0xffff3a54>

00010290 <main>:
#define CUSTOM_INSTR_MAC_RESULT 2
#define custom_instr_mac(a,b) __builtin_custom_inii (CUSTOM_INSTR_MAC, a, b)
#define custom_instr_mac_ret() __builtin_custom_inii (CUSTOM_INSTR_MAC_RESULT, 0, 0)

int main()
{
   10290:	def3ee04 	addi	sp,sp,-12360
   10294:	dfcc1115 	stw	ra,12356(sp)
   10298:	df0c1015 	stw	fp,12352(sp)
   1029c:	df0c1004 	addi	fp,sp,12352
	alt_u32 time_start, time_end;
	alt_timestamp_start();
   102a0:	0011fd00 	call	11fd0 <alt_timestamp_start>

	if(alt_timestamp_start() < 0)
   102a4:	0011fd00 	call	11fd0 <alt_timestamp_start>
   102a8:	1000030e 	bge	r2,zero,102b8 <main+0x28>
	{
		printf("Timer not available\n");
   102ac:	01000074 	movhi	r4,1
   102b0:	210d3604 	addi	r4,r4,13528
   102b4:	00108bc0 	call	108bc <puts>
	}
	printf("Timer Frequency %u\n", (alt_u32) alt_timestamp_freq());
   102b8:	00120c80 	call	120c8 <alt_timestamp_freq>
   102bc:	100b883a 	mov	r5,r2
   102c0:	01000074 	movhi	r4,1
   102c4:	210d3b04 	addi	r4,r4,13548
   102c8:	00107cc0 	call	107cc <printf>

	typedef int matrix_t[MAT_SIZE][MAT_SIZE];
	matrix_t a, b, c;

	// Init matrix A (increasing numbers modulo 16)
	for(int i = 0; i < MAT_SIZE; i++)
   102cc:	e033f015 	stw	zero,-12352(fp)
   102d0:	00002206 	br	1035c <main+0xcc>
		for (int j = 0; j < MAT_SIZE; j++)
   102d4:	e033f115 	stw	zero,-12348(fp)
   102d8:	00001a06 	br	10344 <main+0xb4>
			a[i][j] = (i * MAT_SIZE + j) % 0x10;
   102dc:	e0b3f017 	ldw	r2,-12352(fp)
   102e0:	1006917a 	slli	r3,r2,5
   102e4:	e0b3f117 	ldw	r2,-12348(fp)
   102e8:	1887883a 	add	r3,r3,r2
   102ec:	00a00034 	movhi	r2,32768
   102f0:	108003c4 	addi	r2,r2,15
   102f4:	1884703a 	and	r2,r3,r2
   102f8:	1000040e 	bge	r2,zero,1030c <main+0x7c>
   102fc:	10bfffc4 	addi	r2,r2,-1
   10300:	00fffc04 	movi	r3,-16
   10304:	10c4b03a 	or	r2,r2,r3
   10308:	10800044 	addi	r2,r2,1
   1030c:	1009883a 	mov	r4,r2
   10310:	e0b3f017 	ldw	r2,-12352(fp)
   10314:	1006917a 	slli	r3,r2,5
   10318:	e0b3f117 	ldw	r2,-12348(fp)
   1031c:	1885883a 	add	r2,r3,r2
   10320:	1085883a 	add	r2,r2,r2
   10324:	1085883a 	add	r2,r2,r2
   10328:	e0f3f004 	addi	r3,fp,-12352
   1032c:	1885883a 	add	r2,r3,r2
   10330:	10801004 	addi	r2,r2,64
   10334:	11000015 	stw	r4,0(r2)
	typedef int matrix_t[MAT_SIZE][MAT_SIZE];
	matrix_t a, b, c;

	// Init matrix A (increasing numbers modulo 16)
	for(int i = 0; i < MAT_SIZE; i++)
		for (int j = 0; j < MAT_SIZE; j++)
   10338:	e0b3f117 	ldw	r2,-12348(fp)
   1033c:	10800044 	addi	r2,r2,1
   10340:	e0b3f115 	stw	r2,-12348(fp)
   10344:	e0b3f117 	ldw	r2,-12348(fp)
   10348:	10800810 	cmplti	r2,r2,32
   1034c:	103fe31e 	bne	r2,zero,102dc <_gp+0xffff3aa4>

	typedef int matrix_t[MAT_SIZE][MAT_SIZE];
	matrix_t a, b, c;

	// Init matrix A (increasing numbers modulo 16)
	for(int i = 0; i < MAT_SIZE; i++)
   10350:	e0b3f017 	ldw	r2,-12352(fp)
   10354:	10800044 	addi	r2,r2,1
   10358:	e0b3f015 	stw	r2,-12352(fp)
   1035c:	e0b3f017 	ldw	r2,-12352(fp)
   10360:	10800810 	cmplti	r2,r2,32
   10364:	103fdb1e 	bne	r2,zero,102d4 <_gp+0xffff3a9c>
		for (int j = 0; j < MAT_SIZE; j++)
			a[i][j] = (i * MAT_SIZE + j) % 0x10;

	// Init matrix B (identity matrix)
	for(int i = 0; i < MAT_SIZE; i++)
   10368:	e033f215 	stw	zero,-12344(fp)
   1036c:	00001906 	br	103d4 <main+0x144>
		for (int j = 0; j < MAT_SIZE; j++)
   10370:	e033f315 	stw	zero,-12340(fp)
   10374:	00001106 	br	103bc <main+0x12c>
			b[i][j] = (i == j ? 1 : 0);
   10378:	e0f3f217 	ldw	r3,-12344(fp)
   1037c:	e0b3f317 	ldw	r2,-12340(fp)
   10380:	1885003a 	cmpeq	r2,r3,r2
   10384:	10c03fcc 	andi	r3,r2,255
   10388:	e0b3f217 	ldw	r2,-12344(fp)
   1038c:	1008917a 	slli	r4,r2,5
   10390:	e0b3f317 	ldw	r2,-12340(fp)
   10394:	2085883a 	add	r2,r4,r2
   10398:	1085883a 	add	r2,r2,r2
   1039c:	1085883a 	add	r2,r2,r2
   103a0:	e133f004 	addi	r4,fp,-12352
   103a4:	2085883a 	add	r2,r4,r2
   103a8:	10841004 	addi	r2,r2,4160
   103ac:	10c00015 	stw	r3,0(r2)
		for (int j = 0; j < MAT_SIZE; j++)
			a[i][j] = (i * MAT_SIZE + j) % 0x10;

	// Init matrix B (identity matrix)
	for(int i = 0; i < MAT_SIZE; i++)
		for (int j = 0; j < MAT_SIZE; j++)
   103b0:	e0b3f317 	ldw	r2,-12340(fp)
   103b4:	10800044 	addi	r2,r2,1
   103b8:	e0b3f315 	stw	r2,-12340(fp)
   103bc:	e0b3f317 	ldw	r2,-12340(fp)
   103c0:	10800810 	cmplti	r2,r2,32
   103c4:	103fec1e 	bne	r2,zero,10378 <_gp+0xffff3b40>
	for(int i = 0; i < MAT_SIZE; i++)
		for (int j = 0; j < MAT_SIZE; j++)
			a[i][j] = (i * MAT_SIZE + j) % 0x10;

	// Init matrix B (identity matrix)
	for(int i = 0; i < MAT_SIZE; i++)
   103c8:	e0b3f217 	ldw	r2,-12344(fp)
   103cc:	10800044 	addi	r2,r2,1
   103d0:	e0b3f215 	stw	r2,-12344(fp)
   103d4:	e0b3f217 	ldw	r2,-12344(fp)
   103d8:	10800810 	cmplti	r2,r2,32
   103dc:	103fe41e 	bne	r2,zero,10370 <_gp+0xffff3b38>
		for (int j = 0; j < MAT_SIZE; j++)
			b[i][j] = (i == j ? 1 : 0);

	// Standard multiplication
	time_start = alt_timestamp();
   103e0:	00120480 	call	12048 <alt_timestamp>
   103e4:	e0b3fe15 	stw	r2,-12296(fp)
    for (int i = 0; i < MAT_SIZE; i++)
   103e8:	e033f415 	stw	zero,-12336(fp)
   103ec:	00004706 	br	1050c <main+0x27c>
    {
        for (int j = 0; j < MAT_SIZE; j++)
   103f0:	e033f515 	stw	zero,-12332(fp)
   103f4:	00003f06 	br	104f4 <main+0x264>
        {
            c[i][j] = 0;
   103f8:	e0b3f417 	ldw	r2,-12336(fp)
   103fc:	1006917a 	slli	r3,r2,5
   10400:	e0b3f517 	ldw	r2,-12332(fp)
   10404:	1885883a 	add	r2,r3,r2
   10408:	1085883a 	add	r2,r2,r2
   1040c:	1085883a 	add	r2,r2,r2
   10410:	e173f004 	addi	r5,fp,-12352
   10414:	2885883a 	add	r2,r5,r2
   10418:	10881004 	addi	r2,r2,8256
   1041c:	10000015 	stw	zero,0(r2)
            for (int k = 0; k < MAT_SIZE; k++)
   10420:	e033f615 	stw	zero,-12328(fp)
   10424:	00002d06 	br	104dc <main+0x24c>
                c[i][j] += a[i][k] * b[k][j];
   10428:	e0b3f417 	ldw	r2,-12336(fp)
   1042c:	1006917a 	slli	r3,r2,5
   10430:	e0b3f517 	ldw	r2,-12332(fp)
   10434:	1885883a 	add	r2,r3,r2
   10438:	1085883a 	add	r2,r2,r2
   1043c:	1085883a 	add	r2,r2,r2
   10440:	e0f3f004 	addi	r3,fp,-12352
   10444:	1885883a 	add	r2,r3,r2
   10448:	10881004 	addi	r2,r2,8256
   1044c:	10c00017 	ldw	r3,0(r2)
   10450:	e0b3f417 	ldw	r2,-12336(fp)
   10454:	1008917a 	slli	r4,r2,5
   10458:	e0b3f617 	ldw	r2,-12328(fp)
   1045c:	2085883a 	add	r2,r4,r2
   10460:	1085883a 	add	r2,r2,r2
   10464:	1085883a 	add	r2,r2,r2
   10468:	e133f004 	addi	r4,fp,-12352
   1046c:	2085883a 	add	r2,r4,r2
   10470:	10801004 	addi	r2,r2,64
   10474:	11000017 	ldw	r4,0(r2)
   10478:	e0b3f617 	ldw	r2,-12328(fp)
   1047c:	100a917a 	slli	r5,r2,5
   10480:	e0b3f517 	ldw	r2,-12332(fp)
   10484:	2885883a 	add	r2,r5,r2
   10488:	1085883a 	add	r2,r2,r2
   1048c:	1085883a 	add	r2,r2,r2
   10490:	e173f004 	addi	r5,fp,-12352
   10494:	2885883a 	add	r2,r5,r2
   10498:	10841004 	addi	r2,r2,4160
   1049c:	10800017 	ldw	r2,0(r2)
   104a0:	2085383a 	mul	r2,r4,r2
   104a4:	1887883a 	add	r3,r3,r2
   104a8:	e0b3f417 	ldw	r2,-12336(fp)
   104ac:	1008917a 	slli	r4,r2,5
   104b0:	e0b3f517 	ldw	r2,-12332(fp)
   104b4:	2085883a 	add	r2,r4,r2
   104b8:	1085883a 	add	r2,r2,r2
   104bc:	1085883a 	add	r2,r2,r2
   104c0:	e133f004 	addi	r4,fp,-12352
   104c4:	2085883a 	add	r2,r4,r2
   104c8:	10881004 	addi	r2,r2,8256
   104cc:	10c00015 	stw	r3,0(r2)
    for (int i = 0; i < MAT_SIZE; i++)
    {
        for (int j = 0; j < MAT_SIZE; j++)
        {
            c[i][j] = 0;
            for (int k = 0; k < MAT_SIZE; k++)
   104d0:	e0b3f617 	ldw	r2,-12328(fp)
   104d4:	10800044 	addi	r2,r2,1
   104d8:	e0b3f615 	stw	r2,-12328(fp)
   104dc:	e0b3f617 	ldw	r2,-12328(fp)
   104e0:	10800810 	cmplti	r2,r2,32
   104e4:	103fd01e 	bne	r2,zero,10428 <_gp+0xffff3bf0>

	// Standard multiplication
	time_start = alt_timestamp();
    for (int i = 0; i < MAT_SIZE; i++)
    {
        for (int j = 0; j < MAT_SIZE; j++)
   104e8:	e0b3f517 	ldw	r2,-12332(fp)
   104ec:	10800044 	addi	r2,r2,1
   104f0:	e0b3f515 	stw	r2,-12332(fp)
   104f4:	e0b3f517 	ldw	r2,-12332(fp)
   104f8:	10800810 	cmplti	r2,r2,32
   104fc:	103fbe1e 	bne	r2,zero,103f8 <_gp+0xffff3bc0>
		for (int j = 0; j < MAT_SIZE; j++)
			b[i][j] = (i == j ? 1 : 0);

	// Standard multiplication
	time_start = alt_timestamp();
    for (int i = 0; i < MAT_SIZE; i++)
   10500:	e0b3f417 	ldw	r2,-12336(fp)
   10504:	10800044 	addi	r2,r2,1
   10508:	e0b3f415 	stw	r2,-12336(fp)
   1050c:	e0b3f417 	ldw	r2,-12336(fp)
   10510:	10800810 	cmplti	r2,r2,32
   10514:	103fb61e 	bne	r2,zero,103f0 <_gp+0xffff3bb8>
            c[i][j] = 0;
            for (int k = 0; k < MAT_SIZE; k++)
                c[i][j] += a[i][k] * b[k][j];
        }
    }
	time_end = alt_timestamp();
   10518:	00120480 	call	12048 <alt_timestamp>
   1051c:	e0b3ff15 	stw	r2,-12292(fp)
	printf("Ticks   : %d\n", time_end-time_start);
   10520:	e0f3ff17 	ldw	r3,-12292(fp)
   10524:	e0b3fe17 	ldw	r2,-12296(fp)
   10528:	1885c83a 	sub	r2,r3,r2
   1052c:	100b883a 	mov	r5,r2
   10530:	01000074 	movhi	r4,1
   10534:	210d4004 	addi	r4,r4,13568
   10538:	00107cc0 	call	107cc <printf>

    // Print the resulting matrix
    for(int i = 0; i < MAT_SIZE; i++)
   1053c:	e033f715 	stw	zero,-12324(fp)
   10540:	00001b06 	br	105b0 <main+0x320>
    {
        for (int j = 0; j < MAT_SIZE; j++)
   10544:	e033f815 	stw	zero,-12320(fp)
   10548:	00001106 	br	10590 <main+0x300>
           printf("%x  ", c[i][j]);
   1054c:	e0b3f717 	ldw	r2,-12324(fp)
   10550:	1006917a 	slli	r3,r2,5
   10554:	e0b3f817 	ldw	r2,-12320(fp)
   10558:	1885883a 	add	r2,r3,r2
   1055c:	1085883a 	add	r2,r2,r2
   10560:	1085883a 	add	r2,r2,r2
   10564:	e173f004 	addi	r5,fp,-12352
   10568:	2885883a 	add	r2,r5,r2
   1056c:	10881004 	addi	r2,r2,8256
   10570:	10800017 	ldw	r2,0(r2)
   10574:	100b883a 	mov	r5,r2
   10578:	01000074 	movhi	r4,1
   1057c:	210d4404 	addi	r4,r4,13584
   10580:	00107cc0 	call	107cc <printf>
	printf("Ticks   : %d\n", time_end-time_start);

    // Print the resulting matrix
    for(int i = 0; i < MAT_SIZE; i++)
    {
        for (int j = 0; j < MAT_SIZE; j++)
   10584:	e0b3f817 	ldw	r2,-12320(fp)
   10588:	10800044 	addi	r2,r2,1
   1058c:	e0b3f815 	stw	r2,-12320(fp)
   10590:	e0b3f817 	ldw	r2,-12320(fp)
   10594:	10800810 	cmplti	r2,r2,32
   10598:	103fec1e 	bne	r2,zero,1054c <_gp+0xffff3d14>
           printf("%x  ", c[i][j]);

        printf("\n");
   1059c:	01000284 	movi	r4,10
   105a0:	00108200 	call	10820 <putchar>
    }
	time_end = alt_timestamp();
	printf("Ticks   : %d\n", time_end-time_start);

    // Print the resulting matrix
    for(int i = 0; i < MAT_SIZE; i++)
   105a4:	e0b3f717 	ldw	r2,-12324(fp)
   105a8:	10800044 	addi	r2,r2,1
   105ac:	e0b3f715 	stw	r2,-12324(fp)
   105b0:	e0b3f717 	ldw	r2,-12324(fp)
   105b4:	10800810 	cmplti	r2,r2,32
   105b8:	103fe21e 	bne	r2,zero,10544 <_gp+0xffff3d0c>

        printf("\n");
    }

	// Multiplication using custom MAC instructions
	time_start = alt_timestamp();
   105bc:	00120480 	call	12048 <alt_timestamp>
   105c0:	e0b3fe15 	stw	r2,-12296(fp)
	for (int i = 0; i < MAT_SIZE; i++)
   105c4:	e033f915 	stw	zero,-12316(fp)
   105c8:	00003f06 	br	106c8 <main+0x438>
	{
		for (int j = 0; j < MAT_SIZE; j++)
   105cc:	e033fa15 	stw	zero,-12312(fp)
   105d0:	00003706 	br	106b0 <main+0x420>
		{
			c[i][j] = 0;
   105d4:	e0b3f917 	ldw	r2,-12316(fp)
   105d8:	1006917a 	slli	r3,r2,5
   105dc:	e0b3fa17 	ldw	r2,-12312(fp)
   105e0:	1885883a 	add	r2,r3,r2
   105e4:	1085883a 	add	r2,r2,r2
   105e8:	1085883a 	add	r2,r2,r2
   105ec:	e0f3f004 	addi	r3,fp,-12352
   105f0:	1885883a 	add	r2,r3,r2
   105f4:	10881004 	addi	r2,r2,8256
   105f8:	10000015 	stw	zero,0(r2)
			for (int k = 0; k < MAT_SIZE; k++)
   105fc:	e033fb15 	stw	zero,-12308(fp)
   10600:	00001806 	br	10664 <main+0x3d4>
			{
				custom_instr_mac(a[i][k], b[k][j]);
   10604:	e0b3f917 	ldw	r2,-12316(fp)
   10608:	1006917a 	slli	r3,r2,5
   1060c:	e0b3fb17 	ldw	r2,-12308(fp)
   10610:	1885883a 	add	r2,r3,r2
   10614:	1085883a 	add	r2,r2,r2
   10618:	1085883a 	add	r2,r2,r2
   1061c:	e133f004 	addi	r4,fp,-12352
   10620:	2085883a 	add	r2,r4,r2
   10624:	10801004 	addi	r2,r2,64
   10628:	10c00017 	ldw	r3,0(r2)
   1062c:	e0b3fb17 	ldw	r2,-12308(fp)
   10630:	1008917a 	slli	r4,r2,5
   10634:	e0b3fa17 	ldw	r2,-12312(fp)
   10638:	2085883a 	add	r2,r4,r2
   1063c:	1085883a 	add	r2,r2,r2
   10640:	1085883a 	add	r2,r2,r2
   10644:	e173f004 	addi	r5,fp,-12352
   10648:	2885883a 	add	r2,r5,r2
   1064c:	10841004 	addi	r2,r2,4160
   10650:	10800017 	ldw	r2,0(r2)
   10654:	1885c072 	custom	1,r2,r3,r2
	for (int i = 0; i < MAT_SIZE; i++)
	{
		for (int j = 0; j < MAT_SIZE; j++)
		{
			c[i][j] = 0;
			for (int k = 0; k < MAT_SIZE; k++)
   10658:	e0b3fb17 	ldw	r2,-12308(fp)
   1065c:	10800044 	addi	r2,r2,1
   10660:	e0b3fb15 	stw	r2,-12308(fp)
   10664:	e0b3fb17 	ldw	r2,-12308(fp)
   10668:	10800810 	cmplti	r2,r2,32
   1066c:	103fe51e 	bne	r2,zero,10604 <_gp+0xffff3dcc>
			{
				custom_instr_mac(a[i][k], b[k][j]);
			}
			c[i][j] = custom_instr_mac_ret();
   10670:	0005883a 	mov	r2,zero
   10674:	0007883a 	mov	r3,zero
   10678:	10c7c0b2 	custom	2,r3,r2,r3
   1067c:	e0b3f917 	ldw	r2,-12316(fp)
   10680:	1008917a 	slli	r4,r2,5
   10684:	e0b3fa17 	ldw	r2,-12312(fp)
   10688:	2085883a 	add	r2,r4,r2
   1068c:	1085883a 	add	r2,r2,r2
   10690:	1085883a 	add	r2,r2,r2
   10694:	e133f004 	addi	r4,fp,-12352
   10698:	2085883a 	add	r2,r4,r2
   1069c:	10881004 	addi	r2,r2,8256
   106a0:	10c00015 	stw	r3,0(r2)

	// Multiplication using custom MAC instructions
	time_start = alt_timestamp();
	for (int i = 0; i < MAT_SIZE; i++)
	{
		for (int j = 0; j < MAT_SIZE; j++)
   106a4:	e0b3fa17 	ldw	r2,-12312(fp)
   106a8:	10800044 	addi	r2,r2,1
   106ac:	e0b3fa15 	stw	r2,-12312(fp)
   106b0:	e0b3fa17 	ldw	r2,-12312(fp)
   106b4:	10800810 	cmplti	r2,r2,32
   106b8:	103fc61e 	bne	r2,zero,105d4 <_gp+0xffff3d9c>
        printf("\n");
    }

	// Multiplication using custom MAC instructions
	time_start = alt_timestamp();
	for (int i = 0; i < MAT_SIZE; i++)
   106bc:	e0b3f917 	ldw	r2,-12316(fp)
   106c0:	10800044 	addi	r2,r2,1
   106c4:	e0b3f915 	stw	r2,-12316(fp)
   106c8:	e0b3f917 	ldw	r2,-12316(fp)
   106cc:	10800810 	cmplti	r2,r2,32
   106d0:	103fbe1e 	bne	r2,zero,105cc <_gp+0xffff3d94>
				custom_instr_mac(a[i][k], b[k][j]);
			}
			c[i][j] = custom_instr_mac_ret();
		}
	}
	time_end = alt_timestamp();
   106d4:	00120480 	call	12048 <alt_timestamp>
   106d8:	e0b3ff15 	stw	r2,-12292(fp)
	printf("Ticks CI : %d\n", time_end-time_start);
   106dc:	e0f3ff17 	ldw	r3,-12292(fp)
   106e0:	e0b3fe17 	ldw	r2,-12296(fp)
   106e4:	1885c83a 	sub	r2,r3,r2
   106e8:	100b883a 	mov	r5,r2
   106ec:	01000074 	movhi	r4,1
   106f0:	210d4604 	addi	r4,r4,13592
   106f4:	00107cc0 	call	107cc <printf>

    // Print the resulting matrix
    for(int i = 0; i < MAT_SIZE; i++)
   106f8:	e033fc15 	stw	zero,-12304(fp)
   106fc:	00001b06 	br	1076c <main+0x4dc>
    {
        for (int j = 0; j < MAT_SIZE; j++)
   10700:	e033fd15 	stw	zero,-12300(fp)
   10704:	00001106 	br	1074c <main+0x4bc>
           printf("%x  ", c[i][j]);
   10708:	e0b3fc17 	ldw	r2,-12304(fp)
   1070c:	1006917a 	slli	r3,r2,5
   10710:	e0b3fd17 	ldw	r2,-12300(fp)
   10714:	1885883a 	add	r2,r3,r2
   10718:	1085883a 	add	r2,r2,r2
   1071c:	1085883a 	add	r2,r2,r2
   10720:	e173f004 	addi	r5,fp,-12352
   10724:	2885883a 	add	r2,r5,r2
   10728:	10881004 	addi	r2,r2,8256
   1072c:	10800017 	ldw	r2,0(r2)
   10730:	100b883a 	mov	r5,r2
   10734:	01000074 	movhi	r4,1
   10738:	210d4404 	addi	r4,r4,13584
   1073c:	00107cc0 	call	107cc <printf>
	printf("Ticks CI : %d\n", time_end-time_start);

    // Print the resulting matrix
    for(int i = 0; i < MAT_SIZE; i++)
    {
        for (int j = 0; j < MAT_SIZE; j++)
   10740:	e0b3fd17 	ldw	r2,-12300(fp)
   10744:	10800044 	addi	r2,r2,1
   10748:	e0b3fd15 	stw	r2,-12300(fp)
   1074c:	e0b3fd17 	ldw	r2,-12300(fp)
   10750:	10800810 	cmplti	r2,r2,32
   10754:	103fec1e 	bne	r2,zero,10708 <_gp+0xffff3ed0>
           printf("%x  ", c[i][j]);

        printf("\n");
   10758:	01000284 	movi	r4,10
   1075c:	00108200 	call	10820 <putchar>
	}
	time_end = alt_timestamp();
	printf("Ticks CI : %d\n", time_end-time_start);

    // Print the resulting matrix
    for(int i = 0; i < MAT_SIZE; i++)
   10760:	e0b3fc17 	ldw	r2,-12304(fp)
   10764:	10800044 	addi	r2,r2,1
   10768:	e0b3fc15 	stw	r2,-12304(fp)
   1076c:	e0b3fc17 	ldw	r2,-12304(fp)
   10770:	10800810 	cmplti	r2,r2,32
   10774:	103fe21e 	bne	r2,zero,10700 <_gp+0xffff3ec8>
           printf("%x  ", c[i][j]);

        printf("\n");
    }

	return 0;
   10778:	0005883a 	mov	r2,zero
}
   1077c:	e037883a 	mov	sp,fp
   10780:	dfc00117 	ldw	ra,4(sp)
   10784:	df000017 	ldw	fp,0(sp)
   10788:	dec00204 	addi	sp,sp,8
   1078c:	f800283a 	ret

00010790 <_printf_r>:
   10790:	defffd04 	addi	sp,sp,-12
   10794:	dfc00015 	stw	ra,0(sp)
   10798:	d9800115 	stw	r6,4(sp)
   1079c:	d9c00215 	stw	r7,8(sp)
   107a0:	20c00217 	ldw	r3,8(r4)
   107a4:	01800074 	movhi	r6,1
   107a8:	3183a604 	addi	r6,r6,3736
   107ac:	19800115 	stw	r6,4(r3)
   107b0:	280d883a 	mov	r6,r5
   107b4:	21400217 	ldw	r5,8(r4)
   107b8:	d9c00104 	addi	r7,sp,4
   107bc:	00109580 	call	10958 <___vfprintf_internal_r>
   107c0:	dfc00017 	ldw	ra,0(sp)
   107c4:	dec00304 	addi	sp,sp,12
   107c8:	f800283a 	ret

000107cc <printf>:
   107cc:	defffc04 	addi	sp,sp,-16
   107d0:	dfc00015 	stw	ra,0(sp)
   107d4:	d9400115 	stw	r5,4(sp)
   107d8:	d9800215 	stw	r6,8(sp)
   107dc:	d9c00315 	stw	r7,12(sp)
   107e0:	00800074 	movhi	r2,1
   107e4:	10920f04 	addi	r2,r2,18492
   107e8:	10800017 	ldw	r2,0(r2)
   107ec:	01400074 	movhi	r5,1
   107f0:	2943a604 	addi	r5,r5,3736
   107f4:	10c00217 	ldw	r3,8(r2)
   107f8:	d9800104 	addi	r6,sp,4
   107fc:	19400115 	stw	r5,4(r3)
   10800:	200b883a 	mov	r5,r4
   10804:	11000217 	ldw	r4,8(r2)
   10808:	0010e7c0 	call	10e7c <__vfprintf_internal>
   1080c:	dfc00017 	ldw	ra,0(sp)
   10810:	dec00404 	addi	sp,sp,16
   10814:	f800283a 	ret

00010818 <_putchar_r>:
   10818:	21800217 	ldw	r6,8(r4)
   1081c:	0010fa41 	jmpi	10fa4 <_putc_r>

00010820 <putchar>:
   10820:	00800074 	movhi	r2,1
   10824:	10920f04 	addi	r2,r2,18492
   10828:	10800017 	ldw	r2,0(r2)
   1082c:	200b883a 	mov	r5,r4
   10830:	11800217 	ldw	r6,8(r2)
   10834:	1009883a 	mov	r4,r2
   10838:	0010fa41 	jmpi	10fa4 <_putc_r>

0001083c <_puts_r>:
   1083c:	defffd04 	addi	sp,sp,-12
   10840:	dc000015 	stw	r16,0(sp)
   10844:	2021883a 	mov	r16,r4
   10848:	2809883a 	mov	r4,r5
   1084c:	dfc00215 	stw	ra,8(sp)
   10850:	dc400115 	stw	r17,4(sp)
   10854:	2823883a 	mov	r17,r5
   10858:	00108d00 	call	108d0 <strlen>
   1085c:	81400217 	ldw	r5,8(r16)
   10860:	01000074 	movhi	r4,1
   10864:	2103a604 	addi	r4,r4,3736
   10868:	29000115 	stw	r4,4(r5)
   1086c:	100f883a 	mov	r7,r2
   10870:	880d883a 	mov	r6,r17
   10874:	8009883a 	mov	r4,r16
   10878:	0010e980 	call	10e98 <__sfvwrite_small_dev>
   1087c:	00ffffc4 	movi	r3,-1
   10880:	10c00926 	beq	r2,r3,108a8 <_puts_r+0x6c>
   10884:	81400217 	ldw	r5,8(r16)
   10888:	01800074 	movhi	r6,1
   1088c:	01c00044 	movi	r7,1
   10890:	28800117 	ldw	r2,4(r5)
   10894:	318d4a04 	addi	r6,r6,13608
   10898:	8009883a 	mov	r4,r16
   1089c:	103ee83a 	callr	r2
   108a0:	10bfffe0 	cmpeqi	r2,r2,-1
   108a4:	0085c83a 	sub	r2,zero,r2
   108a8:	dfc00217 	ldw	ra,8(sp)
   108ac:	dc400117 	ldw	r17,4(sp)
   108b0:	dc000017 	ldw	r16,0(sp)
   108b4:	dec00304 	addi	sp,sp,12
   108b8:	f800283a 	ret

000108bc <puts>:
   108bc:	00800074 	movhi	r2,1
   108c0:	10920f04 	addi	r2,r2,18492
   108c4:	200b883a 	mov	r5,r4
   108c8:	11000017 	ldw	r4,0(r2)
   108cc:	001083c1 	jmpi	1083c <_puts_r>

000108d0 <strlen>:
   108d0:	2005883a 	mov	r2,r4
   108d4:	10c00007 	ldb	r3,0(r2)
   108d8:	18000226 	beq	r3,zero,108e4 <strlen+0x14>
   108dc:	10800044 	addi	r2,r2,1
   108e0:	003ffc06 	br	108d4 <_gp+0xffff409c>
   108e4:	1105c83a 	sub	r2,r2,r4
   108e8:	f800283a 	ret

000108ec <print_repeat>:
   108ec:	defffb04 	addi	sp,sp,-20
   108f0:	dc800315 	stw	r18,12(sp)
   108f4:	dc400215 	stw	r17,8(sp)
   108f8:	dc000115 	stw	r16,4(sp)
   108fc:	dfc00415 	stw	ra,16(sp)
   10900:	2025883a 	mov	r18,r4
   10904:	2823883a 	mov	r17,r5
   10908:	d9800005 	stb	r6,0(sp)
   1090c:	3821883a 	mov	r16,r7
   10910:	04000a0e 	bge	zero,r16,1093c <print_repeat+0x50>
   10914:	88800117 	ldw	r2,4(r17)
   10918:	01c00044 	movi	r7,1
   1091c:	d80d883a 	mov	r6,sp
   10920:	880b883a 	mov	r5,r17
   10924:	9009883a 	mov	r4,r18
   10928:	103ee83a 	callr	r2
   1092c:	843fffc4 	addi	r16,r16,-1
   10930:	103ff726 	beq	r2,zero,10910 <_gp+0xffff40d8>
   10934:	00bfffc4 	movi	r2,-1
   10938:	00000106 	br	10940 <print_repeat+0x54>
   1093c:	0005883a 	mov	r2,zero
   10940:	dfc00417 	ldw	ra,16(sp)
   10944:	dc800317 	ldw	r18,12(sp)
   10948:	dc400217 	ldw	r17,8(sp)
   1094c:	dc000117 	ldw	r16,4(sp)
   10950:	dec00504 	addi	sp,sp,20
   10954:	f800283a 	ret

00010958 <___vfprintf_internal_r>:
   10958:	deffe504 	addi	sp,sp,-108
   1095c:	d8c00804 	addi	r3,sp,32
   10960:	df001915 	stw	fp,100(sp)
   10964:	ddc01815 	stw	r23,96(sp)
   10968:	dd801715 	stw	r22,92(sp)
   1096c:	dd401615 	stw	r21,88(sp)
   10970:	dd001515 	stw	r20,84(sp)
   10974:	dcc01415 	stw	r19,80(sp)
   10978:	dc801315 	stw	r18,76(sp)
   1097c:	dc401215 	stw	r17,72(sp)
   10980:	dc001115 	stw	r16,68(sp)
   10984:	dfc01a15 	stw	ra,104(sp)
   10988:	2027883a 	mov	r19,r4
   1098c:	2839883a 	mov	fp,r5
   10990:	382d883a 	mov	r22,r7
   10994:	d9800f15 	stw	r6,60(sp)
   10998:	0021883a 	mov	r16,zero
   1099c:	d8000e15 	stw	zero,56(sp)
   109a0:	002f883a 	mov	r23,zero
   109a4:	002b883a 	mov	r21,zero
   109a8:	0025883a 	mov	r18,zero
   109ac:	0023883a 	mov	r17,zero
   109b0:	d8000c15 	stw	zero,48(sp)
   109b4:	d8000b15 	stw	zero,44(sp)
   109b8:	0029883a 	mov	r20,zero
   109bc:	d8c00915 	stw	r3,36(sp)
   109c0:	d8c00f17 	ldw	r3,60(sp)
   109c4:	19000003 	ldbu	r4,0(r3)
   109c8:	20803fcc 	andi	r2,r4,255
   109cc:	1080201c 	xori	r2,r2,128
   109d0:	10bfe004 	addi	r2,r2,-128
   109d4:	10011c26 	beq	r2,zero,10e48 <___vfprintf_internal_r+0x4f0>
   109d8:	00c00044 	movi	r3,1
   109dc:	a0c01426 	beq	r20,r3,10a30 <___vfprintf_internal_r+0xd8>
   109e0:	1d000216 	blt	r3,r20,109ec <___vfprintf_internal_r+0x94>
   109e4:	a0000626 	beq	r20,zero,10a00 <___vfprintf_internal_r+0xa8>
   109e8:	00011306 	br	10e38 <___vfprintf_internal_r+0x4e0>
   109ec:	01400084 	movi	r5,2
   109f0:	a1401d26 	beq	r20,r5,10a68 <___vfprintf_internal_r+0x110>
   109f4:	014000c4 	movi	r5,3
   109f8:	a1402926 	beq	r20,r5,10aa0 <___vfprintf_internal_r+0x148>
   109fc:	00010e06 	br	10e38 <___vfprintf_internal_r+0x4e0>
   10a00:	01400944 	movi	r5,37
   10a04:	1140fb26 	beq	r2,r5,10df4 <___vfprintf_internal_r+0x49c>
   10a08:	e0800117 	ldw	r2,4(fp)
   10a0c:	d9000005 	stb	r4,0(sp)
   10a10:	01c00044 	movi	r7,1
   10a14:	d80d883a 	mov	r6,sp
   10a18:	e00b883a 	mov	r5,fp
   10a1c:	9809883a 	mov	r4,r19
   10a20:	103ee83a 	callr	r2
   10a24:	1000d61e 	bne	r2,zero,10d80 <___vfprintf_internal_r+0x428>
   10a28:	84000044 	addi	r16,r16,1
   10a2c:	00010206 	br	10e38 <___vfprintf_internal_r+0x4e0>
   10a30:	01400c04 	movi	r5,48
   10a34:	1140f826 	beq	r2,r5,10e18 <___vfprintf_internal_r+0x4c0>
   10a38:	01400944 	movi	r5,37
   10a3c:	11400a1e 	bne	r2,r5,10a68 <___vfprintf_internal_r+0x110>
   10a40:	d8800005 	stb	r2,0(sp)
   10a44:	e0800117 	ldw	r2,4(fp)
   10a48:	a00f883a 	mov	r7,r20
   10a4c:	d80d883a 	mov	r6,sp
   10a50:	e00b883a 	mov	r5,fp
   10a54:	9809883a 	mov	r4,r19
   10a58:	103ee83a 	callr	r2
   10a5c:	1000c81e 	bne	r2,zero,10d80 <___vfprintf_internal_r+0x428>
   10a60:	84000044 	addi	r16,r16,1
   10a64:	0000f306 	br	10e34 <___vfprintf_internal_r+0x4dc>
   10a68:	217ff404 	addi	r5,r4,-48
   10a6c:	29403fcc 	andi	r5,r5,255
   10a70:	00c00244 	movi	r3,9
   10a74:	19400736 	bltu	r3,r5,10a94 <___vfprintf_internal_r+0x13c>
   10a78:	00bfffc4 	movi	r2,-1
   10a7c:	88800226 	beq	r17,r2,10a88 <___vfprintf_internal_r+0x130>
   10a80:	8c4002a4 	muli	r17,r17,10
   10a84:	00000106 	br	10a8c <___vfprintf_internal_r+0x134>
   10a88:	0023883a 	mov	r17,zero
   10a8c:	2c63883a 	add	r17,r5,r17
   10a90:	0000e206 	br	10e1c <___vfprintf_internal_r+0x4c4>
   10a94:	01400b84 	movi	r5,46
   10a98:	1140e426 	beq	r2,r5,10e2c <___vfprintf_internal_r+0x4d4>
   10a9c:	05000084 	movi	r20,2
   10aa0:	213ff404 	addi	r4,r4,-48
   10aa4:	21003fcc 	andi	r4,r4,255
   10aa8:	00c00244 	movi	r3,9
   10aac:	19000736 	bltu	r3,r4,10acc <___vfprintf_internal_r+0x174>
   10ab0:	00bfffc4 	movi	r2,-1
   10ab4:	90800226 	beq	r18,r2,10ac0 <___vfprintf_internal_r+0x168>
   10ab8:	948002a4 	muli	r18,r18,10
   10abc:	00000106 	br	10ac4 <___vfprintf_internal_r+0x16c>
   10ac0:	0025883a 	mov	r18,zero
   10ac4:	24a5883a 	add	r18,r4,r18
   10ac8:	0000db06 	br	10e38 <___vfprintf_internal_r+0x4e0>
   10acc:	00c01b04 	movi	r3,108
   10ad0:	10c0d426 	beq	r2,r3,10e24 <___vfprintf_internal_r+0x4cc>
   10ad4:	013fffc4 	movi	r4,-1
   10ad8:	91000226 	beq	r18,r4,10ae4 <___vfprintf_internal_r+0x18c>
   10adc:	d8000b15 	stw	zero,44(sp)
   10ae0:	00000106 	br	10ae8 <___vfprintf_internal_r+0x190>
   10ae4:	04800044 	movi	r18,1
   10ae8:	01001a44 	movi	r4,105
   10aec:	11001626 	beq	r2,r4,10b48 <___vfprintf_internal_r+0x1f0>
   10af0:	20800916 	blt	r4,r2,10b18 <___vfprintf_internal_r+0x1c0>
   10af4:	010018c4 	movi	r4,99
   10af8:	11008a26 	beq	r2,r4,10d24 <___vfprintf_internal_r+0x3cc>
   10afc:	01001904 	movi	r4,100
   10b00:	11001126 	beq	r2,r4,10b48 <___vfprintf_internal_r+0x1f0>
   10b04:	01001604 	movi	r4,88
   10b08:	1100ca1e 	bne	r2,r4,10e34 <___vfprintf_internal_r+0x4dc>
   10b0c:	00c00044 	movi	r3,1
   10b10:	d8c00e15 	stw	r3,56(sp)
   10b14:	00001406 	br	10b68 <___vfprintf_internal_r+0x210>
   10b18:	01001cc4 	movi	r4,115
   10b1c:	11009a26 	beq	r2,r4,10d88 <___vfprintf_internal_r+0x430>
   10b20:	20800416 	blt	r4,r2,10b34 <___vfprintf_internal_r+0x1dc>
   10b24:	01001bc4 	movi	r4,111
   10b28:	1100c21e 	bne	r2,r4,10e34 <___vfprintf_internal_r+0x4dc>
   10b2c:	05400204 	movi	r21,8
   10b30:	00000e06 	br	10b6c <___vfprintf_internal_r+0x214>
   10b34:	01001d44 	movi	r4,117
   10b38:	11000c26 	beq	r2,r4,10b6c <___vfprintf_internal_r+0x214>
   10b3c:	01001e04 	movi	r4,120
   10b40:	11000926 	beq	r2,r4,10b68 <___vfprintf_internal_r+0x210>
   10b44:	0000bb06 	br	10e34 <___vfprintf_internal_r+0x4dc>
   10b48:	b5000104 	addi	r20,r22,4
   10b4c:	b8000726 	beq	r23,zero,10b6c <___vfprintf_internal_r+0x214>
   10b50:	dd000d15 	stw	r20,52(sp)
   10b54:	b5800017 	ldw	r22,0(r22)
   10b58:	b000080e 	bge	r22,zero,10b7c <___vfprintf_internal_r+0x224>
   10b5c:	05adc83a 	sub	r22,zero,r22
   10b60:	02800044 	movi	r10,1
   10b64:	00000606 	br	10b80 <___vfprintf_internal_r+0x228>
   10b68:	05400404 	movi	r21,16
   10b6c:	b0c00104 	addi	r3,r22,4
   10b70:	d8c00d15 	stw	r3,52(sp)
   10b74:	b5800017 	ldw	r22,0(r22)
   10b78:	002f883a 	mov	r23,zero
   10b7c:	0015883a 	mov	r10,zero
   10b80:	d829883a 	mov	r20,sp
   10b84:	b0001426 	beq	r22,zero,10bd8 <___vfprintf_internal_r+0x280>
   10b88:	b009883a 	mov	r4,r22
   10b8c:	a80b883a 	mov	r5,r21
   10b90:	da801015 	stw	r10,64(sp)
   10b94:	001114c0 	call	1114c <__udivsi3>
   10b98:	1549383a 	mul	r4,r2,r21
   10b9c:	00c00244 	movi	r3,9
   10ba0:	da801017 	ldw	r10,64(sp)
   10ba4:	b12dc83a 	sub	r22,r22,r4
   10ba8:	1d800216 	blt	r3,r22,10bb4 <___vfprintf_internal_r+0x25c>
   10bac:	b5800c04 	addi	r22,r22,48
   10bb0:	00000506 	br	10bc8 <___vfprintf_internal_r+0x270>
   10bb4:	d8c00e17 	ldw	r3,56(sp)
   10bb8:	18000226 	beq	r3,zero,10bc4 <___vfprintf_internal_r+0x26c>
   10bbc:	b5800dc4 	addi	r22,r22,55
   10bc0:	00000106 	br	10bc8 <___vfprintf_internal_r+0x270>
   10bc4:	b58015c4 	addi	r22,r22,87
   10bc8:	a5800005 	stb	r22,0(r20)
   10bcc:	a5000044 	addi	r20,r20,1
   10bd0:	102d883a 	mov	r22,r2
   10bd4:	003feb06 	br	10b84 <_gp+0xffff434c>
   10bd8:	a6c7c83a 	sub	r3,r20,sp
   10bdc:	d8c00a15 	stw	r3,40(sp)
   10be0:	90c5c83a 	sub	r2,r18,r3
   10be4:	00800a0e 	bge	zero,r2,10c10 <___vfprintf_internal_r+0x2b8>
   10be8:	a085883a 	add	r2,r20,r2
   10bec:	01400c04 	movi	r5,48
   10bf0:	d8c00917 	ldw	r3,36(sp)
   10bf4:	a009883a 	mov	r4,r20
   10bf8:	a0c0032e 	bgeu	r20,r3,10c08 <___vfprintf_internal_r+0x2b0>
   10bfc:	a5000044 	addi	r20,r20,1
   10c00:	21400005 	stb	r5,0(r4)
   10c04:	a0bffa1e 	bne	r20,r2,10bf0 <_gp+0xffff43b8>
   10c08:	a6c7c83a 	sub	r3,r20,sp
   10c0c:	d8c00a15 	stw	r3,40(sp)
   10c10:	d8c00a17 	ldw	r3,40(sp)
   10c14:	50d3883a 	add	r9,r10,r3
   10c18:	d8c00b17 	ldw	r3,44(sp)
   10c1c:	8a6dc83a 	sub	r22,r17,r9
   10c20:	18001726 	beq	r3,zero,10c80 <___vfprintf_internal_r+0x328>
   10c24:	50000a26 	beq	r10,zero,10c50 <___vfprintf_internal_r+0x2f8>
   10c28:	00800b44 	movi	r2,45
   10c2c:	d8800805 	stb	r2,32(sp)
   10c30:	e0800117 	ldw	r2,4(fp)
   10c34:	01c00044 	movi	r7,1
   10c38:	d9800804 	addi	r6,sp,32
   10c3c:	e00b883a 	mov	r5,fp
   10c40:	9809883a 	mov	r4,r19
   10c44:	103ee83a 	callr	r2
   10c48:	10004d1e 	bne	r2,zero,10d80 <___vfprintf_internal_r+0x428>
   10c4c:	84000044 	addi	r16,r16,1
   10c50:	0580070e 	bge	zero,r22,10c70 <___vfprintf_internal_r+0x318>
   10c54:	b00f883a 	mov	r7,r22
   10c58:	01800c04 	movi	r6,48
   10c5c:	e00b883a 	mov	r5,fp
   10c60:	9809883a 	mov	r4,r19
   10c64:	00108ec0 	call	108ec <print_repeat>
   10c68:	1000451e 	bne	r2,zero,10d80 <___vfprintf_internal_r+0x428>
   10c6c:	85a1883a 	add	r16,r16,r22
   10c70:	d8c00a17 	ldw	r3,40(sp)
   10c74:	a013883a 	mov	r9,r20
   10c78:	1d2dc83a 	sub	r22,r3,r20
   10c7c:	00002206 	br	10d08 <___vfprintf_internal_r+0x3b0>
   10c80:	0580090e 	bge	zero,r22,10ca8 <___vfprintf_internal_r+0x350>
   10c84:	b00f883a 	mov	r7,r22
   10c88:	01800804 	movi	r6,32
   10c8c:	e00b883a 	mov	r5,fp
   10c90:	9809883a 	mov	r4,r19
   10c94:	da801015 	stw	r10,64(sp)
   10c98:	00108ec0 	call	108ec <print_repeat>
   10c9c:	da801017 	ldw	r10,64(sp)
   10ca0:	1000371e 	bne	r2,zero,10d80 <___vfprintf_internal_r+0x428>
   10ca4:	85a1883a 	add	r16,r16,r22
   10ca8:	503ff126 	beq	r10,zero,10c70 <_gp+0xffff4438>
   10cac:	00800b44 	movi	r2,45
   10cb0:	d8800805 	stb	r2,32(sp)
   10cb4:	e0800117 	ldw	r2,4(fp)
   10cb8:	01c00044 	movi	r7,1
   10cbc:	d9800804 	addi	r6,sp,32
   10cc0:	e00b883a 	mov	r5,fp
   10cc4:	9809883a 	mov	r4,r19
   10cc8:	103ee83a 	callr	r2
   10ccc:	10002c1e 	bne	r2,zero,10d80 <___vfprintf_internal_r+0x428>
   10cd0:	84000044 	addi	r16,r16,1
   10cd4:	003fe606 	br	10c70 <_gp+0xffff4438>
   10cd8:	4a7fffc4 	addi	r9,r9,-1
   10cdc:	48800003 	ldbu	r2,0(r9)
   10ce0:	01c00044 	movi	r7,1
   10ce4:	d9800804 	addi	r6,sp,32
   10ce8:	d8800805 	stb	r2,32(sp)
   10cec:	e0800117 	ldw	r2,4(fp)
   10cf0:	e00b883a 	mov	r5,fp
   10cf4:	da401015 	stw	r9,64(sp)
   10cf8:	9809883a 	mov	r4,r19
   10cfc:	103ee83a 	callr	r2
   10d00:	da401017 	ldw	r9,64(sp)
   10d04:	10001e1e 	bne	r2,zero,10d80 <___vfprintf_internal_r+0x428>
   10d08:	8245c83a 	sub	r2,r16,r9
   10d0c:	4d89883a 	add	r4,r9,r22
   10d10:	a085883a 	add	r2,r20,r2
   10d14:	013ff016 	blt	zero,r4,10cd8 <_gp+0xffff44a0>
   10d18:	1021883a 	mov	r16,r2
   10d1c:	dd800d17 	ldw	r22,52(sp)
   10d20:	00004406 	br	10e34 <___vfprintf_internal_r+0x4dc>
   10d24:	00800044 	movi	r2,1
   10d28:	1440080e 	bge	r2,r17,10d4c <___vfprintf_internal_r+0x3f4>
   10d2c:	8d3fffc4 	addi	r20,r17,-1
   10d30:	a00f883a 	mov	r7,r20
   10d34:	01800804 	movi	r6,32
   10d38:	e00b883a 	mov	r5,fp
   10d3c:	9809883a 	mov	r4,r19
   10d40:	00108ec0 	call	108ec <print_repeat>
   10d44:	10000e1e 	bne	r2,zero,10d80 <___vfprintf_internal_r+0x428>
   10d48:	8521883a 	add	r16,r16,r20
   10d4c:	b0800017 	ldw	r2,0(r22)
   10d50:	01c00044 	movi	r7,1
   10d54:	d80d883a 	mov	r6,sp
   10d58:	d8800005 	stb	r2,0(sp)
   10d5c:	e0800117 	ldw	r2,4(fp)
   10d60:	e00b883a 	mov	r5,fp
   10d64:	9809883a 	mov	r4,r19
   10d68:	b5000104 	addi	r20,r22,4
   10d6c:	103ee83a 	callr	r2
   10d70:	1000031e 	bne	r2,zero,10d80 <___vfprintf_internal_r+0x428>
   10d74:	84000044 	addi	r16,r16,1
   10d78:	a02d883a 	mov	r22,r20
   10d7c:	00002d06 	br	10e34 <___vfprintf_internal_r+0x4dc>
   10d80:	00bfffc4 	movi	r2,-1
   10d84:	00003106 	br	10e4c <___vfprintf_internal_r+0x4f4>
   10d88:	b5000017 	ldw	r20,0(r22)
   10d8c:	b0c00104 	addi	r3,r22,4
   10d90:	d8c00a15 	stw	r3,40(sp)
   10d94:	a009883a 	mov	r4,r20
   10d98:	00108d00 	call	108d0 <strlen>
   10d9c:	8893c83a 	sub	r9,r17,r2
   10da0:	102d883a 	mov	r22,r2
   10da4:	0240090e 	bge	zero,r9,10dcc <___vfprintf_internal_r+0x474>
   10da8:	480f883a 	mov	r7,r9
   10dac:	01800804 	movi	r6,32
   10db0:	e00b883a 	mov	r5,fp
   10db4:	9809883a 	mov	r4,r19
   10db8:	da401015 	stw	r9,64(sp)
   10dbc:	00108ec0 	call	108ec <print_repeat>
   10dc0:	da401017 	ldw	r9,64(sp)
   10dc4:	103fee1e 	bne	r2,zero,10d80 <_gp+0xffff4548>
   10dc8:	8261883a 	add	r16,r16,r9
   10dcc:	e0800117 	ldw	r2,4(fp)
   10dd0:	b00f883a 	mov	r7,r22
   10dd4:	a00d883a 	mov	r6,r20
   10dd8:	e00b883a 	mov	r5,fp
   10ddc:	9809883a 	mov	r4,r19
   10de0:	103ee83a 	callr	r2
   10de4:	103fe61e 	bne	r2,zero,10d80 <_gp+0xffff4548>
   10de8:	85a1883a 	add	r16,r16,r22
   10dec:	dd800a17 	ldw	r22,40(sp)
   10df0:	00001006 	br	10e34 <___vfprintf_internal_r+0x4dc>
   10df4:	05c00044 	movi	r23,1
   10df8:	04bfffc4 	movi	r18,-1
   10dfc:	d8000e15 	stw	zero,56(sp)
   10e00:	05400284 	movi	r21,10
   10e04:	9023883a 	mov	r17,r18
   10e08:	d8000c15 	stw	zero,48(sp)
   10e0c:	d8000b15 	stw	zero,44(sp)
   10e10:	b829883a 	mov	r20,r23
   10e14:	00000806 	br	10e38 <___vfprintf_internal_r+0x4e0>
   10e18:	dd000b15 	stw	r20,44(sp)
   10e1c:	05000084 	movi	r20,2
   10e20:	00000506 	br	10e38 <___vfprintf_internal_r+0x4e0>
   10e24:	00c00044 	movi	r3,1
   10e28:	d8c00c15 	stw	r3,48(sp)
   10e2c:	050000c4 	movi	r20,3
   10e30:	00000106 	br	10e38 <___vfprintf_internal_r+0x4e0>
   10e34:	0029883a 	mov	r20,zero
   10e38:	d8c00f17 	ldw	r3,60(sp)
   10e3c:	18c00044 	addi	r3,r3,1
   10e40:	d8c00f15 	stw	r3,60(sp)
   10e44:	003ede06 	br	109c0 <_gp+0xffff4188>
   10e48:	8005883a 	mov	r2,r16
   10e4c:	dfc01a17 	ldw	ra,104(sp)
   10e50:	df001917 	ldw	fp,100(sp)
   10e54:	ddc01817 	ldw	r23,96(sp)
   10e58:	dd801717 	ldw	r22,92(sp)
   10e5c:	dd401617 	ldw	r21,88(sp)
   10e60:	dd001517 	ldw	r20,84(sp)
   10e64:	dcc01417 	ldw	r19,80(sp)
   10e68:	dc801317 	ldw	r18,76(sp)
   10e6c:	dc401217 	ldw	r17,72(sp)
   10e70:	dc001117 	ldw	r16,68(sp)
   10e74:	dec01b04 	addi	sp,sp,108
   10e78:	f800283a 	ret

00010e7c <__vfprintf_internal>:
   10e7c:	00800074 	movhi	r2,1
   10e80:	10920f04 	addi	r2,r2,18492
   10e84:	300f883a 	mov	r7,r6
   10e88:	280d883a 	mov	r6,r5
   10e8c:	200b883a 	mov	r5,r4
   10e90:	11000017 	ldw	r4,0(r2)
   10e94:	00109581 	jmpi	10958 <___vfprintf_internal_r>

00010e98 <__sfvwrite_small_dev>:
   10e98:	2880000b 	ldhu	r2,0(r5)
   10e9c:	1080020c 	andi	r2,r2,8
   10ea0:	10002126 	beq	r2,zero,10f28 <__sfvwrite_small_dev+0x90>
   10ea4:	2880008f 	ldh	r2,2(r5)
   10ea8:	defffa04 	addi	sp,sp,-24
   10eac:	dc000015 	stw	r16,0(sp)
   10eb0:	dfc00515 	stw	ra,20(sp)
   10eb4:	dd000415 	stw	r20,16(sp)
   10eb8:	dcc00315 	stw	r19,12(sp)
   10ebc:	dc800215 	stw	r18,8(sp)
   10ec0:	dc400115 	stw	r17,4(sp)
   10ec4:	2821883a 	mov	r16,r5
   10ec8:	10001216 	blt	r2,zero,10f14 <__sfvwrite_small_dev+0x7c>
   10ecc:	2027883a 	mov	r19,r4
   10ed0:	3025883a 	mov	r18,r6
   10ed4:	3823883a 	mov	r17,r7
   10ed8:	05010004 	movi	r20,1024
   10edc:	04400b0e 	bge	zero,r17,10f0c <__sfvwrite_small_dev+0x74>
   10ee0:	880f883a 	mov	r7,r17
   10ee4:	a440010e 	bge	r20,r17,10eec <__sfvwrite_small_dev+0x54>
   10ee8:	01c10004 	movi	r7,1024
   10eec:	8140008f 	ldh	r5,2(r16)
   10ef0:	900d883a 	mov	r6,r18
   10ef4:	9809883a 	mov	r4,r19
   10ef8:	0010ffc0 	call	10ffc <_write_r>
   10efc:	0080050e 	bge	zero,r2,10f14 <__sfvwrite_small_dev+0x7c>
   10f00:	88a3c83a 	sub	r17,r17,r2
   10f04:	90a5883a 	add	r18,r18,r2
   10f08:	003ff406 	br	10edc <_gp+0xffff46a4>
   10f0c:	0005883a 	mov	r2,zero
   10f10:	00000706 	br	10f30 <__sfvwrite_small_dev+0x98>
   10f14:	8080000b 	ldhu	r2,0(r16)
   10f18:	10801014 	ori	r2,r2,64
   10f1c:	8080000d 	sth	r2,0(r16)
   10f20:	00bfffc4 	movi	r2,-1
   10f24:	00000206 	br	10f30 <__sfvwrite_small_dev+0x98>
   10f28:	00bfffc4 	movi	r2,-1
   10f2c:	f800283a 	ret
   10f30:	dfc00517 	ldw	ra,20(sp)
   10f34:	dd000417 	ldw	r20,16(sp)
   10f38:	dcc00317 	ldw	r19,12(sp)
   10f3c:	dc800217 	ldw	r18,8(sp)
   10f40:	dc400117 	ldw	r17,4(sp)
   10f44:	dc000017 	ldw	r16,0(sp)
   10f48:	dec00604 	addi	sp,sp,24
   10f4c:	f800283a 	ret

00010f50 <putc>:
   10f50:	defffd04 	addi	sp,sp,-12
   10f54:	00800074 	movhi	r2,1
   10f58:	dc000115 	stw	r16,4(sp)
   10f5c:	dfc00215 	stw	ra,8(sp)
   10f60:	1083a604 	addi	r2,r2,3736
   10f64:	28800115 	stw	r2,4(r5)
   10f68:	00800074 	movhi	r2,1
   10f6c:	10920f04 	addi	r2,r2,18492
   10f70:	d9000005 	stb	r4,0(sp)
   10f74:	2021883a 	mov	r16,r4
   10f78:	11000017 	ldw	r4,0(r2)
   10f7c:	01c00044 	movi	r7,1
   10f80:	d80d883a 	mov	r6,sp
   10f84:	0010e980 	call	10e98 <__sfvwrite_small_dev>
   10f88:	00ffffc4 	movi	r3,-1
   10f8c:	10c00126 	beq	r2,r3,10f94 <putc+0x44>
   10f90:	8005883a 	mov	r2,r16
   10f94:	dfc00217 	ldw	ra,8(sp)
   10f98:	dc000117 	ldw	r16,4(sp)
   10f9c:	dec00304 	addi	sp,sp,12
   10fa0:	f800283a 	ret

00010fa4 <_putc_r>:
   10fa4:	defffd04 	addi	sp,sp,-12
   10fa8:	00800074 	movhi	r2,1
   10fac:	dc000115 	stw	r16,4(sp)
   10fb0:	dfc00215 	stw	ra,8(sp)
   10fb4:	1083a604 	addi	r2,r2,3736
   10fb8:	30800115 	stw	r2,4(r6)
   10fbc:	00800074 	movhi	r2,1
   10fc0:	10920f04 	addi	r2,r2,18492
   10fc4:	11000017 	ldw	r4,0(r2)
   10fc8:	2821883a 	mov	r16,r5
   10fcc:	01c00044 	movi	r7,1
   10fd0:	300b883a 	mov	r5,r6
   10fd4:	d80d883a 	mov	r6,sp
   10fd8:	dc000005 	stb	r16,0(sp)
   10fdc:	0010e980 	call	10e98 <__sfvwrite_small_dev>
   10fe0:	00ffffc4 	movi	r3,-1
   10fe4:	10c00126 	beq	r2,r3,10fec <_putc_r+0x48>
   10fe8:	8005883a 	mov	r2,r16
   10fec:	dfc00217 	ldw	ra,8(sp)
   10ff0:	dc000117 	ldw	r16,4(sp)
   10ff4:	dec00304 	addi	sp,sp,12
   10ff8:	f800283a 	ret

00010ffc <_write_r>:
   10ffc:	defffd04 	addi	sp,sp,-12
   11000:	dc000015 	stw	r16,0(sp)
   11004:	04000074 	movhi	r16,1
   11008:	dc400115 	stw	r17,4(sp)
   1100c:	8416de04 	addi	r16,r16,23416
   11010:	2023883a 	mov	r17,r4
   11014:	2809883a 	mov	r4,r5
   11018:	300b883a 	mov	r5,r6
   1101c:	380d883a 	mov	r6,r7
   11020:	dfc00215 	stw	ra,8(sp)
   11024:	80000015 	stw	zero,0(r16)
   11028:	00113ac0 	call	113ac <write>
   1102c:	00ffffc4 	movi	r3,-1
   11030:	10c0031e 	bne	r2,r3,11040 <_write_r+0x44>
   11034:	80c00017 	ldw	r3,0(r16)
   11038:	18000126 	beq	r3,zero,11040 <_write_r+0x44>
   1103c:	88c00015 	stw	r3,0(r17)
   11040:	dfc00217 	ldw	ra,8(sp)
   11044:	dc400117 	ldw	r17,4(sp)
   11048:	dc000017 	ldw	r16,0(sp)
   1104c:	dec00304 	addi	sp,sp,12
   11050:	f800283a 	ret

00011054 <__divsi3>:
   11054:	20001b16 	blt	r4,zero,110c4 <__divsi3+0x70>
   11058:	000f883a 	mov	r7,zero
   1105c:	28001616 	blt	r5,zero,110b8 <__divsi3+0x64>
   11060:	200d883a 	mov	r6,r4
   11064:	29001a2e 	bgeu	r5,r4,110d0 <__divsi3+0x7c>
   11068:	00800804 	movi	r2,32
   1106c:	00c00044 	movi	r3,1
   11070:	00000106 	br	11078 <__divsi3+0x24>
   11074:	10000d26 	beq	r2,zero,110ac <__divsi3+0x58>
   11078:	294b883a 	add	r5,r5,r5
   1107c:	10bfffc4 	addi	r2,r2,-1
   11080:	18c7883a 	add	r3,r3,r3
   11084:	293ffb36 	bltu	r5,r4,11074 <_gp+0xffff483c>
   11088:	0005883a 	mov	r2,zero
   1108c:	18000726 	beq	r3,zero,110ac <__divsi3+0x58>
   11090:	0005883a 	mov	r2,zero
   11094:	31400236 	bltu	r6,r5,110a0 <__divsi3+0x4c>
   11098:	314dc83a 	sub	r6,r6,r5
   1109c:	10c4b03a 	or	r2,r2,r3
   110a0:	1806d07a 	srli	r3,r3,1
   110a4:	280ad07a 	srli	r5,r5,1
   110a8:	183ffa1e 	bne	r3,zero,11094 <_gp+0xffff485c>
   110ac:	38000126 	beq	r7,zero,110b4 <__divsi3+0x60>
   110b0:	0085c83a 	sub	r2,zero,r2
   110b4:	f800283a 	ret
   110b8:	014bc83a 	sub	r5,zero,r5
   110bc:	39c0005c 	xori	r7,r7,1
   110c0:	003fe706 	br	11060 <_gp+0xffff4828>
   110c4:	0109c83a 	sub	r4,zero,r4
   110c8:	01c00044 	movi	r7,1
   110cc:	003fe306 	br	1105c <_gp+0xffff4824>
   110d0:	00c00044 	movi	r3,1
   110d4:	003fee06 	br	11090 <_gp+0xffff4858>

000110d8 <__modsi3>:
   110d8:	20001716 	blt	r4,zero,11138 <__modsi3+0x60>
   110dc:	000f883a 	mov	r7,zero
   110e0:	2005883a 	mov	r2,r4
   110e4:	28001216 	blt	r5,zero,11130 <__modsi3+0x58>
   110e8:	2900162e 	bgeu	r5,r4,11144 <__modsi3+0x6c>
   110ec:	01800804 	movi	r6,32
   110f0:	00c00044 	movi	r3,1
   110f4:	00000106 	br	110fc <__modsi3+0x24>
   110f8:	30000a26 	beq	r6,zero,11124 <__modsi3+0x4c>
   110fc:	294b883a 	add	r5,r5,r5
   11100:	31bfffc4 	addi	r6,r6,-1
   11104:	18c7883a 	add	r3,r3,r3
   11108:	293ffb36 	bltu	r5,r4,110f8 <_gp+0xffff48c0>
   1110c:	18000526 	beq	r3,zero,11124 <__modsi3+0x4c>
   11110:	1806d07a 	srli	r3,r3,1
   11114:	11400136 	bltu	r2,r5,1111c <__modsi3+0x44>
   11118:	1145c83a 	sub	r2,r2,r5
   1111c:	280ad07a 	srli	r5,r5,1
   11120:	183ffb1e 	bne	r3,zero,11110 <_gp+0xffff48d8>
   11124:	38000126 	beq	r7,zero,1112c <__modsi3+0x54>
   11128:	0085c83a 	sub	r2,zero,r2
   1112c:	f800283a 	ret
   11130:	014bc83a 	sub	r5,zero,r5
   11134:	003fec06 	br	110e8 <_gp+0xffff48b0>
   11138:	0109c83a 	sub	r4,zero,r4
   1113c:	01c00044 	movi	r7,1
   11140:	003fe706 	br	110e0 <_gp+0xffff48a8>
   11144:	00c00044 	movi	r3,1
   11148:	003ff106 	br	11110 <_gp+0xffff48d8>

0001114c <__udivsi3>:
   1114c:	200d883a 	mov	r6,r4
   11150:	2900152e 	bgeu	r5,r4,111a8 <__udivsi3+0x5c>
   11154:	28001416 	blt	r5,zero,111a8 <__udivsi3+0x5c>
   11158:	00800804 	movi	r2,32
   1115c:	00c00044 	movi	r3,1
   11160:	00000206 	br	1116c <__udivsi3+0x20>
   11164:	10000e26 	beq	r2,zero,111a0 <__udivsi3+0x54>
   11168:	28000516 	blt	r5,zero,11180 <__udivsi3+0x34>
   1116c:	294b883a 	add	r5,r5,r5
   11170:	10bfffc4 	addi	r2,r2,-1
   11174:	18c7883a 	add	r3,r3,r3
   11178:	293ffa36 	bltu	r5,r4,11164 <_gp+0xffff492c>
   1117c:	18000826 	beq	r3,zero,111a0 <__udivsi3+0x54>
   11180:	0005883a 	mov	r2,zero
   11184:	31400236 	bltu	r6,r5,11190 <__udivsi3+0x44>
   11188:	314dc83a 	sub	r6,r6,r5
   1118c:	10c4b03a 	or	r2,r2,r3
   11190:	1806d07a 	srli	r3,r3,1
   11194:	280ad07a 	srli	r5,r5,1
   11198:	183ffa1e 	bne	r3,zero,11184 <_gp+0xffff494c>
   1119c:	f800283a 	ret
   111a0:	0005883a 	mov	r2,zero
   111a4:	f800283a 	ret
   111a8:	00c00044 	movi	r3,1
   111ac:	003ff406 	br	11180 <_gp+0xffff4948>

000111b0 <__umodsi3>:
   111b0:	2005883a 	mov	r2,r4
   111b4:	2900122e 	bgeu	r5,r4,11200 <__umodsi3+0x50>
   111b8:	28001116 	blt	r5,zero,11200 <__umodsi3+0x50>
   111bc:	01800804 	movi	r6,32
   111c0:	00c00044 	movi	r3,1
   111c4:	00000206 	br	111d0 <__umodsi3+0x20>
   111c8:	30000c26 	beq	r6,zero,111fc <__umodsi3+0x4c>
   111cc:	28000516 	blt	r5,zero,111e4 <__umodsi3+0x34>
   111d0:	294b883a 	add	r5,r5,r5
   111d4:	31bfffc4 	addi	r6,r6,-1
   111d8:	18c7883a 	add	r3,r3,r3
   111dc:	293ffa36 	bltu	r5,r4,111c8 <_gp+0xffff4990>
   111e0:	18000626 	beq	r3,zero,111fc <__umodsi3+0x4c>
   111e4:	1806d07a 	srli	r3,r3,1
   111e8:	11400136 	bltu	r2,r5,111f0 <__umodsi3+0x40>
   111ec:	1145c83a 	sub	r2,r2,r5
   111f0:	280ad07a 	srli	r5,r5,1
   111f4:	183ffb1e 	bne	r3,zero,111e4 <_gp+0xffff49ac>
   111f8:	f800283a 	ret
   111fc:	f800283a 	ret
   11200:	00c00044 	movi	r3,1
   11204:	003ff706 	br	111e4 <_gp+0xffff49ac>

00011208 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   11208:	defffc04 	addi	sp,sp,-16
   1120c:	df000315 	stw	fp,12(sp)
   11210:	df000304 	addi	fp,sp,12
   11214:	e13ffd15 	stw	r4,-12(fp)
   11218:	e17ffe15 	stw	r5,-8(fp)
   1121c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   11220:	e0fffe17 	ldw	r3,-8(fp)
   11224:	e0bffd17 	ldw	r2,-12(fp)
   11228:	18800c26 	beq	r3,r2,1125c <alt_load_section+0x54>
  {
    while( to != end )
   1122c:	00000806 	br	11250 <alt_load_section+0x48>
    {
      *to++ = *from++;
   11230:	e0bffe17 	ldw	r2,-8(fp)
   11234:	10c00104 	addi	r3,r2,4
   11238:	e0fffe15 	stw	r3,-8(fp)
   1123c:	e0fffd17 	ldw	r3,-12(fp)
   11240:	19000104 	addi	r4,r3,4
   11244:	e13ffd15 	stw	r4,-12(fp)
   11248:	18c00017 	ldw	r3,0(r3)
   1124c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   11250:	e0fffe17 	ldw	r3,-8(fp)
   11254:	e0bfff17 	ldw	r2,-4(fp)
   11258:	18bff51e 	bne	r3,r2,11230 <_gp+0xffff49f8>
    {
      *to++ = *from++;
    }
  }
}
   1125c:	0001883a 	nop
   11260:	e037883a 	mov	sp,fp
   11264:	df000017 	ldw	fp,0(sp)
   11268:	dec00104 	addi	sp,sp,4
   1126c:	f800283a 	ret

00011270 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11270:	defffe04 	addi	sp,sp,-8
   11274:	dfc00115 	stw	ra,4(sp)
   11278:	df000015 	stw	fp,0(sp)
   1127c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   11280:	01800074 	movhi	r6,1
   11284:	31921904 	addi	r6,r6,18532
   11288:	01400074 	movhi	r5,1
   1128c:	294d5404 	addi	r5,r5,13648
   11290:	01000074 	movhi	r4,1
   11294:	21121904 	addi	r4,r4,18532
   11298:	00112080 	call	11208 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1129c:	01800074 	movhi	r6,1
   112a0:	31809104 	addi	r6,r6,580
   112a4:	01400074 	movhi	r5,1
   112a8:	29400804 	addi	r5,r5,32
   112ac:	01000074 	movhi	r4,1
   112b0:	21000804 	addi	r4,r4,32
   112b4:	00112080 	call	11208 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   112b8:	01800074 	movhi	r6,1
   112bc:	318d5404 	addi	r6,r6,13648
   112c0:	01400074 	movhi	r5,1
   112c4:	294d3604 	addi	r5,r5,13528
   112c8:	01000074 	movhi	r4,1
   112cc:	210d3604 	addi	r4,r4,13528
   112d0:	00112080 	call	11208 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   112d4:	00123200 	call	12320 <alt_dcache_flush_all>
  alt_icache_flush_all();
   112d8:	00125340 	call	12534 <alt_icache_flush_all>
}
   112dc:	0001883a 	nop
   112e0:	e037883a 	mov	sp,fp
   112e4:	dfc00117 	ldw	ra,4(sp)
   112e8:	df000017 	ldw	fp,0(sp)
   112ec:	dec00204 	addi	sp,sp,8
   112f0:	f800283a 	ret

000112f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   112f4:	defffd04 	addi	sp,sp,-12
   112f8:	dfc00215 	stw	ra,8(sp)
   112fc:	df000115 	stw	fp,4(sp)
   11300:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11304:	0009883a 	mov	r4,zero
   11308:	00114d80 	call	114d8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1130c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11310:	00115100 	call	11510 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   11314:	01800074 	movhi	r6,1
   11318:	318d4b04 	addi	r6,r6,13612
   1131c:	01400074 	movhi	r5,1
   11320:	294d4b04 	addi	r5,r5,13612
   11324:	01000074 	movhi	r4,1
   11328:	210d4b04 	addi	r4,r4,13612
   1132c:	00128cc0 	call	128cc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   11330:	00124740 	call	12474 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   11334:	01000074 	movhi	r4,1
   11338:	21093504 	addi	r4,r4,9428
   1133c:	00131300 	call	13130 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   11340:	d0a4d117 	ldw	r2,-27836(gp)
   11344:	d0e4d217 	ldw	r3,-27832(gp)
   11348:	d124d317 	ldw	r4,-27828(gp)
   1134c:	200d883a 	mov	r6,r4
   11350:	180b883a 	mov	r5,r3
   11354:	1009883a 	mov	r4,r2
   11358:	00102900 	call	10290 <main>
   1135c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   11360:	01000044 	movi	r4,1
   11364:	00122500 	call	12250 <close>
  exit (result);
   11368:	e13fff17 	ldw	r4,-4(fp)
   1136c:	00131440 	call	13144 <exit>

00011370 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11370:	defffe04 	addi	sp,sp,-8
   11374:	dfc00115 	stw	ra,4(sp)
   11378:	df000015 	stw	fp,0(sp)
   1137c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11380:	d0a00717 	ldw	r2,-32740(gp)
   11384:	10000326 	beq	r2,zero,11394 <alt_get_errno+0x24>
   11388:	d0a00717 	ldw	r2,-32740(gp)
   1138c:	103ee83a 	callr	r2
   11390:	00000106 	br	11398 <alt_get_errno+0x28>
   11394:	d0a4d004 	addi	r2,gp,-27840
}
   11398:	e037883a 	mov	sp,fp
   1139c:	dfc00117 	ldw	ra,4(sp)
   113a0:	df000017 	ldw	fp,0(sp)
   113a4:	dec00204 	addi	sp,sp,8
   113a8:	f800283a 	ret

000113ac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   113ac:	defff904 	addi	sp,sp,-28
   113b0:	dfc00615 	stw	ra,24(sp)
   113b4:	df000515 	stw	fp,20(sp)
   113b8:	df000504 	addi	fp,sp,20
   113bc:	e13ffd15 	stw	r4,-12(fp)
   113c0:	e17ffe15 	stw	r5,-8(fp)
   113c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   113c8:	e0bffd17 	ldw	r2,-12(fp)
   113cc:	10000616 	blt	r2,zero,113e8 <write+0x3c>
   113d0:	e0bffd17 	ldw	r2,-12(fp)
   113d4:	10c00324 	muli	r3,r2,12
   113d8:	00800074 	movhi	r2,1
   113dc:	1091ae04 	addi	r2,r2,18104
   113e0:	1885883a 	add	r2,r3,r2
   113e4:	00000106 	br	113ec <write+0x40>
   113e8:	0005883a 	mov	r2,zero
   113ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   113f0:	e0bffb17 	ldw	r2,-20(fp)
   113f4:	10002126 	beq	r2,zero,1147c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   113f8:	e0bffb17 	ldw	r2,-20(fp)
   113fc:	10800217 	ldw	r2,8(r2)
   11400:	108000cc 	andi	r2,r2,3
   11404:	10001826 	beq	r2,zero,11468 <write+0xbc>
   11408:	e0bffb17 	ldw	r2,-20(fp)
   1140c:	10800017 	ldw	r2,0(r2)
   11410:	10800617 	ldw	r2,24(r2)
   11414:	10001426 	beq	r2,zero,11468 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   11418:	e0bffb17 	ldw	r2,-20(fp)
   1141c:	10800017 	ldw	r2,0(r2)
   11420:	10800617 	ldw	r2,24(r2)
   11424:	e0ffff17 	ldw	r3,-4(fp)
   11428:	180d883a 	mov	r6,r3
   1142c:	e17ffe17 	ldw	r5,-8(fp)
   11430:	e13ffb17 	ldw	r4,-20(fp)
   11434:	103ee83a 	callr	r2
   11438:	e0bffc15 	stw	r2,-16(fp)
   1143c:	e0bffc17 	ldw	r2,-16(fp)
   11440:	1000070e 	bge	r2,zero,11460 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   11444:	00113700 	call	11370 <alt_get_errno>
   11448:	1007883a 	mov	r3,r2
   1144c:	e0bffc17 	ldw	r2,-16(fp)
   11450:	0085c83a 	sub	r2,zero,r2
   11454:	18800015 	stw	r2,0(r3)
        return -1;
   11458:	00bfffc4 	movi	r2,-1
   1145c:	00000c06 	br	11490 <write+0xe4>
      }
      return rval;
   11460:	e0bffc17 	ldw	r2,-16(fp)
   11464:	00000a06 	br	11490 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   11468:	00113700 	call	11370 <alt_get_errno>
   1146c:	1007883a 	mov	r3,r2
   11470:	00800344 	movi	r2,13
   11474:	18800015 	stw	r2,0(r3)
   11478:	00000406 	br	1148c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1147c:	00113700 	call	11370 <alt_get_errno>
   11480:	1007883a 	mov	r3,r2
   11484:	00801444 	movi	r2,81
   11488:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1148c:	00bfffc4 	movi	r2,-1
}
   11490:	e037883a 	mov	sp,fp
   11494:	dfc00117 	ldw	ra,4(sp)
   11498:	df000017 	ldw	fp,0(sp)
   1149c:	dec00204 	addi	sp,sp,8
   114a0:	f800283a 	ret

000114a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   114a4:	defffd04 	addi	sp,sp,-12
   114a8:	dfc00215 	stw	ra,8(sp)
   114ac:	df000115 	stw	fp,4(sp)
   114b0:	df000104 	addi	fp,sp,4
   114b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   114b8:	d1600404 	addi	r5,gp,-32752
   114bc:	e13fff17 	ldw	r4,-4(fp)
   114c0:	00123d00 	call	123d0 <alt_dev_llist_insert>
}
   114c4:	e037883a 	mov	sp,fp
   114c8:	dfc00117 	ldw	ra,4(sp)
   114cc:	df000017 	ldw	fp,0(sp)
   114d0:	dec00204 	addi	sp,sp,8
   114d4:	f800283a 	ret

000114d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   114d8:	defffd04 	addi	sp,sp,-12
   114dc:	dfc00215 	stw	ra,8(sp)
   114e0:	df000115 	stw	fp,4(sp)
   114e4:	df000104 	addi	fp,sp,4
   114e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   114ec:	0012da40 	call	12da4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   114f0:	00800044 	movi	r2,1
   114f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   114f8:	0001883a 	nop
   114fc:	e037883a 	mov	sp,fp
   11500:	dfc00117 	ldw	ra,4(sp)
   11504:	df000017 	ldw	fp,0(sp)
   11508:	dec00204 	addi	sp,sp,8
   1150c:	f800283a 	ret

00011510 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   11510:	defffe04 	addi	sp,sp,-8
   11514:	dfc00115 	stw	ra,4(sp)
   11518:	df000015 	stw	fp,0(sp)
   1151c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   11520:	d024d415 	stw	zero,-27824(gp)
   11524:	0080bef4 	movhi	r2,763
   11528:	10bc2004 	addi	r2,r2,-3968
   1152c:	d0a4d515 	stw	r2,-27820(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
   11530:	000d883a 	mov	r6,zero
   11534:	000b883a 	mov	r5,zero
   11538:	01000074 	movhi	r4,1
   1153c:	210d9604 	addi	r4,r4,13912
   11540:	00116cc0 	call	116cc <altera_avalon_jtag_uart_init>
   11544:	01000074 	movhi	r4,1
   11548:	210d8c04 	addi	r4,r4,13872
   1154c:	00114a40 	call	114a4 <alt_dev_reg>
}
   11550:	0001883a 	nop
   11554:	e037883a 	mov	sp,fp
   11558:	dfc00117 	ldw	ra,4(sp)
   1155c:	df000017 	ldw	fp,0(sp)
   11560:	dec00204 	addi	sp,sp,8
   11564:	f800283a 	ret

00011568 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   11568:	defffa04 	addi	sp,sp,-24
   1156c:	dfc00515 	stw	ra,20(sp)
   11570:	df000415 	stw	fp,16(sp)
   11574:	df000404 	addi	fp,sp,16
   11578:	e13ffd15 	stw	r4,-12(fp)
   1157c:	e17ffe15 	stw	r5,-8(fp)
   11580:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11584:	e0bffd17 	ldw	r2,-12(fp)
   11588:	10800017 	ldw	r2,0(r2)
   1158c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   11590:	e0bffc17 	ldw	r2,-16(fp)
   11594:	10c00a04 	addi	r3,r2,40
   11598:	e0bffd17 	ldw	r2,-12(fp)
   1159c:	10800217 	ldw	r2,8(r2)
   115a0:	100f883a 	mov	r7,r2
   115a4:	e1bfff17 	ldw	r6,-4(fp)
   115a8:	e17ffe17 	ldw	r5,-8(fp)
   115ac:	1809883a 	mov	r4,r3
   115b0:	0011b900 	call	11b90 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   115b4:	e037883a 	mov	sp,fp
   115b8:	dfc00117 	ldw	ra,4(sp)
   115bc:	df000017 	ldw	fp,0(sp)
   115c0:	dec00204 	addi	sp,sp,8
   115c4:	f800283a 	ret

000115c8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   115c8:	defffa04 	addi	sp,sp,-24
   115cc:	dfc00515 	stw	ra,20(sp)
   115d0:	df000415 	stw	fp,16(sp)
   115d4:	df000404 	addi	fp,sp,16
   115d8:	e13ffd15 	stw	r4,-12(fp)
   115dc:	e17ffe15 	stw	r5,-8(fp)
   115e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   115e4:	e0bffd17 	ldw	r2,-12(fp)
   115e8:	10800017 	ldw	r2,0(r2)
   115ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   115f0:	e0bffc17 	ldw	r2,-16(fp)
   115f4:	10c00a04 	addi	r3,r2,40
   115f8:	e0bffd17 	ldw	r2,-12(fp)
   115fc:	10800217 	ldw	r2,8(r2)
   11600:	100f883a 	mov	r7,r2
   11604:	e1bfff17 	ldw	r6,-4(fp)
   11608:	e17ffe17 	ldw	r5,-8(fp)
   1160c:	1809883a 	mov	r4,r3
   11610:	0011dac0 	call	11dac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   11614:	e037883a 	mov	sp,fp
   11618:	dfc00117 	ldw	ra,4(sp)
   1161c:	df000017 	ldw	fp,0(sp)
   11620:	dec00204 	addi	sp,sp,8
   11624:	f800283a 	ret

00011628 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   11628:	defffc04 	addi	sp,sp,-16
   1162c:	dfc00315 	stw	ra,12(sp)
   11630:	df000215 	stw	fp,8(sp)
   11634:	df000204 	addi	fp,sp,8
   11638:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1163c:	e0bfff17 	ldw	r2,-4(fp)
   11640:	10800017 	ldw	r2,0(r2)
   11644:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   11648:	e0bffe17 	ldw	r2,-8(fp)
   1164c:	10c00a04 	addi	r3,r2,40
   11650:	e0bfff17 	ldw	r2,-4(fp)
   11654:	10800217 	ldw	r2,8(r2)
   11658:	100b883a 	mov	r5,r2
   1165c:	1809883a 	mov	r4,r3
   11660:	0011a380 	call	11a38 <altera_avalon_jtag_uart_close>
}
   11664:	e037883a 	mov	sp,fp
   11668:	dfc00117 	ldw	ra,4(sp)
   1166c:	df000017 	ldw	fp,0(sp)
   11670:	dec00204 	addi	sp,sp,8
   11674:	f800283a 	ret

00011678 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   11678:	defffa04 	addi	sp,sp,-24
   1167c:	dfc00515 	stw	ra,20(sp)
   11680:	df000415 	stw	fp,16(sp)
   11684:	df000404 	addi	fp,sp,16
   11688:	e13ffd15 	stw	r4,-12(fp)
   1168c:	e17ffe15 	stw	r5,-8(fp)
   11690:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   11694:	e0bffd17 	ldw	r2,-12(fp)
   11698:	10800017 	ldw	r2,0(r2)
   1169c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   116a0:	e0bffc17 	ldw	r2,-16(fp)
   116a4:	10800a04 	addi	r2,r2,40
   116a8:	e1bfff17 	ldw	r6,-4(fp)
   116ac:	e17ffe17 	ldw	r5,-8(fp)
   116b0:	1009883a 	mov	r4,r2
   116b4:	0011aa00 	call	11aa0 <altera_avalon_jtag_uart_ioctl>
}
   116b8:	e037883a 	mov	sp,fp
   116bc:	dfc00117 	ldw	ra,4(sp)
   116c0:	df000017 	ldw	fp,0(sp)
   116c4:	dec00204 	addi	sp,sp,8
   116c8:	f800283a 	ret

000116cc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   116cc:	defffa04 	addi	sp,sp,-24
   116d0:	dfc00515 	stw	ra,20(sp)
   116d4:	df000415 	stw	fp,16(sp)
   116d8:	df000404 	addi	fp,sp,16
   116dc:	e13ffd15 	stw	r4,-12(fp)
   116e0:	e17ffe15 	stw	r5,-8(fp)
   116e4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   116e8:	e0bffd17 	ldw	r2,-12(fp)
   116ec:	00c00044 	movi	r3,1
   116f0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   116f4:	e0bffd17 	ldw	r2,-12(fp)
   116f8:	10800017 	ldw	r2,0(r2)
   116fc:	10800104 	addi	r2,r2,4
   11700:	1007883a 	mov	r3,r2
   11704:	e0bffd17 	ldw	r2,-12(fp)
   11708:	10800817 	ldw	r2,32(r2)
   1170c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   11710:	e0bffe17 	ldw	r2,-8(fp)
   11714:	e0ffff17 	ldw	r3,-4(fp)
   11718:	d8000015 	stw	zero,0(sp)
   1171c:	e1fffd17 	ldw	r7,-12(fp)
   11720:	01800074 	movhi	r6,1
   11724:	3185e304 	addi	r6,r6,6028
   11728:	180b883a 	mov	r5,r3
   1172c:	1009883a 	mov	r4,r2
   11730:	00125680 	call	12568 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   11734:	e0bffd17 	ldw	r2,-12(fp)
   11738:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1173c:	e0bffd17 	ldw	r2,-12(fp)
   11740:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11744:	d0e4d717 	ldw	r3,-27812(gp)
   11748:	e1fffd17 	ldw	r7,-12(fp)
   1174c:	01800074 	movhi	r6,1
   11750:	31866604 	addi	r6,r6,6552
   11754:	180b883a 	mov	r5,r3
   11758:	1009883a 	mov	r4,r2
   1175c:	00120e80 	call	120e8 <alt_alarm_start>
   11760:	1000040e 	bge	r2,zero,11774 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   11764:	e0fffd17 	ldw	r3,-12(fp)
   11768:	00a00034 	movhi	r2,32768
   1176c:	10bfffc4 	addi	r2,r2,-1
   11770:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   11774:	0001883a 	nop
   11778:	e037883a 	mov	sp,fp
   1177c:	dfc00117 	ldw	ra,4(sp)
   11780:	df000017 	ldw	fp,0(sp)
   11784:	dec00204 	addi	sp,sp,8
   11788:	f800283a 	ret

0001178c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1178c:	defff804 	addi	sp,sp,-32
   11790:	df000715 	stw	fp,28(sp)
   11794:	df000704 	addi	fp,sp,28
   11798:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1179c:	e0bfff17 	ldw	r2,-4(fp)
   117a0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   117a4:	e0bffb17 	ldw	r2,-20(fp)
   117a8:	10800017 	ldw	r2,0(r2)
   117ac:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   117b0:	e0bffc17 	ldw	r2,-16(fp)
   117b4:	10800104 	addi	r2,r2,4
   117b8:	10800037 	ldwio	r2,0(r2)
   117bc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   117c0:	e0bffd17 	ldw	r2,-12(fp)
   117c4:	1080c00c 	andi	r2,r2,768
   117c8:	10006d26 	beq	r2,zero,11980 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   117cc:	e0bffd17 	ldw	r2,-12(fp)
   117d0:	1080400c 	andi	r2,r2,256
   117d4:	10003526 	beq	r2,zero,118ac <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   117d8:	00800074 	movhi	r2,1
   117dc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   117e0:	e0bffb17 	ldw	r2,-20(fp)
   117e4:	10800a17 	ldw	r2,40(r2)
   117e8:	10800044 	addi	r2,r2,1
   117ec:	1081ffcc 	andi	r2,r2,2047
   117f0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   117f4:	e0bffb17 	ldw	r2,-20(fp)
   117f8:	10c00b17 	ldw	r3,44(r2)
   117fc:	e0bffe17 	ldw	r2,-8(fp)
   11800:	18801526 	beq	r3,r2,11858 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11804:	e0bffc17 	ldw	r2,-16(fp)
   11808:	10800037 	ldwio	r2,0(r2)
   1180c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   11810:	e0bff917 	ldw	r2,-28(fp)
   11814:	10a0000c 	andi	r2,r2,32768
   11818:	10001126 	beq	r2,zero,11860 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1181c:	e0bffb17 	ldw	r2,-20(fp)
   11820:	10800a17 	ldw	r2,40(r2)
   11824:	e0fff917 	ldw	r3,-28(fp)
   11828:	1809883a 	mov	r4,r3
   1182c:	e0fffb17 	ldw	r3,-20(fp)
   11830:	1885883a 	add	r2,r3,r2
   11834:	10800e04 	addi	r2,r2,56
   11838:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1183c:	e0bffb17 	ldw	r2,-20(fp)
   11840:	10800a17 	ldw	r2,40(r2)
   11844:	10800044 	addi	r2,r2,1
   11848:	10c1ffcc 	andi	r3,r2,2047
   1184c:	e0bffb17 	ldw	r2,-20(fp)
   11850:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   11854:	003fe206 	br	117e0 <_gp+0xffff4fa8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   11858:	0001883a 	nop
   1185c:	00000106 	br	11864 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   11860:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   11864:	e0bff917 	ldw	r2,-28(fp)
   11868:	10bfffec 	andhi	r2,r2,65535
   1186c:	10000f26 	beq	r2,zero,118ac <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11870:	e0bffb17 	ldw	r2,-20(fp)
   11874:	10c00817 	ldw	r3,32(r2)
   11878:	00bfff84 	movi	r2,-2
   1187c:	1886703a 	and	r3,r3,r2
   11880:	e0bffb17 	ldw	r2,-20(fp)
   11884:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   11888:	e0bffc17 	ldw	r2,-16(fp)
   1188c:	10800104 	addi	r2,r2,4
   11890:	1007883a 	mov	r3,r2
   11894:	e0bffb17 	ldw	r2,-20(fp)
   11898:	10800817 	ldw	r2,32(r2)
   1189c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   118a0:	e0bffc17 	ldw	r2,-16(fp)
   118a4:	10800104 	addi	r2,r2,4
   118a8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   118ac:	e0bffd17 	ldw	r2,-12(fp)
   118b0:	1080800c 	andi	r2,r2,512
   118b4:	103fbe26 	beq	r2,zero,117b0 <_gp+0xffff4f78>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   118b8:	e0bffd17 	ldw	r2,-12(fp)
   118bc:	1004d43a 	srli	r2,r2,16
   118c0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   118c4:	00001406 	br	11918 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   118c8:	e0bffc17 	ldw	r2,-16(fp)
   118cc:	e0fffb17 	ldw	r3,-20(fp)
   118d0:	18c00d17 	ldw	r3,52(r3)
   118d4:	e13ffb17 	ldw	r4,-20(fp)
   118d8:	20c7883a 	add	r3,r4,r3
   118dc:	18c20e04 	addi	r3,r3,2104
   118e0:	18c00003 	ldbu	r3,0(r3)
   118e4:	18c03fcc 	andi	r3,r3,255
   118e8:	18c0201c 	xori	r3,r3,128
   118ec:	18ffe004 	addi	r3,r3,-128
   118f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   118f4:	e0bffb17 	ldw	r2,-20(fp)
   118f8:	10800d17 	ldw	r2,52(r2)
   118fc:	10800044 	addi	r2,r2,1
   11900:	10c1ffcc 	andi	r3,r2,2047
   11904:	e0bffb17 	ldw	r2,-20(fp)
   11908:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1190c:	e0bffa17 	ldw	r2,-24(fp)
   11910:	10bfffc4 	addi	r2,r2,-1
   11914:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   11918:	e0bffa17 	ldw	r2,-24(fp)
   1191c:	10000526 	beq	r2,zero,11934 <altera_avalon_jtag_uart_irq+0x1a8>
   11920:	e0bffb17 	ldw	r2,-20(fp)
   11924:	10c00d17 	ldw	r3,52(r2)
   11928:	e0bffb17 	ldw	r2,-20(fp)
   1192c:	10800c17 	ldw	r2,48(r2)
   11930:	18bfe51e 	bne	r3,r2,118c8 <_gp+0xffff5090>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   11934:	e0bffa17 	ldw	r2,-24(fp)
   11938:	103f9d26 	beq	r2,zero,117b0 <_gp+0xffff4f78>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1193c:	e0bffb17 	ldw	r2,-20(fp)
   11940:	10c00817 	ldw	r3,32(r2)
   11944:	00bfff44 	movi	r2,-3
   11948:	1886703a 	and	r3,r3,r2
   1194c:	e0bffb17 	ldw	r2,-20(fp)
   11950:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11954:	e0bffb17 	ldw	r2,-20(fp)
   11958:	10800017 	ldw	r2,0(r2)
   1195c:	10800104 	addi	r2,r2,4
   11960:	1007883a 	mov	r3,r2
   11964:	e0bffb17 	ldw	r2,-20(fp)
   11968:	10800817 	ldw	r2,32(r2)
   1196c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11970:	e0bffc17 	ldw	r2,-16(fp)
   11974:	10800104 	addi	r2,r2,4
   11978:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1197c:	003f8c06 	br	117b0 <_gp+0xffff4f78>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   11980:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   11984:	0001883a 	nop
   11988:	e037883a 	mov	sp,fp
   1198c:	df000017 	ldw	fp,0(sp)
   11990:	dec00104 	addi	sp,sp,4
   11994:	f800283a 	ret

00011998 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   11998:	defff804 	addi	sp,sp,-32
   1199c:	df000715 	stw	fp,28(sp)
   119a0:	df000704 	addi	fp,sp,28
   119a4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   119a8:	e0bffb17 	ldw	r2,-20(fp)
   119ac:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   119b0:	e0bff917 	ldw	r2,-28(fp)
   119b4:	10800017 	ldw	r2,0(r2)
   119b8:	10800104 	addi	r2,r2,4
   119bc:	10800037 	ldwio	r2,0(r2)
   119c0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   119c4:	e0bffa17 	ldw	r2,-24(fp)
   119c8:	1081000c 	andi	r2,r2,1024
   119cc:	10000b26 	beq	r2,zero,119fc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   119d0:	e0bff917 	ldw	r2,-28(fp)
   119d4:	10800017 	ldw	r2,0(r2)
   119d8:	10800104 	addi	r2,r2,4
   119dc:	1007883a 	mov	r3,r2
   119e0:	e0bff917 	ldw	r2,-28(fp)
   119e4:	10800817 	ldw	r2,32(r2)
   119e8:	10810014 	ori	r2,r2,1024
   119ec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   119f0:	e0bff917 	ldw	r2,-28(fp)
   119f4:	10000915 	stw	zero,36(r2)
   119f8:	00000a06 	br	11a24 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   119fc:	e0bff917 	ldw	r2,-28(fp)
   11a00:	10c00917 	ldw	r3,36(r2)
   11a04:	00a00034 	movhi	r2,32768
   11a08:	10bfff04 	addi	r2,r2,-4
   11a0c:	10c00536 	bltu	r2,r3,11a24 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   11a10:	e0bff917 	ldw	r2,-28(fp)
   11a14:	10800917 	ldw	r2,36(r2)
   11a18:	10c00044 	addi	r3,r2,1
   11a1c:	e0bff917 	ldw	r2,-28(fp)
   11a20:	10c00915 	stw	r3,36(r2)
   11a24:	d0a4d717 	ldw	r2,-27812(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   11a28:	e037883a 	mov	sp,fp
   11a2c:	df000017 	ldw	fp,0(sp)
   11a30:	dec00104 	addi	sp,sp,4
   11a34:	f800283a 	ret

00011a38 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   11a38:	defffd04 	addi	sp,sp,-12
   11a3c:	df000215 	stw	fp,8(sp)
   11a40:	df000204 	addi	fp,sp,8
   11a44:	e13ffe15 	stw	r4,-8(fp)
   11a48:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11a4c:	00000506 	br	11a64 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   11a50:	e0bfff17 	ldw	r2,-4(fp)
   11a54:	1090000c 	andi	r2,r2,16384
   11a58:	10000226 	beq	r2,zero,11a64 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   11a5c:	00bffd44 	movi	r2,-11
   11a60:	00000b06 	br	11a90 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11a64:	e0bffe17 	ldw	r2,-8(fp)
   11a68:	10c00d17 	ldw	r3,52(r2)
   11a6c:	e0bffe17 	ldw	r2,-8(fp)
   11a70:	10800c17 	ldw	r2,48(r2)
   11a74:	18800526 	beq	r3,r2,11a8c <altera_avalon_jtag_uart_close+0x54>
   11a78:	e0bffe17 	ldw	r2,-8(fp)
   11a7c:	10c00917 	ldw	r3,36(r2)
   11a80:	e0bffe17 	ldw	r2,-8(fp)
   11a84:	10800117 	ldw	r2,4(r2)
   11a88:	18bff136 	bltu	r3,r2,11a50 <_gp+0xffff5218>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   11a8c:	0005883a 	mov	r2,zero
}
   11a90:	e037883a 	mov	sp,fp
   11a94:	df000017 	ldw	fp,0(sp)
   11a98:	dec00104 	addi	sp,sp,4
   11a9c:	f800283a 	ret

00011aa0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   11aa0:	defffa04 	addi	sp,sp,-24
   11aa4:	df000515 	stw	fp,20(sp)
   11aa8:	df000504 	addi	fp,sp,20
   11aac:	e13ffd15 	stw	r4,-12(fp)
   11ab0:	e17ffe15 	stw	r5,-8(fp)
   11ab4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   11ab8:	00bff9c4 	movi	r2,-25
   11abc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   11ac0:	e0bffe17 	ldw	r2,-8(fp)
   11ac4:	10da8060 	cmpeqi	r3,r2,27137
   11ac8:	1800031e 	bne	r3,zero,11ad8 <altera_avalon_jtag_uart_ioctl+0x38>
   11acc:	109a80a0 	cmpeqi	r2,r2,27138
   11ad0:	1000181e 	bne	r2,zero,11b34 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   11ad4:	00002906 	br	11b7c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   11ad8:	e0bffd17 	ldw	r2,-12(fp)
   11adc:	10c00117 	ldw	r3,4(r2)
   11ae0:	00a00034 	movhi	r2,32768
   11ae4:	10bfffc4 	addi	r2,r2,-1
   11ae8:	18802126 	beq	r3,r2,11b70 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   11aec:	e0bfff17 	ldw	r2,-4(fp)
   11af0:	10800017 	ldw	r2,0(r2)
   11af4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   11af8:	e0bffc17 	ldw	r2,-16(fp)
   11afc:	10800090 	cmplti	r2,r2,2
   11b00:	1000061e 	bne	r2,zero,11b1c <altera_avalon_jtag_uart_ioctl+0x7c>
   11b04:	e0fffc17 	ldw	r3,-16(fp)
   11b08:	00a00034 	movhi	r2,32768
   11b0c:	10bfffc4 	addi	r2,r2,-1
   11b10:	18800226 	beq	r3,r2,11b1c <altera_avalon_jtag_uart_ioctl+0x7c>
   11b14:	e0bffc17 	ldw	r2,-16(fp)
   11b18:	00000206 	br	11b24 <altera_avalon_jtag_uart_ioctl+0x84>
   11b1c:	00a00034 	movhi	r2,32768
   11b20:	10bfff84 	addi	r2,r2,-2
   11b24:	e0fffd17 	ldw	r3,-12(fp)
   11b28:	18800115 	stw	r2,4(r3)
      rc = 0;
   11b2c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   11b30:	00000f06 	br	11b70 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   11b34:	e0bffd17 	ldw	r2,-12(fp)
   11b38:	10c00117 	ldw	r3,4(r2)
   11b3c:	00a00034 	movhi	r2,32768
   11b40:	10bfffc4 	addi	r2,r2,-1
   11b44:	18800c26 	beq	r3,r2,11b78 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   11b48:	e0bffd17 	ldw	r2,-12(fp)
   11b4c:	10c00917 	ldw	r3,36(r2)
   11b50:	e0bffd17 	ldw	r2,-12(fp)
   11b54:	10800117 	ldw	r2,4(r2)
   11b58:	1885803a 	cmpltu	r2,r3,r2
   11b5c:	10c03fcc 	andi	r3,r2,255
   11b60:	e0bfff17 	ldw	r2,-4(fp)
   11b64:	10c00015 	stw	r3,0(r2)
      rc = 0;
   11b68:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   11b6c:	00000206 	br	11b78 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   11b70:	0001883a 	nop
   11b74:	00000106 	br	11b7c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   11b78:	0001883a 	nop

  default:
    break;
  }

  return rc;
   11b7c:	e0bffb17 	ldw	r2,-20(fp)
}
   11b80:	e037883a 	mov	sp,fp
   11b84:	df000017 	ldw	fp,0(sp)
   11b88:	dec00104 	addi	sp,sp,4
   11b8c:	f800283a 	ret

00011b90 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   11b90:	defff304 	addi	sp,sp,-52
   11b94:	dfc00c15 	stw	ra,48(sp)
   11b98:	df000b15 	stw	fp,44(sp)
   11b9c:	df000b04 	addi	fp,sp,44
   11ba0:	e13ffc15 	stw	r4,-16(fp)
   11ba4:	e17ffd15 	stw	r5,-12(fp)
   11ba8:	e1bffe15 	stw	r6,-8(fp)
   11bac:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   11bb0:	e0bffd17 	ldw	r2,-12(fp)
   11bb4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11bb8:	00004706 	br	11cd8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   11bbc:	e0bffc17 	ldw	r2,-16(fp)
   11bc0:	10800a17 	ldw	r2,40(r2)
   11bc4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   11bc8:	e0bffc17 	ldw	r2,-16(fp)
   11bcc:	10800b17 	ldw	r2,44(r2)
   11bd0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   11bd4:	e0fff717 	ldw	r3,-36(fp)
   11bd8:	e0bff817 	ldw	r2,-32(fp)
   11bdc:	18800536 	bltu	r3,r2,11bf4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   11be0:	e0fff717 	ldw	r3,-36(fp)
   11be4:	e0bff817 	ldw	r2,-32(fp)
   11be8:	1885c83a 	sub	r2,r3,r2
   11bec:	e0bff615 	stw	r2,-40(fp)
   11bf0:	00000406 	br	11c04 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   11bf4:	00c20004 	movi	r3,2048
   11bf8:	e0bff817 	ldw	r2,-32(fp)
   11bfc:	1885c83a 	sub	r2,r3,r2
   11c00:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11c04:	e0bff617 	ldw	r2,-40(fp)
   11c08:	10001e26 	beq	r2,zero,11c84 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   11c0c:	e0fffe17 	ldw	r3,-8(fp)
   11c10:	e0bff617 	ldw	r2,-40(fp)
   11c14:	1880022e 	bgeu	r3,r2,11c20 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   11c18:	e0bffe17 	ldw	r2,-8(fp)
   11c1c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   11c20:	e0bffc17 	ldw	r2,-16(fp)
   11c24:	10c00e04 	addi	r3,r2,56
   11c28:	e0bff817 	ldw	r2,-32(fp)
   11c2c:	1885883a 	add	r2,r3,r2
   11c30:	e1bff617 	ldw	r6,-40(fp)
   11c34:	100b883a 	mov	r5,r2
   11c38:	e13ff517 	ldw	r4,-44(fp)
   11c3c:	00131940 	call	13194 <memcpy>
      ptr   += n;
   11c40:	e0fff517 	ldw	r3,-44(fp)
   11c44:	e0bff617 	ldw	r2,-40(fp)
   11c48:	1885883a 	add	r2,r3,r2
   11c4c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   11c50:	e0fffe17 	ldw	r3,-8(fp)
   11c54:	e0bff617 	ldw	r2,-40(fp)
   11c58:	1885c83a 	sub	r2,r3,r2
   11c5c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11c60:	e0fff817 	ldw	r3,-32(fp)
   11c64:	e0bff617 	ldw	r2,-40(fp)
   11c68:	1885883a 	add	r2,r3,r2
   11c6c:	10c1ffcc 	andi	r3,r2,2047
   11c70:	e0bffc17 	ldw	r2,-16(fp)
   11c74:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   11c78:	e0bffe17 	ldw	r2,-8(fp)
   11c7c:	00bfcf16 	blt	zero,r2,11bbc <_gp+0xffff5384>
   11c80:	00000106 	br	11c88 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   11c84:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   11c88:	e0fff517 	ldw	r3,-44(fp)
   11c8c:	e0bffd17 	ldw	r2,-12(fp)
   11c90:	1880141e 	bne	r3,r2,11ce4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   11c94:	e0bfff17 	ldw	r2,-4(fp)
   11c98:	1090000c 	andi	r2,r2,16384
   11c9c:	1000131e 	bne	r2,zero,11cec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   11ca0:	0001883a 	nop
   11ca4:	e0bffc17 	ldw	r2,-16(fp)
   11ca8:	10c00a17 	ldw	r3,40(r2)
   11cac:	e0bff717 	ldw	r2,-36(fp)
   11cb0:	1880051e 	bne	r3,r2,11cc8 <altera_avalon_jtag_uart_read+0x138>
   11cb4:	e0bffc17 	ldw	r2,-16(fp)
   11cb8:	10c00917 	ldw	r3,36(r2)
   11cbc:	e0bffc17 	ldw	r2,-16(fp)
   11cc0:	10800117 	ldw	r2,4(r2)
   11cc4:	18bff736 	bltu	r3,r2,11ca4 <_gp+0xffff546c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   11cc8:	e0bffc17 	ldw	r2,-16(fp)
   11ccc:	10c00a17 	ldw	r3,40(r2)
   11cd0:	e0bff717 	ldw	r2,-36(fp)
   11cd4:	18800726 	beq	r3,r2,11cf4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11cd8:	e0bffe17 	ldw	r2,-8(fp)
   11cdc:	00bfb716 	blt	zero,r2,11bbc <_gp+0xffff5384>
   11ce0:	00000506 	br	11cf8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   11ce4:	0001883a 	nop
   11ce8:	00000306 	br	11cf8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   11cec:	0001883a 	nop
   11cf0:	00000106 	br	11cf8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   11cf4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   11cf8:	e0fff517 	ldw	r3,-44(fp)
   11cfc:	e0bffd17 	ldw	r2,-12(fp)
   11d00:	18801826 	beq	r3,r2,11d64 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d04:	0005303a 	rdctl	r2,status
   11d08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d0c:	e0fffb17 	ldw	r3,-20(fp)
   11d10:	00bfff84 	movi	r2,-2
   11d14:	1884703a 	and	r2,r3,r2
   11d18:	1001703a 	wrctl	status,r2
  
  return context;
   11d1c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   11d20:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11d24:	e0bffc17 	ldw	r2,-16(fp)
   11d28:	10800817 	ldw	r2,32(r2)
   11d2c:	10c00054 	ori	r3,r2,1
   11d30:	e0bffc17 	ldw	r2,-16(fp)
   11d34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11d38:	e0bffc17 	ldw	r2,-16(fp)
   11d3c:	10800017 	ldw	r2,0(r2)
   11d40:	10800104 	addi	r2,r2,4
   11d44:	1007883a 	mov	r3,r2
   11d48:	e0bffc17 	ldw	r2,-16(fp)
   11d4c:	10800817 	ldw	r2,32(r2)
   11d50:	18800035 	stwio	r2,0(r3)
   11d54:	e0bffa17 	ldw	r2,-24(fp)
   11d58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11d5c:	e0bff917 	ldw	r2,-28(fp)
   11d60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   11d64:	e0fff517 	ldw	r3,-44(fp)
   11d68:	e0bffd17 	ldw	r2,-12(fp)
   11d6c:	18800426 	beq	r3,r2,11d80 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   11d70:	e0fff517 	ldw	r3,-44(fp)
   11d74:	e0bffd17 	ldw	r2,-12(fp)
   11d78:	1885c83a 	sub	r2,r3,r2
   11d7c:	00000606 	br	11d98 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   11d80:	e0bfff17 	ldw	r2,-4(fp)
   11d84:	1090000c 	andi	r2,r2,16384
   11d88:	10000226 	beq	r2,zero,11d94 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   11d8c:	00bffd44 	movi	r2,-11
   11d90:	00000106 	br	11d98 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   11d94:	00bffec4 	movi	r2,-5
}
   11d98:	e037883a 	mov	sp,fp
   11d9c:	dfc00117 	ldw	ra,4(sp)
   11da0:	df000017 	ldw	fp,0(sp)
   11da4:	dec00204 	addi	sp,sp,8
   11da8:	f800283a 	ret

00011dac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11dac:	defff304 	addi	sp,sp,-52
   11db0:	dfc00c15 	stw	ra,48(sp)
   11db4:	df000b15 	stw	fp,44(sp)
   11db8:	df000b04 	addi	fp,sp,44
   11dbc:	e13ffc15 	stw	r4,-16(fp)
   11dc0:	e17ffd15 	stw	r5,-12(fp)
   11dc4:	e1bffe15 	stw	r6,-8(fp)
   11dc8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   11dcc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   11dd0:	e0bffd17 	ldw	r2,-12(fp)
   11dd4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11dd8:	00003706 	br	11eb8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   11ddc:	e0bffc17 	ldw	r2,-16(fp)
   11de0:	10800c17 	ldw	r2,48(r2)
   11de4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   11de8:	e0bffc17 	ldw	r2,-16(fp)
   11dec:	10800d17 	ldw	r2,52(r2)
   11df0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   11df4:	e0fff917 	ldw	r3,-28(fp)
   11df8:	e0bff517 	ldw	r2,-44(fp)
   11dfc:	1880062e 	bgeu	r3,r2,11e18 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   11e00:	e0fff517 	ldw	r3,-44(fp)
   11e04:	e0bff917 	ldw	r2,-28(fp)
   11e08:	1885c83a 	sub	r2,r3,r2
   11e0c:	10bfffc4 	addi	r2,r2,-1
   11e10:	e0bff615 	stw	r2,-40(fp)
   11e14:	00000b06 	br	11e44 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   11e18:	e0bff517 	ldw	r2,-44(fp)
   11e1c:	10000526 	beq	r2,zero,11e34 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   11e20:	00c20004 	movi	r3,2048
   11e24:	e0bff917 	ldw	r2,-28(fp)
   11e28:	1885c83a 	sub	r2,r3,r2
   11e2c:	e0bff615 	stw	r2,-40(fp)
   11e30:	00000406 	br	11e44 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   11e34:	00c1ffc4 	movi	r3,2047
   11e38:	e0bff917 	ldw	r2,-28(fp)
   11e3c:	1885c83a 	sub	r2,r3,r2
   11e40:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11e44:	e0bff617 	ldw	r2,-40(fp)
   11e48:	10001e26 	beq	r2,zero,11ec4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   11e4c:	e0fffe17 	ldw	r3,-8(fp)
   11e50:	e0bff617 	ldw	r2,-40(fp)
   11e54:	1880022e 	bgeu	r3,r2,11e60 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   11e58:	e0bffe17 	ldw	r2,-8(fp)
   11e5c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   11e60:	e0bffc17 	ldw	r2,-16(fp)
   11e64:	10c20e04 	addi	r3,r2,2104
   11e68:	e0bff917 	ldw	r2,-28(fp)
   11e6c:	1885883a 	add	r2,r3,r2
   11e70:	e1bff617 	ldw	r6,-40(fp)
   11e74:	e17ffd17 	ldw	r5,-12(fp)
   11e78:	1009883a 	mov	r4,r2
   11e7c:	00131940 	call	13194 <memcpy>
      ptr   += n;
   11e80:	e0fffd17 	ldw	r3,-12(fp)
   11e84:	e0bff617 	ldw	r2,-40(fp)
   11e88:	1885883a 	add	r2,r3,r2
   11e8c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   11e90:	e0fffe17 	ldw	r3,-8(fp)
   11e94:	e0bff617 	ldw	r2,-40(fp)
   11e98:	1885c83a 	sub	r2,r3,r2
   11e9c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11ea0:	e0fff917 	ldw	r3,-28(fp)
   11ea4:	e0bff617 	ldw	r2,-40(fp)
   11ea8:	1885883a 	add	r2,r3,r2
   11eac:	10c1ffcc 	andi	r3,r2,2047
   11eb0:	e0bffc17 	ldw	r2,-16(fp)
   11eb4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11eb8:	e0bffe17 	ldw	r2,-8(fp)
   11ebc:	00bfc716 	blt	zero,r2,11ddc <_gp+0xffff55a4>
   11ec0:	00000106 	br	11ec8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   11ec4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ec8:	0005303a 	rdctl	r2,status
   11ecc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ed0:	e0fffb17 	ldw	r3,-20(fp)
   11ed4:	00bfff84 	movi	r2,-2
   11ed8:	1884703a 	and	r2,r3,r2
   11edc:	1001703a 	wrctl	status,r2
  
  return context;
   11ee0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   11ee4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11ee8:	e0bffc17 	ldw	r2,-16(fp)
   11eec:	10800817 	ldw	r2,32(r2)
   11ef0:	10c00094 	ori	r3,r2,2
   11ef4:	e0bffc17 	ldw	r2,-16(fp)
   11ef8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11efc:	e0bffc17 	ldw	r2,-16(fp)
   11f00:	10800017 	ldw	r2,0(r2)
   11f04:	10800104 	addi	r2,r2,4
   11f08:	1007883a 	mov	r3,r2
   11f0c:	e0bffc17 	ldw	r2,-16(fp)
   11f10:	10800817 	ldw	r2,32(r2)
   11f14:	18800035 	stwio	r2,0(r3)
   11f18:	e0bffa17 	ldw	r2,-24(fp)
   11f1c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f20:	e0bff817 	ldw	r2,-32(fp)
   11f24:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   11f28:	e0bffe17 	ldw	r2,-8(fp)
   11f2c:	0080100e 	bge	zero,r2,11f70 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   11f30:	e0bfff17 	ldw	r2,-4(fp)
   11f34:	1090000c 	andi	r2,r2,16384
   11f38:	1000101e 	bne	r2,zero,11f7c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   11f3c:	0001883a 	nop
   11f40:	e0bffc17 	ldw	r2,-16(fp)
   11f44:	10c00d17 	ldw	r3,52(r2)
   11f48:	e0bff517 	ldw	r2,-44(fp)
   11f4c:	1880051e 	bne	r3,r2,11f64 <altera_avalon_jtag_uart_write+0x1b8>
   11f50:	e0bffc17 	ldw	r2,-16(fp)
   11f54:	10c00917 	ldw	r3,36(r2)
   11f58:	e0bffc17 	ldw	r2,-16(fp)
   11f5c:	10800117 	ldw	r2,4(r2)
   11f60:	18bff736 	bltu	r3,r2,11f40 <_gp+0xffff5708>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   11f64:	e0bffc17 	ldw	r2,-16(fp)
   11f68:	10800917 	ldw	r2,36(r2)
   11f6c:	1000051e 	bne	r2,zero,11f84 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   11f70:	e0bffe17 	ldw	r2,-8(fp)
   11f74:	00bfd016 	blt	zero,r2,11eb8 <_gp+0xffff5680>
   11f78:	00000306 	br	11f88 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   11f7c:	0001883a 	nop
   11f80:	00000106 	br	11f88 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   11f84:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   11f88:	e0fffd17 	ldw	r3,-12(fp)
   11f8c:	e0bff717 	ldw	r2,-36(fp)
   11f90:	18800426 	beq	r3,r2,11fa4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   11f94:	e0fffd17 	ldw	r3,-12(fp)
   11f98:	e0bff717 	ldw	r2,-36(fp)
   11f9c:	1885c83a 	sub	r2,r3,r2
   11fa0:	00000606 	br	11fbc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   11fa4:	e0bfff17 	ldw	r2,-4(fp)
   11fa8:	1090000c 	andi	r2,r2,16384
   11fac:	10000226 	beq	r2,zero,11fb8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   11fb0:	00bffd44 	movi	r2,-11
   11fb4:	00000106 	br	11fbc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   11fb8:	00bffec4 	movi	r2,-5
}
   11fbc:	e037883a 	mov	sp,fp
   11fc0:	dfc00117 	ldw	ra,4(sp)
   11fc4:	df000017 	ldw	fp,0(sp)
   11fc8:	dec00204 	addi	sp,sp,8
   11fcc:	f800283a 	ret

00011fd0 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   11fd0:	defffe04 	addi	sp,sp,-8
   11fd4:	df000115 	stw	fp,4(sp)
   11fd8:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   11fdc:	d0a4d417 	ldw	r2,-27824(gp)
   11fe0:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   11fe4:	d0a4d517 	ldw	r2,-27820(gp)
   11fe8:	1000021e 	bne	r2,zero,11ff4 <alt_timestamp_start+0x24>
  {
    return -1;
   11fec:	00bfffc4 	movi	r2,-1
   11ff0:	00001106 	br	12038 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   11ff4:	e0bfff17 	ldw	r2,-4(fp)
   11ff8:	10800104 	addi	r2,r2,4
   11ffc:	00c00204 	movi	r3,8
   12000:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   12004:	e0bfff17 	ldw	r2,-4(fp)
   12008:	10800204 	addi	r2,r2,8
   1200c:	00ffffd4 	movui	r3,65535
   12010:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   12014:	e0bfff17 	ldw	r2,-4(fp)
   12018:	10800304 	addi	r2,r2,12
   1201c:	00ffffd4 	movui	r3,65535
   12020:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   12024:	e0bfff17 	ldw	r2,-4(fp)
   12028:	10800104 	addi	r2,r2,4
   1202c:	00c00104 	movi	r3,4
   12030:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   12034:	0005883a 	mov	r2,zero
}
   12038:	e037883a 	mov	sp,fp
   1203c:	df000017 	ldw	fp,0(sp)
   12040:	dec00104 	addi	sp,sp,4
   12044:	f800283a 	ret

00012048 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   12048:	defffc04 	addi	sp,sp,-16
   1204c:	df000315 	stw	fp,12(sp)
   12050:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   12054:	d0a4d417 	ldw	r2,-27824(gp)
   12058:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   1205c:	d0a4d517 	ldw	r2,-27820(gp)
   12060:	1000021e 	bne	r2,zero,1206c <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   12064:	00bfffc4 	movi	r2,-1
   12068:	00001306 	br	120b8 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   1206c:	e0bffd17 	ldw	r2,-12(fp)
   12070:	10800404 	addi	r2,r2,16
   12074:	0007883a 	mov	r3,zero
   12078:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   1207c:	e0bffd17 	ldw	r2,-12(fp)
   12080:	10800404 	addi	r2,r2,16
   12084:	10800037 	ldwio	r2,0(r2)
   12088:	10bfffcc 	andi	r2,r2,65535
   1208c:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   12090:	e0bffd17 	ldw	r2,-12(fp)
   12094:	10800504 	addi	r2,r2,20
   12098:	10800037 	ldwio	r2,0(r2)
   1209c:	10bfffcc 	andi	r2,r2,65535
   120a0:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   120a4:	e0bfff17 	ldw	r2,-4(fp)
   120a8:	1006943a 	slli	r3,r2,16
   120ac:	e0bffe17 	ldw	r2,-8(fp)
   120b0:	1884b03a 	or	r2,r3,r2
   120b4:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   120b8:	e037883a 	mov	sp,fp
   120bc:	df000017 	ldw	fp,0(sp)
   120c0:	dec00104 	addi	sp,sp,4
   120c4:	f800283a 	ret

000120c8 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   120c8:	deffff04 	addi	sp,sp,-4
   120cc:	df000015 	stw	fp,0(sp)
   120d0:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   120d4:	d0a4d517 	ldw	r2,-27820(gp)
}
   120d8:	e037883a 	mov	sp,fp
   120dc:	df000017 	ldw	fp,0(sp)
   120e0:	dec00104 	addi	sp,sp,4
   120e4:	f800283a 	ret

000120e8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   120e8:	defff504 	addi	sp,sp,-44
   120ec:	df000a15 	stw	fp,40(sp)
   120f0:	df000a04 	addi	fp,sp,40
   120f4:	e13ffc15 	stw	r4,-16(fp)
   120f8:	e17ffd15 	stw	r5,-12(fp)
   120fc:	e1bffe15 	stw	r6,-8(fp)
   12100:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   12104:	e03ff615 	stw	zero,-40(fp)
   12108:	d0a4d717 	ldw	r2,-27812(gp)
  
  if (alt_ticks_per_second ())
   1210c:	10003c26 	beq	r2,zero,12200 <alt_alarm_start+0x118>
  {
    if (alarm)
   12110:	e0bffc17 	ldw	r2,-16(fp)
   12114:	10003826 	beq	r2,zero,121f8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   12118:	e0bffc17 	ldw	r2,-16(fp)
   1211c:	e0fffe17 	ldw	r3,-8(fp)
   12120:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   12124:	e0bffc17 	ldw	r2,-16(fp)
   12128:	e0ffff17 	ldw	r3,-4(fp)
   1212c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12130:	0005303a 	rdctl	r2,status
   12134:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12138:	e0fff917 	ldw	r3,-28(fp)
   1213c:	00bfff84 	movi	r2,-2
   12140:	1884703a 	and	r2,r3,r2
   12144:	1001703a 	wrctl	status,r2
  
  return context;
   12148:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1214c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   12150:	d0a4d817 	ldw	r2,-27808(gp)
      
      current_nticks = alt_nticks();
   12154:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   12158:	e0fffd17 	ldw	r3,-12(fp)
   1215c:	e0bff617 	ldw	r2,-40(fp)
   12160:	1885883a 	add	r2,r3,r2
   12164:	10c00044 	addi	r3,r2,1
   12168:	e0bffc17 	ldw	r2,-16(fp)
   1216c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   12170:	e0bffc17 	ldw	r2,-16(fp)
   12174:	10c00217 	ldw	r3,8(r2)
   12178:	e0bff617 	ldw	r2,-40(fp)
   1217c:	1880042e 	bgeu	r3,r2,12190 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   12180:	e0bffc17 	ldw	r2,-16(fp)
   12184:	00c00044 	movi	r3,1
   12188:	10c00405 	stb	r3,16(r2)
   1218c:	00000206 	br	12198 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   12190:	e0bffc17 	ldw	r2,-16(fp)
   12194:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   12198:	e0bffc17 	ldw	r2,-16(fp)
   1219c:	d0e00904 	addi	r3,gp,-32732
   121a0:	e0fffa15 	stw	r3,-24(fp)
   121a4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   121a8:	e0bffb17 	ldw	r2,-20(fp)
   121ac:	e0fffa17 	ldw	r3,-24(fp)
   121b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   121b4:	e0bffa17 	ldw	r2,-24(fp)
   121b8:	10c00017 	ldw	r3,0(r2)
   121bc:	e0bffb17 	ldw	r2,-20(fp)
   121c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   121c4:	e0bffa17 	ldw	r2,-24(fp)
   121c8:	10800017 	ldw	r2,0(r2)
   121cc:	e0fffb17 	ldw	r3,-20(fp)
   121d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   121d4:	e0bffa17 	ldw	r2,-24(fp)
   121d8:	e0fffb17 	ldw	r3,-20(fp)
   121dc:	10c00015 	stw	r3,0(r2)
   121e0:	e0bff817 	ldw	r2,-32(fp)
   121e4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   121e8:	e0bff717 	ldw	r2,-36(fp)
   121ec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   121f0:	0005883a 	mov	r2,zero
   121f4:	00000306 	br	12204 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   121f8:	00bffa84 	movi	r2,-22
   121fc:	00000106 	br	12204 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   12200:	00bfde84 	movi	r2,-134
  }
}
   12204:	e037883a 	mov	sp,fp
   12208:	df000017 	ldw	fp,0(sp)
   1220c:	dec00104 	addi	sp,sp,4
   12210:	f800283a 	ret

00012214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12214:	defffe04 	addi	sp,sp,-8
   12218:	dfc00115 	stw	ra,4(sp)
   1221c:	df000015 	stw	fp,0(sp)
   12220:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12224:	d0a00717 	ldw	r2,-32740(gp)
   12228:	10000326 	beq	r2,zero,12238 <alt_get_errno+0x24>
   1222c:	d0a00717 	ldw	r2,-32740(gp)
   12230:	103ee83a 	callr	r2
   12234:	00000106 	br	1223c <alt_get_errno+0x28>
   12238:	d0a4d004 	addi	r2,gp,-27840
}
   1223c:	e037883a 	mov	sp,fp
   12240:	dfc00117 	ldw	ra,4(sp)
   12244:	df000017 	ldw	fp,0(sp)
   12248:	dec00204 	addi	sp,sp,8
   1224c:	f800283a 	ret

00012250 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12250:	defffb04 	addi	sp,sp,-20
   12254:	dfc00415 	stw	ra,16(sp)
   12258:	df000315 	stw	fp,12(sp)
   1225c:	df000304 	addi	fp,sp,12
   12260:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12264:	e0bfff17 	ldw	r2,-4(fp)
   12268:	10000616 	blt	r2,zero,12284 <close+0x34>
   1226c:	e0bfff17 	ldw	r2,-4(fp)
   12270:	10c00324 	muli	r3,r2,12
   12274:	00800074 	movhi	r2,1
   12278:	1091ae04 	addi	r2,r2,18104
   1227c:	1885883a 	add	r2,r3,r2
   12280:	00000106 	br	12288 <close+0x38>
   12284:	0005883a 	mov	r2,zero
   12288:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1228c:	e0bffd17 	ldw	r2,-12(fp)
   12290:	10001926 	beq	r2,zero,122f8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12294:	e0bffd17 	ldw	r2,-12(fp)
   12298:	10800017 	ldw	r2,0(r2)
   1229c:	10800417 	ldw	r2,16(r2)
   122a0:	10000626 	beq	r2,zero,122bc <close+0x6c>
   122a4:	e0bffd17 	ldw	r2,-12(fp)
   122a8:	10800017 	ldw	r2,0(r2)
   122ac:	10800417 	ldw	r2,16(r2)
   122b0:	e13ffd17 	ldw	r4,-12(fp)
   122b4:	103ee83a 	callr	r2
   122b8:	00000106 	br	122c0 <close+0x70>
   122bc:	0005883a 	mov	r2,zero
   122c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   122c4:	e13fff17 	ldw	r4,-4(fp)
   122c8:	0012b9c0 	call	12b9c <alt_release_fd>
    if (rval < 0)
   122cc:	e0bffe17 	ldw	r2,-8(fp)
   122d0:	1000070e 	bge	r2,zero,122f0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   122d4:	00122140 	call	12214 <alt_get_errno>
   122d8:	1007883a 	mov	r3,r2
   122dc:	e0bffe17 	ldw	r2,-8(fp)
   122e0:	0085c83a 	sub	r2,zero,r2
   122e4:	18800015 	stw	r2,0(r3)
      return -1;
   122e8:	00bfffc4 	movi	r2,-1
   122ec:	00000706 	br	1230c <close+0xbc>
    }
    return 0;
   122f0:	0005883a 	mov	r2,zero
   122f4:	00000506 	br	1230c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   122f8:	00122140 	call	12214 <alt_get_errno>
   122fc:	1007883a 	mov	r3,r2
   12300:	00801444 	movi	r2,81
   12304:	18800015 	stw	r2,0(r3)
    return -1;
   12308:	00bfffc4 	movi	r2,-1
  }
}
   1230c:	e037883a 	mov	sp,fp
   12310:	dfc00117 	ldw	ra,4(sp)
   12314:	df000017 	ldw	fp,0(sp)
   12318:	dec00204 	addi	sp,sp,8
   1231c:	f800283a 	ret

00012320 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12320:	defffe04 	addi	sp,sp,-8
   12324:	df000115 	stw	fp,4(sp)
   12328:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1232c:	e03fff15 	stw	zero,-4(fp)
   12330:	00000506 	br	12348 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   12334:	e0bfff17 	ldw	r2,-4(fp)
   12338:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1233c:	e0bfff17 	ldw	r2,-4(fp)
   12340:	10800804 	addi	r2,r2,32
   12344:	e0bfff15 	stw	r2,-4(fp)
   12348:	e0bfff17 	ldw	r2,-4(fp)
   1234c:	10820030 	cmpltui	r2,r2,2048
   12350:	103ff81e 	bne	r2,zero,12334 <_gp+0xffff5afc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   12354:	0001883a 	nop
   12358:	e037883a 	mov	sp,fp
   1235c:	df000017 	ldw	fp,0(sp)
   12360:	dec00104 	addi	sp,sp,4
   12364:	f800283a 	ret

00012368 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12368:	defffc04 	addi	sp,sp,-16
   1236c:	df000315 	stw	fp,12(sp)
   12370:	df000304 	addi	fp,sp,12
   12374:	e13ffd15 	stw	r4,-12(fp)
   12378:	e17ffe15 	stw	r5,-8(fp)
   1237c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12380:	e0bfff17 	ldw	r2,-4(fp)
}
   12384:	e037883a 	mov	sp,fp
   12388:	df000017 	ldw	fp,0(sp)
   1238c:	dec00104 	addi	sp,sp,4
   12390:	f800283a 	ret

00012394 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12394:	defffe04 	addi	sp,sp,-8
   12398:	dfc00115 	stw	ra,4(sp)
   1239c:	df000015 	stw	fp,0(sp)
   123a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   123a4:	d0a00717 	ldw	r2,-32740(gp)
   123a8:	10000326 	beq	r2,zero,123b8 <alt_get_errno+0x24>
   123ac:	d0a00717 	ldw	r2,-32740(gp)
   123b0:	103ee83a 	callr	r2
   123b4:	00000106 	br	123bc <alt_get_errno+0x28>
   123b8:	d0a4d004 	addi	r2,gp,-27840
}
   123bc:	e037883a 	mov	sp,fp
   123c0:	dfc00117 	ldw	ra,4(sp)
   123c4:	df000017 	ldw	fp,0(sp)
   123c8:	dec00204 	addi	sp,sp,8
   123cc:	f800283a 	ret

000123d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   123d0:	defffa04 	addi	sp,sp,-24
   123d4:	dfc00515 	stw	ra,20(sp)
   123d8:	df000415 	stw	fp,16(sp)
   123dc:	df000404 	addi	fp,sp,16
   123e0:	e13ffe15 	stw	r4,-8(fp)
   123e4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   123e8:	e0bffe17 	ldw	r2,-8(fp)
   123ec:	10000326 	beq	r2,zero,123fc <alt_dev_llist_insert+0x2c>
   123f0:	e0bffe17 	ldw	r2,-8(fp)
   123f4:	10800217 	ldw	r2,8(r2)
   123f8:	1000061e 	bne	r2,zero,12414 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   123fc:	00123940 	call	12394 <alt_get_errno>
   12400:	1007883a 	mov	r3,r2
   12404:	00800584 	movi	r2,22
   12408:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1240c:	00bffa84 	movi	r2,-22
   12410:	00001306 	br	12460 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   12414:	e0bffe17 	ldw	r2,-8(fp)
   12418:	e0ffff17 	ldw	r3,-4(fp)
   1241c:	e0fffc15 	stw	r3,-16(fp)
   12420:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12424:	e0bffd17 	ldw	r2,-12(fp)
   12428:	e0fffc17 	ldw	r3,-16(fp)
   1242c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12430:	e0bffc17 	ldw	r2,-16(fp)
   12434:	10c00017 	ldw	r3,0(r2)
   12438:	e0bffd17 	ldw	r2,-12(fp)
   1243c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12440:	e0bffc17 	ldw	r2,-16(fp)
   12444:	10800017 	ldw	r2,0(r2)
   12448:	e0fffd17 	ldw	r3,-12(fp)
   1244c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12450:	e0bffc17 	ldw	r2,-16(fp)
   12454:	e0fffd17 	ldw	r3,-12(fp)
   12458:	10c00015 	stw	r3,0(r2)

  return 0;  
   1245c:	0005883a 	mov	r2,zero
}
   12460:	e037883a 	mov	sp,fp
   12464:	dfc00117 	ldw	ra,4(sp)
   12468:	df000017 	ldw	fp,0(sp)
   1246c:	dec00204 	addi	sp,sp,8
   12470:	f800283a 	ret

00012474 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   12474:	defffd04 	addi	sp,sp,-12
   12478:	dfc00215 	stw	ra,8(sp)
   1247c:	df000115 	stw	fp,4(sp)
   12480:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12484:	00800074 	movhi	r2,1
   12488:	108d3504 	addi	r2,r2,13524
   1248c:	e0bfff15 	stw	r2,-4(fp)
   12490:	00000606 	br	124ac <_do_ctors+0x38>
        (*ctor) (); 
   12494:	e0bfff17 	ldw	r2,-4(fp)
   12498:	10800017 	ldw	r2,0(r2)
   1249c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   124a0:	e0bfff17 	ldw	r2,-4(fp)
   124a4:	10bfff04 	addi	r2,r2,-4
   124a8:	e0bfff15 	stw	r2,-4(fp)
   124ac:	e0ffff17 	ldw	r3,-4(fp)
   124b0:	00800074 	movhi	r2,1
   124b4:	108d3604 	addi	r2,r2,13528
   124b8:	18bff62e 	bgeu	r3,r2,12494 <_gp+0xffff5c5c>
        (*ctor) (); 
}
   124bc:	0001883a 	nop
   124c0:	e037883a 	mov	sp,fp
   124c4:	dfc00117 	ldw	ra,4(sp)
   124c8:	df000017 	ldw	fp,0(sp)
   124cc:	dec00204 	addi	sp,sp,8
   124d0:	f800283a 	ret

000124d4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   124d4:	defffd04 	addi	sp,sp,-12
   124d8:	dfc00215 	stw	ra,8(sp)
   124dc:	df000115 	stw	fp,4(sp)
   124e0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   124e4:	00800074 	movhi	r2,1
   124e8:	108d3504 	addi	r2,r2,13524
   124ec:	e0bfff15 	stw	r2,-4(fp)
   124f0:	00000606 	br	1250c <_do_dtors+0x38>
        (*dtor) (); 
   124f4:	e0bfff17 	ldw	r2,-4(fp)
   124f8:	10800017 	ldw	r2,0(r2)
   124fc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12500:	e0bfff17 	ldw	r2,-4(fp)
   12504:	10bfff04 	addi	r2,r2,-4
   12508:	e0bfff15 	stw	r2,-4(fp)
   1250c:	e0ffff17 	ldw	r3,-4(fp)
   12510:	00800074 	movhi	r2,1
   12514:	108d3604 	addi	r2,r2,13528
   12518:	18bff62e 	bgeu	r3,r2,124f4 <_gp+0xffff5cbc>
        (*dtor) (); 
}
   1251c:	0001883a 	nop
   12520:	e037883a 	mov	sp,fp
   12524:	dfc00117 	ldw	ra,4(sp)
   12528:	df000017 	ldw	fp,0(sp)
   1252c:	dec00204 	addi	sp,sp,8
   12530:	f800283a 	ret

00012534 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12534:	defffe04 	addi	sp,sp,-8
   12538:	dfc00115 	stw	ra,4(sp)
   1253c:	df000015 	stw	fp,0(sp)
   12540:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   12544:	01440004 	movi	r5,4096
   12548:	0009883a 	mov	r4,zero
   1254c:	00130040 	call	13004 <alt_icache_flush>
#endif
}
   12550:	0001883a 	nop
   12554:	e037883a 	mov	sp,fp
   12558:	dfc00117 	ldw	ra,4(sp)
   1255c:	df000017 	ldw	fp,0(sp)
   12560:	dec00204 	addi	sp,sp,8
   12564:	f800283a 	ret

00012568 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12568:	defff904 	addi	sp,sp,-28
   1256c:	dfc00615 	stw	ra,24(sp)
   12570:	df000515 	stw	fp,20(sp)
   12574:	df000504 	addi	fp,sp,20
   12578:	e13ffc15 	stw	r4,-16(fp)
   1257c:	e17ffd15 	stw	r5,-12(fp)
   12580:	e1bffe15 	stw	r6,-8(fp)
   12584:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   12588:	e0800217 	ldw	r2,8(fp)
   1258c:	d8800015 	stw	r2,0(sp)
   12590:	e1ffff17 	ldw	r7,-4(fp)
   12594:	e1bffe17 	ldw	r6,-8(fp)
   12598:	e17ffd17 	ldw	r5,-12(fp)
   1259c:	e13ffc17 	ldw	r4,-16(fp)
   125a0:	00127180 	call	12718 <alt_iic_isr_register>
}  
   125a4:	e037883a 	mov	sp,fp
   125a8:	dfc00117 	ldw	ra,4(sp)
   125ac:	df000017 	ldw	fp,0(sp)
   125b0:	dec00204 	addi	sp,sp,8
   125b4:	f800283a 	ret

000125b8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   125b8:	defff904 	addi	sp,sp,-28
   125bc:	df000615 	stw	fp,24(sp)
   125c0:	df000604 	addi	fp,sp,24
   125c4:	e13ffe15 	stw	r4,-8(fp)
   125c8:	e17fff15 	stw	r5,-4(fp)
   125cc:	e0bfff17 	ldw	r2,-4(fp)
   125d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   125d4:	0005303a 	rdctl	r2,status
   125d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   125dc:	e0fffb17 	ldw	r3,-20(fp)
   125e0:	00bfff84 	movi	r2,-2
   125e4:	1884703a 	and	r2,r3,r2
   125e8:	1001703a 	wrctl	status,r2
  
  return context;
   125ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   125f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   125f4:	00c00044 	movi	r3,1
   125f8:	e0bffa17 	ldw	r2,-24(fp)
   125fc:	1884983a 	sll	r2,r3,r2
   12600:	1007883a 	mov	r3,r2
   12604:	d0a4d617 	ldw	r2,-27816(gp)
   12608:	1884b03a 	or	r2,r3,r2
   1260c:	d0a4d615 	stw	r2,-27816(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12610:	d0a4d617 	ldw	r2,-27816(gp)
   12614:	100170fa 	wrctl	ienable,r2
   12618:	e0bffc17 	ldw	r2,-16(fp)
   1261c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12620:	e0bffd17 	ldw	r2,-12(fp)
   12624:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12628:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1262c:	0001883a 	nop
}
   12630:	e037883a 	mov	sp,fp
   12634:	df000017 	ldw	fp,0(sp)
   12638:	dec00104 	addi	sp,sp,4
   1263c:	f800283a 	ret

00012640 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   12640:	defff904 	addi	sp,sp,-28
   12644:	df000615 	stw	fp,24(sp)
   12648:	df000604 	addi	fp,sp,24
   1264c:	e13ffe15 	stw	r4,-8(fp)
   12650:	e17fff15 	stw	r5,-4(fp)
   12654:	e0bfff17 	ldw	r2,-4(fp)
   12658:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1265c:	0005303a 	rdctl	r2,status
   12660:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12664:	e0fffb17 	ldw	r3,-20(fp)
   12668:	00bfff84 	movi	r2,-2
   1266c:	1884703a 	and	r2,r3,r2
   12670:	1001703a 	wrctl	status,r2
  
  return context;
   12674:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12678:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1267c:	00c00044 	movi	r3,1
   12680:	e0bffa17 	ldw	r2,-24(fp)
   12684:	1884983a 	sll	r2,r3,r2
   12688:	0084303a 	nor	r2,zero,r2
   1268c:	1007883a 	mov	r3,r2
   12690:	d0a4d617 	ldw	r2,-27816(gp)
   12694:	1884703a 	and	r2,r3,r2
   12698:	d0a4d615 	stw	r2,-27816(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1269c:	d0a4d617 	ldw	r2,-27816(gp)
   126a0:	100170fa 	wrctl	ienable,r2
   126a4:	e0bffc17 	ldw	r2,-16(fp)
   126a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   126ac:	e0bffd17 	ldw	r2,-12(fp)
   126b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   126b4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   126b8:	0001883a 	nop
}
   126bc:	e037883a 	mov	sp,fp
   126c0:	df000017 	ldw	fp,0(sp)
   126c4:	dec00104 	addi	sp,sp,4
   126c8:	f800283a 	ret

000126cc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   126cc:	defffc04 	addi	sp,sp,-16
   126d0:	df000315 	stw	fp,12(sp)
   126d4:	df000304 	addi	fp,sp,12
   126d8:	e13ffe15 	stw	r4,-8(fp)
   126dc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   126e0:	000530fa 	rdctl	r2,ienable
   126e4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   126e8:	00c00044 	movi	r3,1
   126ec:	e0bfff17 	ldw	r2,-4(fp)
   126f0:	1884983a 	sll	r2,r3,r2
   126f4:	1007883a 	mov	r3,r2
   126f8:	e0bffd17 	ldw	r2,-12(fp)
   126fc:	1884703a 	and	r2,r3,r2
   12700:	1004c03a 	cmpne	r2,r2,zero
   12704:	10803fcc 	andi	r2,r2,255
}
   12708:	e037883a 	mov	sp,fp
   1270c:	df000017 	ldw	fp,0(sp)
   12710:	dec00104 	addi	sp,sp,4
   12714:	f800283a 	ret

00012718 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12718:	defff504 	addi	sp,sp,-44
   1271c:	dfc00a15 	stw	ra,40(sp)
   12720:	df000915 	stw	fp,36(sp)
   12724:	df000904 	addi	fp,sp,36
   12728:	e13ffc15 	stw	r4,-16(fp)
   1272c:	e17ffd15 	stw	r5,-12(fp)
   12730:	e1bffe15 	stw	r6,-8(fp)
   12734:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   12738:	00bffa84 	movi	r2,-22
   1273c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   12740:	e0bffd17 	ldw	r2,-12(fp)
   12744:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   12748:	e0bff817 	ldw	r2,-32(fp)
   1274c:	10800808 	cmpgei	r2,r2,32
   12750:	1000271e 	bne	r2,zero,127f0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12754:	0005303a 	rdctl	r2,status
   12758:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1275c:	e0fffb17 	ldw	r3,-20(fp)
   12760:	00bfff84 	movi	r2,-2
   12764:	1884703a 	and	r2,r3,r2
   12768:	1001703a 	wrctl	status,r2
  
  return context;
   1276c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   12770:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   12774:	00800074 	movhi	r2,1
   12778:	1096e804 	addi	r2,r2,23456
   1277c:	e0fff817 	ldw	r3,-32(fp)
   12780:	180690fa 	slli	r3,r3,3
   12784:	10c5883a 	add	r2,r2,r3
   12788:	e0fffe17 	ldw	r3,-8(fp)
   1278c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   12790:	00800074 	movhi	r2,1
   12794:	1096e804 	addi	r2,r2,23456
   12798:	e0fff817 	ldw	r3,-32(fp)
   1279c:	180690fa 	slli	r3,r3,3
   127a0:	10c5883a 	add	r2,r2,r3
   127a4:	10800104 	addi	r2,r2,4
   127a8:	e0ffff17 	ldw	r3,-4(fp)
   127ac:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   127b0:	e0bffe17 	ldw	r2,-8(fp)
   127b4:	10000526 	beq	r2,zero,127cc <alt_iic_isr_register+0xb4>
   127b8:	e0bff817 	ldw	r2,-32(fp)
   127bc:	100b883a 	mov	r5,r2
   127c0:	e13ffc17 	ldw	r4,-16(fp)
   127c4:	00125b80 	call	125b8 <alt_ic_irq_enable>
   127c8:	00000406 	br	127dc <alt_iic_isr_register+0xc4>
   127cc:	e0bff817 	ldw	r2,-32(fp)
   127d0:	100b883a 	mov	r5,r2
   127d4:	e13ffc17 	ldw	r4,-16(fp)
   127d8:	00126400 	call	12640 <alt_ic_irq_disable>
   127dc:	e0bff715 	stw	r2,-36(fp)
   127e0:	e0bffa17 	ldw	r2,-24(fp)
   127e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127e8:	e0bff917 	ldw	r2,-28(fp)
   127ec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   127f0:	e0bff717 	ldw	r2,-36(fp)
}
   127f4:	e037883a 	mov	sp,fp
   127f8:	dfc00117 	ldw	ra,4(sp)
   127fc:	df000017 	ldw	fp,0(sp)
   12800:	dec00204 	addi	sp,sp,8
   12804:	f800283a 	ret

00012808 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   12808:	defff904 	addi	sp,sp,-28
   1280c:	dfc00615 	stw	ra,24(sp)
   12810:	df000515 	stw	fp,20(sp)
   12814:	df000504 	addi	fp,sp,20
   12818:	e13ffc15 	stw	r4,-16(fp)
   1281c:	e17ffd15 	stw	r5,-12(fp)
   12820:	e1bffe15 	stw	r6,-8(fp)
   12824:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   12828:	e1bfff17 	ldw	r6,-4(fp)
   1282c:	e17ffe17 	ldw	r5,-8(fp)
   12830:	e13ffd17 	ldw	r4,-12(fp)
   12834:	0012a480 	call	12a48 <open>
   12838:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1283c:	e0bffb17 	ldw	r2,-20(fp)
   12840:	10001c16 	blt	r2,zero,128b4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   12844:	00800074 	movhi	r2,1
   12848:	1091ae04 	addi	r2,r2,18104
   1284c:	e0fffb17 	ldw	r3,-20(fp)
   12850:	18c00324 	muli	r3,r3,12
   12854:	10c5883a 	add	r2,r2,r3
   12858:	10c00017 	ldw	r3,0(r2)
   1285c:	e0bffc17 	ldw	r2,-16(fp)
   12860:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   12864:	00800074 	movhi	r2,1
   12868:	1091ae04 	addi	r2,r2,18104
   1286c:	e0fffb17 	ldw	r3,-20(fp)
   12870:	18c00324 	muli	r3,r3,12
   12874:	10c5883a 	add	r2,r2,r3
   12878:	10800104 	addi	r2,r2,4
   1287c:	10c00017 	ldw	r3,0(r2)
   12880:	e0bffc17 	ldw	r2,-16(fp)
   12884:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   12888:	00800074 	movhi	r2,1
   1288c:	1091ae04 	addi	r2,r2,18104
   12890:	e0fffb17 	ldw	r3,-20(fp)
   12894:	18c00324 	muli	r3,r3,12
   12898:	10c5883a 	add	r2,r2,r3
   1289c:	10800204 	addi	r2,r2,8
   128a0:	10c00017 	ldw	r3,0(r2)
   128a4:	e0bffc17 	ldw	r2,-16(fp)
   128a8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   128ac:	e13ffb17 	ldw	r4,-20(fp)
   128b0:	0012b9c0 	call	12b9c <alt_release_fd>
  }
} 
   128b4:	0001883a 	nop
   128b8:	e037883a 	mov	sp,fp
   128bc:	dfc00117 	ldw	ra,4(sp)
   128c0:	df000017 	ldw	fp,0(sp)
   128c4:	dec00204 	addi	sp,sp,8
   128c8:	f800283a 	ret

000128cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   128cc:	defffb04 	addi	sp,sp,-20
   128d0:	dfc00415 	stw	ra,16(sp)
   128d4:	df000315 	stw	fp,12(sp)
   128d8:	df000304 	addi	fp,sp,12
   128dc:	e13ffd15 	stw	r4,-12(fp)
   128e0:	e17ffe15 	stw	r5,-8(fp)
   128e4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   128e8:	01c07fc4 	movi	r7,511
   128ec:	01800044 	movi	r6,1
   128f0:	e17ffd17 	ldw	r5,-12(fp)
   128f4:	01000074 	movhi	r4,1
   128f8:	2111b104 	addi	r4,r4,18116
   128fc:	00128080 	call	12808 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   12900:	01c07fc4 	movi	r7,511
   12904:	000d883a 	mov	r6,zero
   12908:	e17ffe17 	ldw	r5,-8(fp)
   1290c:	01000074 	movhi	r4,1
   12910:	2111ae04 	addi	r4,r4,18104
   12914:	00128080 	call	12808 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   12918:	01c07fc4 	movi	r7,511
   1291c:	01800044 	movi	r6,1
   12920:	e17fff17 	ldw	r5,-4(fp)
   12924:	01000074 	movhi	r4,1
   12928:	2111b404 	addi	r4,r4,18128
   1292c:	00128080 	call	12808 <alt_open_fd>
}  
   12930:	0001883a 	nop
   12934:	e037883a 	mov	sp,fp
   12938:	dfc00117 	ldw	ra,4(sp)
   1293c:	df000017 	ldw	fp,0(sp)
   12940:	dec00204 	addi	sp,sp,8
   12944:	f800283a 	ret

00012948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12948:	defffe04 	addi	sp,sp,-8
   1294c:	dfc00115 	stw	ra,4(sp)
   12950:	df000015 	stw	fp,0(sp)
   12954:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12958:	d0a00717 	ldw	r2,-32740(gp)
   1295c:	10000326 	beq	r2,zero,1296c <alt_get_errno+0x24>
   12960:	d0a00717 	ldw	r2,-32740(gp)
   12964:	103ee83a 	callr	r2
   12968:	00000106 	br	12970 <alt_get_errno+0x28>
   1296c:	d0a4d004 	addi	r2,gp,-27840
}
   12970:	e037883a 	mov	sp,fp
   12974:	dfc00117 	ldw	ra,4(sp)
   12978:	df000017 	ldw	fp,0(sp)
   1297c:	dec00204 	addi	sp,sp,8
   12980:	f800283a 	ret

00012984 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   12984:	defffd04 	addi	sp,sp,-12
   12988:	df000215 	stw	fp,8(sp)
   1298c:	df000204 	addi	fp,sp,8
   12990:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   12994:	e0bfff17 	ldw	r2,-4(fp)
   12998:	10800217 	ldw	r2,8(r2)
   1299c:	10d00034 	orhi	r3,r2,16384
   129a0:	e0bfff17 	ldw	r2,-4(fp)
   129a4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   129a8:	e03ffe15 	stw	zero,-8(fp)
   129ac:	00001d06 	br	12a24 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   129b0:	00800074 	movhi	r2,1
   129b4:	1091ae04 	addi	r2,r2,18104
   129b8:	e0fffe17 	ldw	r3,-8(fp)
   129bc:	18c00324 	muli	r3,r3,12
   129c0:	10c5883a 	add	r2,r2,r3
   129c4:	10c00017 	ldw	r3,0(r2)
   129c8:	e0bfff17 	ldw	r2,-4(fp)
   129cc:	10800017 	ldw	r2,0(r2)
   129d0:	1880111e 	bne	r3,r2,12a18 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   129d4:	00800074 	movhi	r2,1
   129d8:	1091ae04 	addi	r2,r2,18104
   129dc:	e0fffe17 	ldw	r3,-8(fp)
   129e0:	18c00324 	muli	r3,r3,12
   129e4:	10c5883a 	add	r2,r2,r3
   129e8:	10800204 	addi	r2,r2,8
   129ec:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   129f0:	1000090e 	bge	r2,zero,12a18 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   129f4:	e0bffe17 	ldw	r2,-8(fp)
   129f8:	10c00324 	muli	r3,r2,12
   129fc:	00800074 	movhi	r2,1
   12a00:	1091ae04 	addi	r2,r2,18104
   12a04:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12a08:	e0bfff17 	ldw	r2,-4(fp)
   12a0c:	18800226 	beq	r3,r2,12a18 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   12a10:	00bffcc4 	movi	r2,-13
   12a14:	00000806 	br	12a38 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12a18:	e0bffe17 	ldw	r2,-8(fp)
   12a1c:	10800044 	addi	r2,r2,1
   12a20:	e0bffe15 	stw	r2,-8(fp)
   12a24:	d0a00617 	ldw	r2,-32744(gp)
   12a28:	1007883a 	mov	r3,r2
   12a2c:	e0bffe17 	ldw	r2,-8(fp)
   12a30:	18bfdf2e 	bgeu	r3,r2,129b0 <_gp+0xffff6178>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12a34:	0005883a 	mov	r2,zero
}
   12a38:	e037883a 	mov	sp,fp
   12a3c:	df000017 	ldw	fp,0(sp)
   12a40:	dec00104 	addi	sp,sp,4
   12a44:	f800283a 	ret

00012a48 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   12a48:	defff604 	addi	sp,sp,-40
   12a4c:	dfc00915 	stw	ra,36(sp)
   12a50:	df000815 	stw	fp,32(sp)
   12a54:	df000804 	addi	fp,sp,32
   12a58:	e13ffd15 	stw	r4,-12(fp)
   12a5c:	e17ffe15 	stw	r5,-8(fp)
   12a60:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   12a64:	00bfffc4 	movi	r2,-1
   12a68:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   12a6c:	00bffb44 	movi	r2,-19
   12a70:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   12a74:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12a78:	d1600404 	addi	r5,gp,-32752
   12a7c:	e13ffd17 	ldw	r4,-12(fp)
   12a80:	0012dc80 	call	12dc8 <alt_find_dev>
   12a84:	e0bff815 	stw	r2,-32(fp)
   12a88:	e0bff817 	ldw	r2,-32(fp)
   12a8c:	1000051e 	bne	r2,zero,12aa4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   12a90:	e13ffd17 	ldw	r4,-12(fp)
   12a94:	0012e580 	call	12e58 <alt_find_file>
   12a98:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   12a9c:	00800044 	movi	r2,1
   12aa0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   12aa4:	e0bff817 	ldw	r2,-32(fp)
   12aa8:	10002926 	beq	r2,zero,12b50 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12aac:	e13ff817 	ldw	r4,-32(fp)
   12ab0:	0012f600 	call	12f60 <alt_get_fd>
   12ab4:	e0bff915 	stw	r2,-28(fp)
   12ab8:	e0bff917 	ldw	r2,-28(fp)
   12abc:	1000030e 	bge	r2,zero,12acc <open+0x84>
    {
      status = index;
   12ac0:	e0bff917 	ldw	r2,-28(fp)
   12ac4:	e0bffa15 	stw	r2,-24(fp)
   12ac8:	00002306 	br	12b58 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   12acc:	e0bff917 	ldw	r2,-28(fp)
   12ad0:	10c00324 	muli	r3,r2,12
   12ad4:	00800074 	movhi	r2,1
   12ad8:	1091ae04 	addi	r2,r2,18104
   12adc:	1885883a 	add	r2,r3,r2
   12ae0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   12ae4:	e0fffe17 	ldw	r3,-8(fp)
   12ae8:	00900034 	movhi	r2,16384
   12aec:	10bfffc4 	addi	r2,r2,-1
   12af0:	1886703a 	and	r3,r3,r2
   12af4:	e0bffc17 	ldw	r2,-16(fp)
   12af8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   12afc:	e0bffb17 	ldw	r2,-20(fp)
   12b00:	1000051e 	bne	r2,zero,12b18 <open+0xd0>
   12b04:	e13ffc17 	ldw	r4,-16(fp)
   12b08:	00129840 	call	12984 <alt_file_locked>
   12b0c:	e0bffa15 	stw	r2,-24(fp)
   12b10:	e0bffa17 	ldw	r2,-24(fp)
   12b14:	10001016 	blt	r2,zero,12b58 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   12b18:	e0bff817 	ldw	r2,-32(fp)
   12b1c:	10800317 	ldw	r2,12(r2)
   12b20:	10000826 	beq	r2,zero,12b44 <open+0xfc>
   12b24:	e0bff817 	ldw	r2,-32(fp)
   12b28:	10800317 	ldw	r2,12(r2)
   12b2c:	e1ffff17 	ldw	r7,-4(fp)
   12b30:	e1bffe17 	ldw	r6,-8(fp)
   12b34:	e17ffd17 	ldw	r5,-12(fp)
   12b38:	e13ffc17 	ldw	r4,-16(fp)
   12b3c:	103ee83a 	callr	r2
   12b40:	00000106 	br	12b48 <open+0x100>
   12b44:	0005883a 	mov	r2,zero
   12b48:	e0bffa15 	stw	r2,-24(fp)
   12b4c:	00000206 	br	12b58 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   12b50:	00bffb44 	movi	r2,-19
   12b54:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   12b58:	e0bffa17 	ldw	r2,-24(fp)
   12b5c:	1000090e 	bge	r2,zero,12b84 <open+0x13c>
  {
    alt_release_fd (index);  
   12b60:	e13ff917 	ldw	r4,-28(fp)
   12b64:	0012b9c0 	call	12b9c <alt_release_fd>
    ALT_ERRNO = -status;
   12b68:	00129480 	call	12948 <alt_get_errno>
   12b6c:	1007883a 	mov	r3,r2
   12b70:	e0bffa17 	ldw	r2,-24(fp)
   12b74:	0085c83a 	sub	r2,zero,r2
   12b78:	18800015 	stw	r2,0(r3)
    return -1;
   12b7c:	00bfffc4 	movi	r2,-1
   12b80:	00000106 	br	12b88 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   12b84:	e0bff917 	ldw	r2,-28(fp)
}
   12b88:	e037883a 	mov	sp,fp
   12b8c:	dfc00117 	ldw	ra,4(sp)
   12b90:	df000017 	ldw	fp,0(sp)
   12b94:	dec00204 	addi	sp,sp,8
   12b98:	f800283a 	ret

00012b9c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12b9c:	defffe04 	addi	sp,sp,-8
   12ba0:	df000115 	stw	fp,4(sp)
   12ba4:	df000104 	addi	fp,sp,4
   12ba8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   12bac:	e0bfff17 	ldw	r2,-4(fp)
   12bb0:	108000d0 	cmplti	r2,r2,3
   12bb4:	10000d1e 	bne	r2,zero,12bec <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   12bb8:	00800074 	movhi	r2,1
   12bbc:	1091ae04 	addi	r2,r2,18104
   12bc0:	e0ffff17 	ldw	r3,-4(fp)
   12bc4:	18c00324 	muli	r3,r3,12
   12bc8:	10c5883a 	add	r2,r2,r3
   12bcc:	10800204 	addi	r2,r2,8
   12bd0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12bd4:	00800074 	movhi	r2,1
   12bd8:	1091ae04 	addi	r2,r2,18104
   12bdc:	e0ffff17 	ldw	r3,-4(fp)
   12be0:	18c00324 	muli	r3,r3,12
   12be4:	10c5883a 	add	r2,r2,r3
   12be8:	10000015 	stw	zero,0(r2)
  }
}
   12bec:	0001883a 	nop
   12bf0:	e037883a 	mov	sp,fp
   12bf4:	df000017 	ldw	fp,0(sp)
   12bf8:	dec00104 	addi	sp,sp,4
   12bfc:	f800283a 	ret

00012c00 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   12c00:	defffa04 	addi	sp,sp,-24
   12c04:	df000515 	stw	fp,20(sp)
   12c08:	df000504 	addi	fp,sp,20
   12c0c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c10:	0005303a 	rdctl	r2,status
   12c14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c18:	e0fffc17 	ldw	r3,-16(fp)
   12c1c:	00bfff84 	movi	r2,-2
   12c20:	1884703a 	and	r2,r3,r2
   12c24:	1001703a 	wrctl	status,r2
  
  return context;
   12c28:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   12c2c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   12c30:	e0bfff17 	ldw	r2,-4(fp)
   12c34:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   12c38:	e0bffd17 	ldw	r2,-12(fp)
   12c3c:	10800017 	ldw	r2,0(r2)
   12c40:	e0fffd17 	ldw	r3,-12(fp)
   12c44:	18c00117 	ldw	r3,4(r3)
   12c48:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   12c4c:	e0bffd17 	ldw	r2,-12(fp)
   12c50:	10800117 	ldw	r2,4(r2)
   12c54:	e0fffd17 	ldw	r3,-12(fp)
   12c58:	18c00017 	ldw	r3,0(r3)
   12c5c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   12c60:	e0bffd17 	ldw	r2,-12(fp)
   12c64:	e0fffd17 	ldw	r3,-12(fp)
   12c68:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   12c6c:	e0bffd17 	ldw	r2,-12(fp)
   12c70:	e0fffd17 	ldw	r3,-12(fp)
   12c74:	10c00015 	stw	r3,0(r2)
   12c78:	e0bffb17 	ldw	r2,-20(fp)
   12c7c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c80:	e0bffe17 	ldw	r2,-8(fp)
   12c84:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12c88:	0001883a 	nop
   12c8c:	e037883a 	mov	sp,fp
   12c90:	df000017 	ldw	fp,0(sp)
   12c94:	dec00104 	addi	sp,sp,4
   12c98:	f800283a 	ret

00012c9c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12c9c:	defffb04 	addi	sp,sp,-20
   12ca0:	dfc00415 	stw	ra,16(sp)
   12ca4:	df000315 	stw	fp,12(sp)
   12ca8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12cac:	d0a00917 	ldw	r2,-32732(gp)
   12cb0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12cb4:	d0a4d817 	ldw	r2,-27808(gp)
   12cb8:	10800044 	addi	r2,r2,1
   12cbc:	d0a4d815 	stw	r2,-27808(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12cc0:	00002e06 	br	12d7c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   12cc4:	e0bffd17 	ldw	r2,-12(fp)
   12cc8:	10800017 	ldw	r2,0(r2)
   12ccc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   12cd0:	e0bffd17 	ldw	r2,-12(fp)
   12cd4:	10800403 	ldbu	r2,16(r2)
   12cd8:	10803fcc 	andi	r2,r2,255
   12cdc:	10000426 	beq	r2,zero,12cf0 <alt_tick+0x54>
   12ce0:	d0a4d817 	ldw	r2,-27808(gp)
   12ce4:	1000021e 	bne	r2,zero,12cf0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   12ce8:	e0bffd17 	ldw	r2,-12(fp)
   12cec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   12cf0:	e0bffd17 	ldw	r2,-12(fp)
   12cf4:	10800217 	ldw	r2,8(r2)
   12cf8:	d0e4d817 	ldw	r3,-27808(gp)
   12cfc:	18801d36 	bltu	r3,r2,12d74 <alt_tick+0xd8>
   12d00:	e0bffd17 	ldw	r2,-12(fp)
   12d04:	10800403 	ldbu	r2,16(r2)
   12d08:	10803fcc 	andi	r2,r2,255
   12d0c:	1000191e 	bne	r2,zero,12d74 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   12d10:	e0bffd17 	ldw	r2,-12(fp)
   12d14:	10800317 	ldw	r2,12(r2)
   12d18:	e0fffd17 	ldw	r3,-12(fp)
   12d1c:	18c00517 	ldw	r3,20(r3)
   12d20:	1809883a 	mov	r4,r3
   12d24:	103ee83a 	callr	r2
   12d28:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12d2c:	e0bfff17 	ldw	r2,-4(fp)
   12d30:	1000031e 	bne	r2,zero,12d40 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   12d34:	e13ffd17 	ldw	r4,-12(fp)
   12d38:	0012c000 	call	12c00 <alt_alarm_stop>
   12d3c:	00000d06 	br	12d74 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   12d40:	e0bffd17 	ldw	r2,-12(fp)
   12d44:	10c00217 	ldw	r3,8(r2)
   12d48:	e0bfff17 	ldw	r2,-4(fp)
   12d4c:	1887883a 	add	r3,r3,r2
   12d50:	e0bffd17 	ldw	r2,-12(fp)
   12d54:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12d58:	e0bffd17 	ldw	r2,-12(fp)
   12d5c:	10c00217 	ldw	r3,8(r2)
   12d60:	d0a4d817 	ldw	r2,-27808(gp)
   12d64:	1880032e 	bgeu	r3,r2,12d74 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   12d68:	e0bffd17 	ldw	r2,-12(fp)
   12d6c:	00c00044 	movi	r3,1
   12d70:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   12d74:	e0bffe17 	ldw	r2,-8(fp)
   12d78:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12d7c:	e0fffd17 	ldw	r3,-12(fp)
   12d80:	d0a00904 	addi	r2,gp,-32732
   12d84:	18bfcf1e 	bne	r3,r2,12cc4 <_gp+0xffff648c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   12d88:	0001883a 	nop
}
   12d8c:	0001883a 	nop
   12d90:	e037883a 	mov	sp,fp
   12d94:	dfc00117 	ldw	ra,4(sp)
   12d98:	df000017 	ldw	fp,0(sp)
   12d9c:	dec00204 	addi	sp,sp,8
   12da0:	f800283a 	ret

00012da4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   12da4:	deffff04 	addi	sp,sp,-4
   12da8:	df000015 	stw	fp,0(sp)
   12dac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12db0:	000170fa 	wrctl	ienable,zero
}
   12db4:	0001883a 	nop
   12db8:	e037883a 	mov	sp,fp
   12dbc:	df000017 	ldw	fp,0(sp)
   12dc0:	dec00104 	addi	sp,sp,4
   12dc4:	f800283a 	ret

00012dc8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12dc8:	defffa04 	addi	sp,sp,-24
   12dcc:	dfc00515 	stw	ra,20(sp)
   12dd0:	df000415 	stw	fp,16(sp)
   12dd4:	df000404 	addi	fp,sp,16
   12dd8:	e13ffe15 	stw	r4,-8(fp)
   12ddc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12de0:	e0bfff17 	ldw	r2,-4(fp)
   12de4:	10800017 	ldw	r2,0(r2)
   12de8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12dec:	e13ffe17 	ldw	r4,-8(fp)
   12df0:	00108d00 	call	108d0 <strlen>
   12df4:	10800044 	addi	r2,r2,1
   12df8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12dfc:	00000d06 	br	12e34 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12e00:	e0bffc17 	ldw	r2,-16(fp)
   12e04:	10800217 	ldw	r2,8(r2)
   12e08:	e0fffd17 	ldw	r3,-12(fp)
   12e0c:	180d883a 	mov	r6,r3
   12e10:	e17ffe17 	ldw	r5,-8(fp)
   12e14:	1009883a 	mov	r4,r2
   12e18:	00131640 	call	13164 <memcmp>
   12e1c:	1000021e 	bne	r2,zero,12e28 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   12e20:	e0bffc17 	ldw	r2,-16(fp)
   12e24:	00000706 	br	12e44 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   12e28:	e0bffc17 	ldw	r2,-16(fp)
   12e2c:	10800017 	ldw	r2,0(r2)
   12e30:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12e34:	e0fffc17 	ldw	r3,-16(fp)
   12e38:	e0bfff17 	ldw	r2,-4(fp)
   12e3c:	18bff01e 	bne	r3,r2,12e00 <_gp+0xffff65c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   12e40:	0005883a 	mov	r2,zero
}
   12e44:	e037883a 	mov	sp,fp
   12e48:	dfc00117 	ldw	ra,4(sp)
   12e4c:	df000017 	ldw	fp,0(sp)
   12e50:	dec00204 	addi	sp,sp,8
   12e54:	f800283a 	ret

00012e58 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12e58:	defffb04 	addi	sp,sp,-20
   12e5c:	dfc00415 	stw	ra,16(sp)
   12e60:	df000315 	stw	fp,12(sp)
   12e64:	df000304 	addi	fp,sp,12
   12e68:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12e6c:	d0a00217 	ldw	r2,-32760(gp)
   12e70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12e74:	00003106 	br	12f3c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   12e78:	e0bffd17 	ldw	r2,-12(fp)
   12e7c:	10800217 	ldw	r2,8(r2)
   12e80:	1009883a 	mov	r4,r2
   12e84:	00108d00 	call	108d0 <strlen>
   12e88:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   12e8c:	e0bffd17 	ldw	r2,-12(fp)
   12e90:	10c00217 	ldw	r3,8(r2)
   12e94:	e0bffe17 	ldw	r2,-8(fp)
   12e98:	10bfffc4 	addi	r2,r2,-1
   12e9c:	1885883a 	add	r2,r3,r2
   12ea0:	10800003 	ldbu	r2,0(r2)
   12ea4:	10803fcc 	andi	r2,r2,255
   12ea8:	1080201c 	xori	r2,r2,128
   12eac:	10bfe004 	addi	r2,r2,-128
   12eb0:	10800bd8 	cmpnei	r2,r2,47
   12eb4:	1000031e 	bne	r2,zero,12ec4 <alt_find_file+0x6c>
    {
      len -= 1;
   12eb8:	e0bffe17 	ldw	r2,-8(fp)
   12ebc:	10bfffc4 	addi	r2,r2,-1
   12ec0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12ec4:	e0bffe17 	ldw	r2,-8(fp)
   12ec8:	e0ffff17 	ldw	r3,-4(fp)
   12ecc:	1885883a 	add	r2,r3,r2
   12ed0:	10800003 	ldbu	r2,0(r2)
   12ed4:	10803fcc 	andi	r2,r2,255
   12ed8:	1080201c 	xori	r2,r2,128
   12edc:	10bfe004 	addi	r2,r2,-128
   12ee0:	10800be0 	cmpeqi	r2,r2,47
   12ee4:	1000081e 	bne	r2,zero,12f08 <alt_find_file+0xb0>
   12ee8:	e0bffe17 	ldw	r2,-8(fp)
   12eec:	e0ffff17 	ldw	r3,-4(fp)
   12ef0:	1885883a 	add	r2,r3,r2
   12ef4:	10800003 	ldbu	r2,0(r2)
   12ef8:	10803fcc 	andi	r2,r2,255
   12efc:	1080201c 	xori	r2,r2,128
   12f00:	10bfe004 	addi	r2,r2,-128
   12f04:	10000a1e 	bne	r2,zero,12f30 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   12f08:	e0bffd17 	ldw	r2,-12(fp)
   12f0c:	10800217 	ldw	r2,8(r2)
   12f10:	e0fffe17 	ldw	r3,-8(fp)
   12f14:	180d883a 	mov	r6,r3
   12f18:	e17fff17 	ldw	r5,-4(fp)
   12f1c:	1009883a 	mov	r4,r2
   12f20:	00131640 	call	13164 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12f24:	1000021e 	bne	r2,zero,12f30 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12f28:	e0bffd17 	ldw	r2,-12(fp)
   12f2c:	00000706 	br	12f4c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   12f30:	e0bffd17 	ldw	r2,-12(fp)
   12f34:	10800017 	ldw	r2,0(r2)
   12f38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12f3c:	e0fffd17 	ldw	r3,-12(fp)
   12f40:	d0a00204 	addi	r2,gp,-32760
   12f44:	18bfcc1e 	bne	r3,r2,12e78 <_gp+0xffff6640>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12f48:	0005883a 	mov	r2,zero
}
   12f4c:	e037883a 	mov	sp,fp
   12f50:	dfc00117 	ldw	ra,4(sp)
   12f54:	df000017 	ldw	fp,0(sp)
   12f58:	dec00204 	addi	sp,sp,8
   12f5c:	f800283a 	ret

00012f60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12f60:	defffc04 	addi	sp,sp,-16
   12f64:	df000315 	stw	fp,12(sp)
   12f68:	df000304 	addi	fp,sp,12
   12f6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   12f70:	00bffa04 	movi	r2,-24
   12f74:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12f78:	e03ffd15 	stw	zero,-12(fp)
   12f7c:	00001906 	br	12fe4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   12f80:	00800074 	movhi	r2,1
   12f84:	1091ae04 	addi	r2,r2,18104
   12f88:	e0fffd17 	ldw	r3,-12(fp)
   12f8c:	18c00324 	muli	r3,r3,12
   12f90:	10c5883a 	add	r2,r2,r3
   12f94:	10800017 	ldw	r2,0(r2)
   12f98:	10000f1e 	bne	r2,zero,12fd8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   12f9c:	00800074 	movhi	r2,1
   12fa0:	1091ae04 	addi	r2,r2,18104
   12fa4:	e0fffd17 	ldw	r3,-12(fp)
   12fa8:	18c00324 	muli	r3,r3,12
   12fac:	10c5883a 	add	r2,r2,r3
   12fb0:	e0ffff17 	ldw	r3,-4(fp)
   12fb4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12fb8:	d0e00617 	ldw	r3,-32744(gp)
   12fbc:	e0bffd17 	ldw	r2,-12(fp)
   12fc0:	1880020e 	bge	r3,r2,12fcc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   12fc4:	e0bffd17 	ldw	r2,-12(fp)
   12fc8:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   12fcc:	e0bffd17 	ldw	r2,-12(fp)
   12fd0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   12fd4:	00000606 	br	12ff0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12fd8:	e0bffd17 	ldw	r2,-12(fp)
   12fdc:	10800044 	addi	r2,r2,1
   12fe0:	e0bffd15 	stw	r2,-12(fp)
   12fe4:	e0bffd17 	ldw	r2,-12(fp)
   12fe8:	10800810 	cmplti	r2,r2,32
   12fec:	103fe41e 	bne	r2,zero,12f80 <_gp+0xffff6748>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12ff0:	e0bffe17 	ldw	r2,-8(fp)
}
   12ff4:	e037883a 	mov	sp,fp
   12ff8:	df000017 	ldw	fp,0(sp)
   12ffc:	dec00104 	addi	sp,sp,4
   13000:	f800283a 	ret

00013004 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   13004:	defffb04 	addi	sp,sp,-20
   13008:	df000415 	stw	fp,16(sp)
   1300c:	df000404 	addi	fp,sp,16
   13010:	e13ffe15 	stw	r4,-8(fp)
   13014:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   13018:	e0bfff17 	ldw	r2,-4(fp)
   1301c:	10840070 	cmpltui	r2,r2,4097
   13020:	1000021e 	bne	r2,zero,1302c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   13024:	00840004 	movi	r2,4096
   13028:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1302c:	e0fffe17 	ldw	r3,-8(fp)
   13030:	e0bfff17 	ldw	r2,-4(fp)
   13034:	1885883a 	add	r2,r3,r2
   13038:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1303c:	e0bffe17 	ldw	r2,-8(fp)
   13040:	e0bffc15 	stw	r2,-16(fp)
   13044:	00000506 	br	1305c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   13048:	e0bffc17 	ldw	r2,-16(fp)
   1304c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   13050:	e0bffc17 	ldw	r2,-16(fp)
   13054:	10800804 	addi	r2,r2,32
   13058:	e0bffc15 	stw	r2,-16(fp)
   1305c:	e0fffc17 	ldw	r3,-16(fp)
   13060:	e0bffd17 	ldw	r2,-12(fp)
   13064:	18bff836 	bltu	r3,r2,13048 <_gp+0xffff6810>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   13068:	e0bffe17 	ldw	r2,-8(fp)
   1306c:	108007cc 	andi	r2,r2,31
   13070:	10000226 	beq	r2,zero,1307c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   13074:	e0bffc17 	ldw	r2,-16(fp)
   13078:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1307c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   13080:	0001883a 	nop
   13084:	e037883a 	mov	sp,fp
   13088:	df000017 	ldw	fp,0(sp)
   1308c:	dec00104 	addi	sp,sp,4
   13090:	f800283a 	ret

00013094 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   13094:	defffe04 	addi	sp,sp,-8
   13098:	df000115 	stw	fp,4(sp)
   1309c:	df000104 	addi	fp,sp,4
   130a0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   130a4:	e0bfff17 	ldw	r2,-4(fp)
   130a8:	10bffe84 	addi	r2,r2,-6
   130ac:	10c00428 	cmpgeui	r3,r2,16
   130b0:	18001a1e 	bne	r3,zero,1311c <alt_exception_cause_generated_bad_addr+0x88>
   130b4:	100690ba 	slli	r3,r2,2
   130b8:	00800074 	movhi	r2,1
   130bc:	108c3304 	addi	r2,r2,12492
   130c0:	1885883a 	add	r2,r3,r2
   130c4:	10800017 	ldw	r2,0(r2)
   130c8:	1000683a 	jmp	r2
   130cc:	0001310c 	andi	zero,zero,1220
   130d0:	0001310c 	andi	zero,zero,1220
   130d4:	0001311c 	xori	zero,zero,1220
   130d8:	0001311c 	xori	zero,zero,1220
   130dc:	0001311c 	xori	zero,zero,1220
   130e0:	0001310c 	andi	zero,zero,1220
   130e4:	00013114 	movui	zero,1220
   130e8:	0001311c 	xori	zero,zero,1220
   130ec:	0001310c 	andi	zero,zero,1220
   130f0:	0001310c 	andi	zero,zero,1220
   130f4:	0001311c 	xori	zero,zero,1220
   130f8:	0001310c 	andi	zero,zero,1220
   130fc:	00013114 	movui	zero,1220
   13100:	0001311c 	xori	zero,zero,1220
   13104:	0001311c 	xori	zero,zero,1220
   13108:	0001310c 	andi	zero,zero,1220
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1310c:	00800044 	movi	r2,1
   13110:	00000306 	br	13120 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   13114:	0005883a 	mov	r2,zero
   13118:	00000106 	br	13120 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1311c:	0005883a 	mov	r2,zero
  }
}
   13120:	e037883a 	mov	sp,fp
   13124:	df000017 	ldw	fp,0(sp)
   13128:	dec00104 	addi	sp,sp,4
   1312c:	f800283a 	ret

00013130 <atexit>:
   13130:	200b883a 	mov	r5,r4
   13134:	000f883a 	mov	r7,zero
   13138:	000d883a 	mov	r6,zero
   1313c:	0009883a 	mov	r4,zero
   13140:	00131bc1 	jmpi	131bc <__register_exitproc>

00013144 <exit>:
   13144:	defffe04 	addi	sp,sp,-8
   13148:	000b883a 	mov	r5,zero
   1314c:	dc000015 	stw	r16,0(sp)
   13150:	dfc00115 	stw	ra,4(sp)
   13154:	2021883a 	mov	r16,r4
   13158:	00133140 	call	13314 <__call_exitprocs>
   1315c:	8009883a 	mov	r4,r16
   13160:	00134a40 	call	134a4 <_exit>

00013164 <memcmp>:
   13164:	218d883a 	add	r6,r4,r6
   13168:	21800826 	beq	r4,r6,1318c <memcmp+0x28>
   1316c:	20800003 	ldbu	r2,0(r4)
   13170:	28c00003 	ldbu	r3,0(r5)
   13174:	10c00226 	beq	r2,r3,13180 <memcmp+0x1c>
   13178:	10c5c83a 	sub	r2,r2,r3
   1317c:	f800283a 	ret
   13180:	21000044 	addi	r4,r4,1
   13184:	29400044 	addi	r5,r5,1
   13188:	003ff706 	br	13168 <_gp+0xffff6930>
   1318c:	0005883a 	mov	r2,zero
   13190:	f800283a 	ret

00013194 <memcpy>:
   13194:	2005883a 	mov	r2,r4
   13198:	2007883a 	mov	r3,r4
   1319c:	218d883a 	add	r6,r4,r6
   131a0:	19800526 	beq	r3,r6,131b8 <memcpy+0x24>
   131a4:	29000003 	ldbu	r4,0(r5)
   131a8:	18c00044 	addi	r3,r3,1
   131ac:	29400044 	addi	r5,r5,1
   131b0:	193fffc5 	stb	r4,-1(r3)
   131b4:	003ffa06 	br	131a0 <_gp+0xffff6968>
   131b8:	f800283a 	ret

000131bc <__register_exitproc>:
   131bc:	00800074 	movhi	r2,1
   131c0:	10920e04 	addi	r2,r2,18488
   131c4:	10c00017 	ldw	r3,0(r2)
   131c8:	defff904 	addi	sp,sp,-28
   131cc:	dc000015 	stw	r16,0(sp)
   131d0:	1c000c17 	ldw	r16,48(r3)
   131d4:	dd400515 	stw	r21,20(sp)
   131d8:	dd000415 	stw	r20,16(sp)
   131dc:	dcc00315 	stw	r19,12(sp)
   131e0:	dc800215 	stw	r18,8(sp)
   131e4:	dc400115 	stw	r17,4(sp)
   131e8:	dfc00615 	stw	ra,24(sp)
   131ec:	202b883a 	mov	r21,r4
   131f0:	2823883a 	mov	r17,r5
   131f4:	3027883a 	mov	r19,r6
   131f8:	3825883a 	mov	r18,r7
   131fc:	1029883a 	mov	r20,r2
   13200:	8000021e 	bne	r16,zero,1320c <__register_exitproc+0x50>
   13204:	1c000d04 	addi	r16,r3,52
   13208:	1c000c15 	stw	r16,48(r3)
   1320c:	80800117 	ldw	r2,4(r16)
   13210:	00c007c4 	movi	r3,31
   13214:	1880110e 	bge	r3,r2,1325c <__register_exitproc+0xa0>
   13218:	00800034 	movhi	r2,0
   1321c:	10800004 	addi	r2,r2,0
   13220:	1000021e 	bne	r2,zero,1322c <__register_exitproc+0x70>
   13224:	00bfffc4 	movi	r2,-1
   13228:	00003106 	br	132f0 <__register_exitproc+0x134>
   1322c:	01002304 	movi	r4,140
   13230:	00000000 	call	0 <__alt_mem_memory-0x10000>
   13234:	1021883a 	mov	r16,r2
   13238:	103ffa26 	beq	r2,zero,13224 <_gp+0xffff69ec>
   1323c:	10000115 	stw	zero,4(r2)
   13240:	a0800017 	ldw	r2,0(r20)
   13244:	10c00c17 	ldw	r3,48(r2)
   13248:	80c00015 	stw	r3,0(r16)
   1324c:	14000c15 	stw	r16,48(r2)
   13250:	80002215 	stw	zero,136(r16)
   13254:	a8001d26 	beq	r21,zero,132cc <__register_exitproc+0x110>
   13258:	00000606 	br	13274 <__register_exitproc+0xb8>
   1325c:	a8001b26 	beq	r21,zero,132cc <__register_exitproc+0x110>
   13260:	80802217 	ldw	r2,136(r16)
   13264:	1000091e 	bne	r2,zero,1328c <__register_exitproc+0xd0>
   13268:	00800034 	movhi	r2,0
   1326c:	10800004 	addi	r2,r2,0
   13270:	103fec26 	beq	r2,zero,13224 <_gp+0xffff69ec>
   13274:	01004204 	movi	r4,264
   13278:	00000000 	call	0 <__alt_mem_memory-0x10000>
   1327c:	103fe926 	beq	r2,zero,13224 <_gp+0xffff69ec>
   13280:	10004015 	stw	zero,256(r2)
   13284:	10004115 	stw	zero,260(r2)
   13288:	80802215 	stw	r2,136(r16)
   1328c:	81400117 	ldw	r5,4(r16)
   13290:	01000044 	movi	r4,1
   13294:	2947883a 	add	r3,r5,r5
   13298:	18c7883a 	add	r3,r3,r3
   1329c:	10c7883a 	add	r3,r2,r3
   132a0:	1cc00015 	stw	r19,0(r3)
   132a4:	2148983a 	sll	r4,r4,r5
   132a8:	11404017 	ldw	r5,256(r2)
   132ac:	290ab03a 	or	r5,r5,r4
   132b0:	11404015 	stw	r5,256(r2)
   132b4:	1c802015 	stw	r18,128(r3)
   132b8:	00c00084 	movi	r3,2
   132bc:	a8c0031e 	bne	r21,r3,132cc <__register_exitproc+0x110>
   132c0:	10c04117 	ldw	r3,260(r2)
   132c4:	1908b03a 	or	r4,r3,r4
   132c8:	11004115 	stw	r4,260(r2)
   132cc:	80800117 	ldw	r2,4(r16)
   132d0:	10c00044 	addi	r3,r2,1
   132d4:	10800084 	addi	r2,r2,2
   132d8:	1085883a 	add	r2,r2,r2
   132dc:	1085883a 	add	r2,r2,r2
   132e0:	80c00115 	stw	r3,4(r16)
   132e4:	80a1883a 	add	r16,r16,r2
   132e8:	84400015 	stw	r17,0(r16)
   132ec:	0005883a 	mov	r2,zero
   132f0:	dfc00617 	ldw	ra,24(sp)
   132f4:	dd400517 	ldw	r21,20(sp)
   132f8:	dd000417 	ldw	r20,16(sp)
   132fc:	dcc00317 	ldw	r19,12(sp)
   13300:	dc800217 	ldw	r18,8(sp)
   13304:	dc400117 	ldw	r17,4(sp)
   13308:	dc000017 	ldw	r16,0(sp)
   1330c:	dec00704 	addi	sp,sp,28
   13310:	f800283a 	ret

00013314 <__call_exitprocs>:
   13314:	defff504 	addi	sp,sp,-44
   13318:	dd000515 	stw	r20,20(sp)
   1331c:	05000074 	movhi	r20,1
   13320:	dc800315 	stw	r18,12(sp)
   13324:	dfc00a15 	stw	ra,40(sp)
   13328:	df000915 	stw	fp,36(sp)
   1332c:	ddc00815 	stw	r23,32(sp)
   13330:	dd800715 	stw	r22,28(sp)
   13334:	dd400615 	stw	r21,24(sp)
   13338:	dcc00415 	stw	r19,16(sp)
   1333c:	dc400215 	stw	r17,8(sp)
   13340:	dc000115 	stw	r16,4(sp)
   13344:	d9000015 	stw	r4,0(sp)
   13348:	2825883a 	mov	r18,r5
   1334c:	a5120e04 	addi	r20,r20,18488
   13350:	a4400017 	ldw	r17,0(r20)
   13354:	8cc00c17 	ldw	r19,48(r17)
   13358:	8c400c04 	addi	r17,r17,48
   1335c:	98004526 	beq	r19,zero,13474 <__call_exitprocs+0x160>
   13360:	9c000117 	ldw	r16,4(r19)
   13364:	00900034 	movhi	r2,16384
   13368:	10bfffc4 	addi	r2,r2,-1
   1336c:	9d402217 	ldw	r21,136(r19)
   13370:	85bfffc4 	addi	r22,r16,-1
   13374:	80a1883a 	add	r16,r16,r2
   13378:	8421883a 	add	r16,r16,r16
   1337c:	8421883a 	add	r16,r16,r16
   13380:	ac2f883a 	add	r23,r21,r16
   13384:	84000204 	addi	r16,r16,8
   13388:	9c21883a 	add	r16,r19,r16
   1338c:	b0002716 	blt	r22,zero,1342c <__call_exitprocs+0x118>
   13390:	90000726 	beq	r18,zero,133b0 <__call_exitprocs+0x9c>
   13394:	a800041e 	bne	r21,zero,133a8 <__call_exitprocs+0x94>
   13398:	b5bfffc4 	addi	r22,r22,-1
   1339c:	bdffff04 	addi	r23,r23,-4
   133a0:	843fff04 	addi	r16,r16,-4
   133a4:	003ff906 	br	1338c <_gp+0xffff6b54>
   133a8:	b9002017 	ldw	r4,128(r23)
   133ac:	913ffa1e 	bne	r18,r4,13398 <_gp+0xffff6b60>
   133b0:	99000117 	ldw	r4,4(r19)
   133b4:	82000017 	ldw	r8,0(r16)
   133b8:	213fffc4 	addi	r4,r4,-1
   133bc:	b100021e 	bne	r22,r4,133c8 <__call_exitprocs+0xb4>
   133c0:	9d800115 	stw	r22,4(r19)
   133c4:	00000106 	br	133cc <__call_exitprocs+0xb8>
   133c8:	80000015 	stw	zero,0(r16)
   133cc:	403ff226 	beq	r8,zero,13398 <_gp+0xffff6b60>
   133d0:	9f000117 	ldw	fp,4(r19)
   133d4:	a8000526 	beq	r21,zero,133ec <__call_exitprocs+0xd8>
   133d8:	00800044 	movi	r2,1
   133dc:	1592983a 	sll	r9,r2,r22
   133e0:	a9404017 	ldw	r5,256(r21)
   133e4:	494a703a 	and	r5,r9,r5
   133e8:	2800021e 	bne	r5,zero,133f4 <__call_exitprocs+0xe0>
   133ec:	403ee83a 	callr	r8
   133f0:	00000906 	br	13418 <__call_exitprocs+0x104>
   133f4:	a9004117 	ldw	r4,260(r21)
   133f8:	4908703a 	and	r4,r9,r4
   133fc:	2000041e 	bne	r4,zero,13410 <__call_exitprocs+0xfc>
   13400:	b9400017 	ldw	r5,0(r23)
   13404:	d9000017 	ldw	r4,0(sp)
   13408:	403ee83a 	callr	r8
   1340c:	00000206 	br	13418 <__call_exitprocs+0x104>
   13410:	b9000017 	ldw	r4,0(r23)
   13414:	403ee83a 	callr	r8
   13418:	99000117 	ldw	r4,4(r19)
   1341c:	e13fcc1e 	bne	fp,r4,13350 <_gp+0xffff6b18>
   13420:	89000017 	ldw	r4,0(r17)
   13424:	993fdc26 	beq	r19,r4,13398 <_gp+0xffff6b60>
   13428:	003fc906 	br	13350 <_gp+0xffff6b18>
   1342c:	00800034 	movhi	r2,0
   13430:	10800004 	addi	r2,r2,0
   13434:	10000f26 	beq	r2,zero,13474 <__call_exitprocs+0x160>
   13438:	99400117 	ldw	r5,4(r19)
   1343c:	99000017 	ldw	r4,0(r19)
   13440:	2800091e 	bne	r5,zero,13468 <__call_exitprocs+0x154>
   13444:	20000826 	beq	r4,zero,13468 <__call_exitprocs+0x154>
   13448:	89000015 	stw	r4,0(r17)
   1344c:	a8000226 	beq	r21,zero,13458 <__call_exitprocs+0x144>
   13450:	a809883a 	mov	r4,r21
   13454:	00000000 	call	0 <__alt_mem_memory-0x10000>
   13458:	9809883a 	mov	r4,r19
   1345c:	00000000 	call	0 <__alt_mem_memory-0x10000>
   13460:	8cc00017 	ldw	r19,0(r17)
   13464:	003fbd06 	br	1335c <_gp+0xffff6b24>
   13468:	9823883a 	mov	r17,r19
   1346c:	2027883a 	mov	r19,r4
   13470:	003fba06 	br	1335c <_gp+0xffff6b24>
   13474:	dfc00a17 	ldw	ra,40(sp)
   13478:	df000917 	ldw	fp,36(sp)
   1347c:	ddc00817 	ldw	r23,32(sp)
   13480:	dd800717 	ldw	r22,28(sp)
   13484:	dd400617 	ldw	r21,24(sp)
   13488:	dd000517 	ldw	r20,20(sp)
   1348c:	dcc00417 	ldw	r19,16(sp)
   13490:	dc800317 	ldw	r18,12(sp)
   13494:	dc400217 	ldw	r17,8(sp)
   13498:	dc000117 	ldw	r16,4(sp)
   1349c:	dec00b04 	addi	sp,sp,44
   134a0:	f800283a 	ret

000134a4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   134a4:	defffd04 	addi	sp,sp,-12
   134a8:	df000215 	stw	fp,8(sp)
   134ac:	df000204 	addi	fp,sp,8
   134b0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   134b4:	0001883a 	nop
   134b8:	e0bfff17 	ldw	r2,-4(fp)
   134bc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   134c0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   134c4:	10000226 	beq	r2,zero,134d0 <_exit+0x2c>
    ALT_SIM_FAIL();
   134c8:	002af070 	cmpltui	zero,zero,43969
   134cc:	00000106 	br	134d4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   134d0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   134d4:	003fff06 	br	134d4 <_gp+0xffff6c9c>
